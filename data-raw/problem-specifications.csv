exercise,canonical_data,description
accumulate,{},"Implement the `accumulate` operation, which, given a collection and an
operation to perform on each element of the collection, returns a new
collection containing the result of applying that operation to each element of
the input collection.

Given the collection of numbers:

- 1, 2, 3, 4, 5

And the operation:

- square a number (`x => x * x`)

Your code should be able to produce the collection of squares:

- 1, 4, 9, 16, 25

Check out the test suite to see the expected function signature.

## Restrictions

Keep your hands off that collect/map/fmap/whatchamacallit functionality
provided by your standard library!
Solve this one yourself using other basic tools instead.
"
acronym,"{""exercise"": ""acronym"", ""version"": ""1.4.0"", ""cases"": [{""description"": ""Abbreviate a phrase"", ""cases"": [{""description"": ""basic"", ""property"": ""abbreviate"", ""input"": {""phrase"": ""Portable Network Graphics""}, ""expected"": ""PNG""}, {""description"": ""lowercase words"", ""property"": ""abbreviate"", ""input"": {""phrase"": ""Ruby on Rails""}, ""expected"": ""ROR""}, {""description"": ""punctuation"", ""property"": ""abbreviate"", ""input"": {""phrase"": ""First In, First Out""}, ""expected"": ""FIFO""}, {""description"": ""all caps word"", ""property"": ""abbreviate"", ""input"": {""phrase"": ""GNU Image Manipulation Program""}, ""expected"": ""GIMP""}, {""description"": ""punctuation without whitespace"", ""property"": ""abbreviate"", ""input"": {""phrase"": ""Complementary metal-oxide semiconductor""}, ""expected"": ""CMOS""}, {""description"": ""very long abbreviation"", ""property"": ""abbreviate"", ""input"": {""phrase"": ""Rolling On The Floor Laughing So Hard That My Dogs Came Over And Licked Me""}, ""expected"": ""ROTFLSHTMDCOALM""}]}]}","Convert a phrase to its acronym.

Techies love their TLA (Three Letter Acronyms)!

Help generate some jargon by writing a program that converts a long name
like Portable Network Graphics to its acronym (PNG).
"
affine-cipher,"{""exercise"": ""affine-cipher"", ""version"": ""2.0.0"", ""comments"": [""The test are divided into two groups: "", ""* Encoding from English to affine cipher"", ""* Decoding from affine cipher to all-lowercase-mashed-together English""], ""cases"": [{""description"": ""encode"", ""comments"": [""Test encoding from English to ciphertext with keys""], ""cases"": [{""description"": ""encode yes"", ""property"": ""encode"", ""input"": {""phrase"": ""yes"", ""key"": {""a"": 5, ""b"": 7}}, ""expected"": ""xbt""}, {""description"": ""encode no"", ""property"": ""encode"", ""input"": {""phrase"": ""no"", ""key"": {""a"": 15, ""b"": 18}}, ""expected"": ""fu""}, {""description"": ""encode OMG"", ""property"": ""encode"", ""input"": {""phrase"": ""OMG"", ""key"": {""a"": 21, ""b"": 3}}, ""expected"": ""lvz""}, {""description"": ""encode O M G"", ""property"": ""encode"", ""input"": {""phrase"": ""O M G"", ""key"": {""a"": 25, ""b"": 47}}, ""expected"": ""hjp""}, {""description"": ""encode mindblowingly"", ""property"": ""encode"", ""input"": {""phrase"": ""mindblowingly"", ""key"": {""a"": 11, ""b"": 15}}, ""expected"": ""rzcwa gnxzc dgt""}, {""description"": ""encode numbers"", ""property"": ""encode"", ""input"": {""phrase"": ""Testing,1 2 3, testing."", ""key"": {""a"": 3, ""b"": 4}}, ""expected"": ""jqgjc rw123 jqgjc rw""}, {""description"": ""encode deep thought"", ""property"": ""encode"", ""input"": {""phrase"": ""Truth is fiction."", ""key"": {""a"": 5, ""b"": 17}}, ""expected"": ""iynia fdqfb ifje""}, {""description"": ""encode all the letters"", ""property"": ""encode"", ""input"": {""phrase"": ""The quick brown fox jumps over the lazy dog."", ""key"": {""a"": 17, ""b"": 33}}, ""expected"": ""swxtj npvyk lruol iejdc blaxk swxmh qzglf""}, {""description"": ""encode with a not coprime to m"", ""property"": ""encode"", ""input"": {""phrase"": ""This is a test."", ""key"": {""a"": 6, ""b"": 17}}, ""expected"": {""error"": ""a and m must be coprime.""}}]}, {""description"": ""decode"", ""comments"": [""Test decoding from ciphertext to English with keys""], ""cases"": [{""description"": ""decode exercism"", ""property"": ""decode"", ""input"": {""phrase"": ""tytgn fjr"", ""key"": {""a"": 3, ""b"": 7}}, ""expected"": ""exercism""}, {""description"": ""decode a sentence"", ""property"": ""decode"", ""input"": {""phrase"": ""qdwju nqcro muwhn odqun oppmd aunwd o"", ""key"": {""a"": 19, ""b"": 16}}, ""expected"": ""anobstacleisoftenasteppingstone""}, {""description"": ""decode numbers"", ""property"": ""decode"", ""input"": {""phrase"": ""odpoz ub123 odpoz ub"", ""key"": {""a"": 25, ""b"": 7}}, ""expected"": ""testing123testing""}, {""description"": ""decode all the letters"", ""property"": ""decode"", ""input"": {""phrase"": ""swxtj npvyk lruol iejdc blaxk swxmh qzglf"", ""key"": {""a"": 17, ""b"": 33}}, ""expected"": ""thequickbrownfoxjumpsoverthelazydog""}, {""description"": ""decode with no spaces in input"", ""property"": ""decode"", ""input"": {""phrase"": ""swxtjnpvyklruoliejdcblaxkswxmhqzglf"", ""key"": {""a"": 17, ""b"": 33}}, ""expected"": ""thequickbrownfoxjumpsoverthelazydog""}, {""description"": ""decode with too many spaces"", ""property"": ""decode"", ""input"": {""phrase"": ""vszzm    cly   yd cg    qdp"", ""key"": {""a"": 15, ""b"": 16}}, ""expected"": ""jollygreengiant""}, {""description"": ""decode with a not coprime to m"", ""property"": ""decode"", ""input"": {""phrase"": ""Test"", ""key"": {""a"": 13, ""b"": 5}}, ""expected"": {""error"": ""a and m must be coprime.""}}]}]}","Create an implementation of the affine cipher,
an ancient encryption system created in the Middle East.
 
The affine cipher is a type of monoalphabetic substitution cipher.
Each character is mapped to its numeric equivalent, encrypted with
a mathematical function and then converted to the letter relating to
its new numeric value. Although all monoalphabetic ciphers are weak,
the affine cypher is much stronger than the atbash cipher,
because it has many more keys.
 
the encryption function is:
 
  `E(x) = (ax + b) mod m`
  -  where `x` is the letter's index from 0 - length of alphabet - 1
  -  `m` is the length of the alphabet. For the roman alphabet `m == 26`.
  -  and `a` and `b` make the key
 
the decryption function is:
 
  `D(y) = a^-1(y - b) mod m`
  -  where `y` is the numeric value of an encrypted letter, ie. `y = E(x)`
  -  it is important to note that `a^-1` is the modular multiplicative inverse
     of `a mod m`
  -  the modular multiplicative inverse of `a` only exists if `a` and `m` are
     coprime.
 
To find the MMI of `a`:

  `an mod m = 1`
  -  where `n` is the modular multiplicative inverse of `a mod m`

More information regarding how to find a Modular Multiplicative Inverse
and what it means can be found [here.](https://en.wikipedia.org/wiki/Modular_multiplicative_inverse) 

Because automatic decryption fails if `a` is not coprime to `m` your
program should return status 1 and `""Error: a and m must be coprime.""`
if they are not.  Otherwise it should encode or decode with the
provided key.
 
The Caesar (shift) cipher is a simple affine cipher where `a` is 1 and
`b` as the magnitude results in a static displacement of the letters.
This is much less secure than a full implementation of the affine cipher.

Ciphertext is written out in groups of fixed length, the traditional group
size being 5 letters, and punctuation is excluded. This is to make it
harder to guess things based on word boundaries.

## Examples
 
 - Encoding `test` gives `ybty` with the key a=5 b=7
 - Decoding `ybty` gives `test` with the key a=5 b=7
 - Decoding `ybty` gives `lqul` with the wrong key a=11 b=7
 - Decoding `kqlfd jzvgy tpaet icdhm rtwly kqlon ubstx`
   - gives `thequickbrownfoxjumpsoverthelazydog` with the key a=19 b=13
 - Encoding `test` with the key a=18 b=13
   - gives `Error: a and m must be coprime.`
   - because a and m are not relatively prime

### Examples of finding a Modular Multiplicative Inverse (MMI)

  - simple example:
    - `9 mod 26 = 9`
    - `9 * 3 mod 26 = 27 mod 26 = 1`
    - `3` is the MMI of `9 mod 26`
  - a more complicated example:
    - `15 mod 26 = 15`
    - `15 * 7 mod 26 = 105 mod 26 = 1`
    - `7` is the MMI of `15 mod 26`
"
all-your-base,"{""exercise"": ""all-your-base"", ""version"": ""2.3.0"", ""comments"": [""This canonical data makes the following choices:"", ""1. Zero is always represented in outputs as [0] instead of []."", ""2. In no other instances are leading zeroes present in any outputs."", ""3. Leading zeroes are accepted in inputs."", ""4. An empty sequence of input digits is considered zero, rather than an error."", """", ""Tracks that wish to make different decisions for these choices may translate appropriately."", """", ""All your numeric-base are belong to [2..]. :)""], ""cases"": [{""description"": ""single bit one to decimal"", ""property"": ""rebase"", ""input"": {""inputBase"": 2, ""digits"": [1], ""outputBase"": 10}, ""expected"": [1]}, {""description"": ""binary to single decimal"", ""property"": ""rebase"", ""input"": {""inputBase"": 2, ""digits"": [1, 0, 1], ""outputBase"": 10}, ""expected"": [5]}, {""description"": ""single decimal to binary"", ""property"": ""rebase"", ""input"": {""inputBase"": 10, ""digits"": [5], ""outputBase"": 2}, ""expected"": [1, 0, 1]}, {""description"": ""binary to multiple decimal"", ""property"": ""rebase"", ""input"": {""inputBase"": 2, ""digits"": [1, 0, 1, 0, 1, 0], ""outputBase"": 10}, ""expected"": [4, 2]}, {""description"": ""decimal to binary"", ""property"": ""rebase"", ""input"": {""inputBase"": 10, ""digits"": [4, 2], ""outputBase"": 2}, ""expected"": [1, 0, 1, 0, 1, 0]}, {""description"": ""trinary to hexadecimal"", ""property"": ""rebase"", ""input"": {""inputBase"": 3, ""digits"": [1, 1, 2, 0], ""outputBase"": 16}, ""expected"": [2, 10]}, {""description"": ""hexadecimal to trinary"", ""property"": ""rebase"", ""input"": {""inputBase"": 16, ""digits"": [2, 10], ""outputBase"": 3}, ""expected"": [1, 1, 2, 0]}, {""description"": ""15-bit integer"", ""property"": ""rebase"", ""input"": {""inputBase"": 97, ""digits"": [3, 46, 60], ""outputBase"": 73}, ""expected"": [6, 10, 45]}, {""description"": ""empty list"", ""property"": ""rebase"", ""input"": {""inputBase"": 2, ""digits"": [], ""outputBase"": 10}, ""expected"": [0]}, {""description"": ""single zero"", ""property"": ""rebase"", ""input"": {""inputBase"": 10, ""digits"": [0], ""outputBase"": 2}, ""expected"": [0]}, {""description"": ""multiple zeros"", ""property"": ""rebase"", ""input"": {""inputBase"": 10, ""digits"": [0, 0, 0], ""outputBase"": 2}, ""expected"": [0]}, {""description"": ""leading zeros"", ""property"": ""rebase"", ""input"": {""inputBase"": 7, ""digits"": [0, 6, 0], ""outputBase"": 10}, ""expected"": [4, 2]}, {""description"": ""input base is one"", ""property"": ""rebase"", ""input"": {""inputBase"": 1, ""digits"": [0], ""outputBase"": 10}, ""expected"": {""error"": ""input base must be >= 2""}}, {""description"": ""input base is zero"", ""property"": ""rebase"", ""input"": {""inputBase"": 0, ""digits"": [], ""outputBase"": 10}, ""expected"": {""error"": ""input base must be >= 2""}}, {""description"": ""input base is negative"", ""property"": ""rebase"", ""input"": {""inputBase"": -2, ""digits"": [1], ""outputBase"": 10}, ""expected"": {""error"": ""input base must be >= 2""}}, {""description"": ""negative digit"", ""property"": ""rebase"", ""input"": {""inputBase"": 2, ""digits"": [1, -1, 1, 0, 1, 0], ""outputBase"": 10}, ""expected"": {""error"": ""all digits must satisfy 0 <= d < input base""}}, {""description"": ""invalid positive digit"", ""property"": ""rebase"", ""input"": {""inputBase"": 2, ""digits"": [1, 2, 1, 0, 1, 0], ""outputBase"": 10}, ""expected"": {""error"": ""all digits must satisfy 0 <= d < input base""}}, {""description"": ""output base is one"", ""property"": ""rebase"", ""input"": {""inputBase"": 2, ""digits"": [1, 0, 1, 0, 1, 0], ""outputBase"": 1}, ""expected"": {""error"": ""output base must be >= 2""}}, {""description"": ""output base is zero"", ""property"": ""rebase"", ""input"": {""inputBase"": 10, ""digits"": [7], ""outputBase"": 0}, ""expected"": {""error"": ""output base must be >= 2""}}, {""description"": ""output base is negative"", ""property"": ""rebase"", ""input"": {""inputBase"": 2, ""digits"": [1], ""outputBase"": -7}, ""expected"": {""error"": ""output base must be >= 2""}}, {""description"": ""both bases are negative"", ""property"": ""rebase"", ""input"": {""inputBase"": -2, ""digits"": [1], ""outputBase"": -7}, ""expected"": {""error"": ""input base must be >= 2""}}]}","Convert a number, represented as a sequence of digits in one base, to any other base.

Implement general base conversion. Given a number in base **a**,
represented as a sequence of digits, convert it to base **b**.

## Note

- Try to implement the conversion yourself.
  Do not use something else to perform the conversion for you.

## About [Positional Notation](https://en.wikipedia.org/wiki/Positional_notation)

In positional notation, a number in base **b** can be understood as a linear
combination of powers of **b**.

The number 42, *in base 10*, means:

(4 * 10^1) + (2 * 10^0)

The number 101010, *in base 2*, means:

(1 * 2^5) + (0 * 2^4) + (1 * 2^3) + (0 * 2^2) + (1 * 2^1) + (0 * 2^0)

The number 1120, *in base 3*, means:

(1 * 3^3) + (1 * 3^2) + (2 * 3^1) + (0 * 3^0)

I think you got the idea!

*Yes. Those three numbers above are exactly the same. Congratulations!*
"
allergies,"{""exercise"": ""allergies"", ""version"": ""1.2.0"", ""cases"": [{""description"": ""allergicTo"", ""comments"": [""Given a number and a substance, indicate whether Tom is allergic "", ""to that substance."", ""Test cases for this method involve more than one assertion."", ""Each case in 'expected' specifies what the method should return for"", ""the given substance.""], ""cases"": [{""description"": ""no allergies means not allergic"", ""property"": ""allergicTo"", ""input"": {""score"": 0}, ""expected"": [{""substance"": ""peanuts"", ""result"": false}, {""substance"": ""cats"", ""result"": false}, {""substance"": ""strawberries"", ""result"": false}]}, {""description"": ""is allergic to eggs"", ""property"": ""allergicTo"", ""input"": {""score"": 1}, ""expected"": [{""substance"": ""eggs"", ""result"": true}]}, {""description"": ""allergic to eggs in addition to other stuff"", ""property"": ""allergicTo"", ""input"": {""score"": 5}, ""expected"": [{""substance"": ""eggs"", ""result"": true}, {""substance"": ""shellfish"", ""result"": true}, {""substance"": ""strawberries"", ""result"": false}]}, {""description"": ""allergic to strawberries but not peanuts"", ""property"": ""allergicTo"", ""input"": {""score"": 9}, ""expected"": [{""substance"": ""eggs"", ""result"": true}, {""substance"": ""peanuts"", ""result"": false}, {""substance"": ""shellfish"", ""result"": false}, {""substance"": ""strawberries"", ""result"": true}]}]}, {""description"": ""list"", ""comments"": [""Given a number, list all things Tom is allergic to""], ""cases"": [{""description"": ""no allergies at all"", ""property"": ""list"", ""input"": {""score"": 0}, ""expected"": []}, {""description"": ""allergic to just eggs"", ""property"": ""list"", ""input"": {""score"": 1}, ""expected"": [""eggs""]}, {""description"": ""allergic to just peanuts"", ""property"": ""list"", ""input"": {""score"": 2}, ""expected"": [""peanuts""]}, {""description"": ""allergic to just strawberries"", ""property"": ""list"", ""input"": {""score"": 8}, ""expected"": [""strawberries""]}, {""description"": ""allergic to eggs and peanuts"", ""property"": ""list"", ""input"": {""score"": 3}, ""expected"": [""eggs"", ""peanuts""]}, {""description"": ""allergic to more than eggs but not peanuts"", ""property"": ""list"", ""input"": {""score"": 5}, ""expected"": [""eggs"", ""shellfish""]}, {""description"": ""allergic to lots of stuff"", ""property"": ""list"", ""input"": {""score"": 248}, ""expected"": [""strawberries"", ""tomatoes"", ""chocolate"", ""pollen"", ""cats""]}, {""description"": ""allergic to everything"", ""property"": ""list"", ""input"": {""score"": 255}, ""expected"": [""eggs"", ""peanuts"", ""shellfish"", ""strawberries"", ""tomatoes"", ""chocolate"", ""pollen"", ""cats""]}, {""description"": ""ignore non allergen score parts"", ""property"": ""list"", ""input"": {""score"": 509}, ""expected"": [""eggs"", ""shellfish"", ""strawberries"", ""tomatoes"", ""chocolate"", ""pollen"", ""cats""]}]}]}","Given a person's allergy score, determine whether or not they're allergic to a given item, and their full list of allergies.

An allergy test produces a single numeric score which contains the
information about all the allergies the person has (that they were
tested for).

The list of items (and their value) that were tested are:

* eggs (1)
* peanuts (2)
* shellfish (4)
* strawberries (8)
* tomatoes (16)
* chocolate (32)
* pollen (64)
* cats (128)

So if Tom is allergic to peanuts and chocolate, he gets a score of 34.

Now, given just that score of 34, your program should be able to say:

- Whether Tom is allergic to any one of those allergens listed above.
- All the allergens Tom is allergic to.

Note: a given score may include allergens **not** listed above (i.e.
allergens that score 256, 512, 1024, etc.).  Your program should
ignore those components of the score.  For example, if the allergy
score is 257, your program should only report the eggs (1) allergy.
"
alphametics,"{""exercise"": ""alphametics"", ""version"": ""1.2.0"", ""cases"": [{""description"": ""Solve the alphametics puzzle"", ""cases"": [{""description"": ""puzzle with three letters"", ""property"": ""solve"", ""input"": {""puzzle"": ""I + BB == ILL""}, ""expected"": {""I"": 1, ""B"": 9, ""L"": 0}}, {""description"": ""solution must have unique value for each letter"", ""property"": ""solve"", ""input"": {""puzzle"": ""A == B""}, ""expected"": null}, {""description"": ""leading zero solution is invalid"", ""property"": ""solve"", ""input"": {""puzzle"": ""ACA + DD == BD""}, ""expected"": null}, {""description"": ""puzzle with four letters"", ""property"": ""solve"", ""input"": {""puzzle"": ""AS + A == MOM""}, ""expected"": {""A"": 9, ""S"": 2, ""M"": 1, ""O"": 0}}, {""description"": ""puzzle with six letters"", ""property"": ""solve"", ""input"": {""puzzle"": ""NO + NO + TOO == LATE""}, ""expected"": {""N"": 7, ""O"": 4, ""T"": 9, ""L"": 1, ""A"": 0, ""E"": 2}}, {""description"": ""puzzle with seven letters"", ""property"": ""solve"", ""input"": {""puzzle"": ""HE + SEES + THE == LIGHT""}, ""expected"": {""E"": 4, ""G"": 2, ""H"": 5, ""I"": 0, ""L"": 1, ""S"": 9, ""T"": 7}}, {""description"": ""puzzle with eight letters"", ""property"": ""solve"", ""input"": {""puzzle"": ""SEND + MORE == MONEY""}, ""expected"": {""S"": 9, ""E"": 5, ""N"": 6, ""D"": 7, ""M"": 1, ""O"": 0, ""R"": 8, ""Y"": 2}}, {""description"": ""puzzle with ten letters"", ""property"": ""solve"", ""input"": {""puzzle"": ""AND + A + STRONG + OFFENSE + AS + A + GOOD == DEFENSE""}, ""expected"": {""A"": 5, ""D"": 3, ""E"": 4, ""F"": 7, ""G"": 8, ""N"": 0, ""O"": 2, ""R"": 1, ""S"": 6, ""T"": 9}}, {""description"": ""puzzle with ten letters and 199 addends"", ""property"": ""solve"", ""input"": {""puzzle"": ""THIS + A + FIRE + THEREFORE + FOR + ALL + HISTORIES + I + TELL + A + TALE + THAT + FALSIFIES + ITS + TITLE + TIS + A + LIE + THE + TALE + OF + THE + LAST + FIRE + HORSES + LATE + AFTER + THE + FIRST + FATHERS + FORESEE + THE + HORRORS + THE + LAST + FREE + TROLL + TERRIFIES + THE + HORSES + OF + FIRE + THE + TROLL + RESTS + AT + THE + HOLE + OF + LOSSES + IT + IS + THERE + THAT + SHE + STORES + ROLES + OF + LEATHERS + AFTER + SHE + SATISFIES + HER + HATE + OFF + THOSE + FEARS + A + TASTE + RISES + AS + SHE + HEARS + THE + LEAST + FAR + HORSE + THOSE + FAST + HORSES + THAT + FIRST + HEAR + THE + TROLL + FLEE + OFF + TO + THE + FOREST + THE + HORSES + THAT + ALERTS + RAISE + THE + STARES + OF + THE + OTHERS + AS + THE + TROLL + ASSAILS + AT + THE + TOTAL + SHIFT + HER + TEETH + TEAR + HOOF + OFF + TORSO + AS + THE + LAST + HORSE + FORFEITS + ITS + LIFE + THE + FIRST + FATHERS + HEAR + OF + THE + HORRORS + THEIR + FEARS + THAT + THE + FIRES + FOR + THEIR + FEASTS + ARREST + AS + THE + FIRST + FATHERS + RESETTLE + THE + LAST + OF + THE + FIRE + HORSES + THE + LAST + TROLL + HARASSES + THE + FOREST + HEART + FREE + AT + LAST + OF + THE + LAST + TROLL + ALL + OFFER + THEIR + FIRE + HEAT + TO + THE + ASSISTERS + FAR + OFF + THE + TROLL + FASTS + ITS + LIFE + SHORTER + AS + STARS + RISE + THE + HORSES + REST + SAFE + AFTER + ALL + SHARE + HOT + FISH + AS + THEIR + AFFILIATES + TAILOR + A + ROOFS + FOR + THEIR + SAFE == FORTRESSES""}, ""expected"": {""A"": 1, ""E"": 0, ""F"": 5, ""H"": 8, ""I"": 7, ""L"": 2, ""O"": 6, ""R"": 3, ""S"": 4, ""T"": 9}}]}]}","Write a function to solve alphametics puzzles.

[Alphametics](https://en.wikipedia.org/wiki/Alphametics) is a puzzle where
letters in words are replaced with numbers.

For example `SEND + MORE = MONEY`:

```text
  S E N D
  M O R E +
-----------
M O N E Y
```

Replacing these with valid numbers gives:

```text
  9 5 6 7
  1 0 8 5 +
-----------
1 0 6 5 2
```

This is correct because every letter is replaced by a different number and the
words, translated into numbers, then make a valid sum.

Each letter must represent a different digit, and the leading digit of
a multi-digit number must not be zero.

Write a function to solve alphametics puzzles.
"
anagram,"{""exercise"": ""anagram"", ""version"": ""1.3.0"", ""cases"": [{""description"": ""no matches"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""diaper"", ""candidates"": [""hello"", ""world"", ""zombies"", ""pants""]}, ""expected"": []}, {""description"": ""detects two anagrams"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""master"", ""candidates"": [""stream"", ""pigeon"", ""maters""]}, ""expected"": [""stream"", ""maters""]}, {""description"": ""does not detect anagram subsets"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""good"", ""candidates"": [""dog"", ""goody""]}, ""expected"": []}, {""description"": ""detects anagram"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""listen"", ""candidates"": [""enlists"", ""google"", ""inlets"", ""banana""]}, ""expected"": [""inlets""]}, {""description"": ""detects three anagrams"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""allergy"", ""candidates"": [""gallery"", ""ballerina"", ""regally"", ""clergy"", ""largely"", ""leading""]}, ""expected"": [""gallery"", ""regally"", ""largely""]}, {""description"": ""does not detect non-anagrams with identical checksum"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""mass"", ""candidates"": [""last""]}, ""expected"": []}, {""description"": ""detects anagrams case-insensitively"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""Orchestra"", ""candidates"": [""cashregister"", ""Carthorse"", ""radishes""]}, ""expected"": [""Carthorse""]}, {""description"": ""detects anagrams using case-insensitive subject"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""Orchestra"", ""candidates"": [""cashregister"", ""carthorse"", ""radishes""]}, ""expected"": [""carthorse""]}, {""description"": ""detects anagrams using case-insensitive possible matches"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""orchestra"", ""candidates"": [""cashregister"", ""Carthorse"", ""radishes""]}, ""expected"": [""Carthorse""]}, {""description"": ""does not detect a anagram if the original word is repeated"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""go"", ""candidates"": [""go Go GO""]}, ""expected"": []}, {""description"": ""anagrams must use all letters exactly once"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""tapper"", ""candidates"": [""patter""]}, ""expected"": []}, {""description"": ""capital word is not own anagram"", ""property"": ""findAnagrams"", ""input"": {""subject"": ""BANANA"", ""candidates"": [""Banana""]}, ""expected"": []}]}","Given a word and a list of possible anagrams, select the correct sublist.

Given `""listen""` and a list of candidates like `""enlists"" ""google""
""inlets"" ""banana""` the program should return a list containing
`""inlets""`.
"
armstrong-numbers,"{""exercise"": ""armstrong-numbers"", ""version"": ""1.0.0"", ""cases"": [{""description"": ""Single digit numbers are Armstrong numbers"", ""property"": ""isArmstrongNumber"", ""input"": {""number"": 5}, ""expected"": true}, {""description"": ""There are no 2 digit Armstrong numbers"", ""property"": ""isArmstrongNumber"", ""input"": {""number"": 10}, ""expected"": false}, {""description"": ""Three digit number that is an Armstrong number"", ""property"": ""isArmstrongNumber"", ""input"": {""number"": 153}, ""expected"": true}, {""description"": ""Three digit number that is not an Armstrong number"", ""property"": ""isArmstrongNumber"", ""input"": {""number"": 100}, ""expected"": false}, {""description"": ""Four digit number that is an Armstrong number"", ""property"": ""isArmstrongNumber"", ""input"": {""number"": 9474}, ""expected"": true}, {""description"": ""Four digit number that is not an Armstrong number"", ""property"": ""isArmstrongNumber"", ""input"": {""number"": 9475}, ""expected"": false}, {""description"": ""Seven digit number that is an Armstrong number"", ""property"": ""isArmstrongNumber"", ""input"": {""number"": 9926315}, ""expected"": true}, {""description"": ""Seven digit number that is not an Armstrong number"", ""property"": ""isArmstrongNumber"", ""input"": {""number"": 9926314}, ""expected"": false}]}","An [Armstrong number](https://en.wikipedia.org/wiki/Narcissistic_number) is a number that is the sum of its own digits each raised to the power of the number of digits.

For example:

- 9 is an Armstrong number, because `9 = 9^1 = 9`
- 10 is *not* an Armstrong number, because `10 != 1^2 + 0^2 = 1`
- 153 is an Armstrong number, because: `153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153`
- 154 is *not* an Armstrong number, because: `154 != 1^3 + 5^3 + 4^3 = 1 + 125 + 64 = 190`

Write some code to determine whether a number is an Armstrong number.
"
atbash-cipher,"{""exercise"": ""atbash-cipher"", ""version"": ""1.2.0"", ""comments"": [""The tests are divided into two groups: "", ""* Encoding from English to atbash cipher"", ""* Decoding from atbash cipher to all-lowercase-mashed-together English""], ""cases"": [{""description"": ""encode"", ""comments"": [""Test encoding from English to atbash""], ""cases"": [{""description"": ""encode yes"", ""property"": ""encode"", ""input"": {""phrase"": ""yes""}, ""expected"": ""bvh""}, {""description"": ""encode no"", ""property"": ""encode"", ""input"": {""phrase"": ""no""}, ""expected"": ""ml""}, {""description"": ""encode OMG"", ""property"": ""encode"", ""input"": {""phrase"": ""OMG""}, ""expected"": ""lnt""}, {""description"": ""encode spaces"", ""property"": ""encode"", ""input"": {""phrase"": ""O M G""}, ""expected"": ""lnt""}, {""description"": ""encode mindblowingly"", ""property"": ""encode"", ""input"": {""phrase"": ""mindblowingly""}, ""expected"": ""nrmwy oldrm tob""}, {""description"": ""encode numbers"", ""property"": ""encode"", ""input"": {""phrase"": ""Testing,1 2 3, testing.""}, ""expected"": ""gvhgr mt123 gvhgr mt""}, {""description"": ""encode deep thought"", ""property"": ""encode"", ""input"": {""phrase"": ""Truth is fiction.""}, ""expected"": ""gifgs rhurx grlm""}, {""description"": ""encode all the letters"", ""property"": ""encode"", ""input"": {""phrase"": ""The quick brown fox jumps over the lazy dog.""}, ""expected"": ""gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt""}]}, {""description"": ""decode"", ""comments"": [""Test decoding from atbash to English""], ""cases"": [{""description"": ""decode exercism"", ""property"": ""decode"", ""input"": {""phrase"": ""vcvix rhn""}, ""expected"": ""exercism""}, {""description"": ""decode a sentence"", ""property"": ""decode"", ""input"": {""phrase"": ""zmlyh gzxov rhlug vmzhg vkkrm thglm v""}, ""expected"": ""anobstacleisoftenasteppingstone""}, {""description"": ""decode numbers"", ""property"": ""decode"", ""input"": {""phrase"": ""gvhgr mt123 gvhgr mt""}, ""expected"": ""testing123testing""}, {""description"": ""decode all the letters"", ""property"": ""decode"", ""input"": {""phrase"": ""gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt""}, ""expected"": ""thequickbrownfoxjumpsoverthelazydog""}, {""description"": ""decode with too many spaces"", ""property"": ""decode"", ""input"": {""phrase"": ""vc vix    r hn""}, ""expected"": ""exercism""}, {""description"": ""decode with no spaces"", ""property"": ""decode"", ""input"": {""phrase"": ""zmlyhgzxovrhlugvmzhgvkkrmthglmv""}, ""expected"": ""anobstacleisoftenasteppingstone""}]}]}","Create an implementation of the atbash cipher, an ancient encryption system created in the Middle East.

The Atbash cipher is a simple substitution cipher that relies on
transposing all the letters in the alphabet such that the resulting
alphabet is backwards. The first letter is replaced with the last
letter, the second with the second-last, and so on.

An Atbash cipher for the Latin alphabet would be as follows:

```text
Plain:  abcdefghijklmnopqrstuvwxyz
Cipher: zyxwvutsrqponmlkjihgfedcba
```

It is a very weak cipher because it only has one possible key, and it is
a simple monoalphabetic substitution cipher. However, this may not have
been an issue in the cipher's time.

Ciphertext is written out in groups of fixed length, the traditional group size
being 5 letters, and punctuation is excluded. This is to make it harder to guess
things based on word boundaries.

## Examples

- Encoding `test` gives `gvhg`
- Decoding `gvhg` gives `test`
- Decoding `gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt` gives `thequickbrownfoxjumpsoverthelazydog`
"
bank-account,{},"Simulate a bank account supporting opening/closing, withdrawals, and deposits
of money. Watch out for concurrent transactions!

A bank account can be accessed in multiple ways. Clients can make
deposits and withdrawals using the internet, mobile phones, etc. Shops
can charge against the account.

Create an account that can be accessed from multiple threads/processes
(terminology depends on your programming language).

It should be possible to close an account; operations against a closed
account must fail.

## Instructions

Run the test file, and fix each of the errors in turn. When you get the
first test to pass, go to the first pending or skipped test, and make
that pass as well. When all of the tests are passing, feel free to
submit.

Remember that passing code is just the first step. The goal is to work
towards a solution that is as readable and expressive as you can make
it.

Have fun!
"
beer-song,"{""exercise"": ""beer-song"", ""version"": ""2.1.0"", ""cases"": [{""description"": ""verse"", ""cases"": [{""description"": ""single verse"", ""cases"": [{""description"": ""first generic verse"", ""property"": ""recite"", ""input"": {""startBottles"": 99, ""takeDown"": 1}, ""expected"": [""99 bottles of beer on the wall, 99 bottles of beer."", ""Take one down and pass it around, 98 bottles of beer on the wall.""]}, {""description"": ""last generic verse"", ""property"": ""recite"", ""input"": {""startBottles"": 3, ""takeDown"": 1}, ""expected"": [""3 bottles of beer on the wall, 3 bottles of beer."", ""Take one down and pass it around, 2 bottles of beer on the wall.""]}, {""description"": ""verse with 2 bottles"", ""property"": ""recite"", ""input"": {""startBottles"": 2, ""takeDown"": 1}, ""expected"": [""2 bottles of beer on the wall, 2 bottles of beer."", ""Take one down and pass it around, 1 bottle of beer on the wall.""]}, {""description"": ""verse with 1 bottle"", ""property"": ""recite"", ""input"": {""startBottles"": 1, ""takeDown"": 1}, ""expected"": [""1 bottle of beer on the wall, 1 bottle of beer."", ""Take it down and pass it around, no more bottles of beer on the wall.""]}, {""description"": ""verse with 0 bottles"", ""property"": ""recite"", ""input"": {""startBottles"": 0, ""takeDown"": 1}, ""expected"": [""No more bottles of beer on the wall, no more bottles of beer."", ""Go to the store and buy some more, 99 bottles of beer on the wall.""]}]}]}, {""description"": ""lyrics"", ""cases"": [{""description"": ""multiple verses"", ""cases"": [{""description"": ""first two verses"", ""property"": ""recite"", ""input"": {""startBottles"": 99, ""takeDown"": 2}, ""expected"": [""99 bottles of beer on the wall, 99 bottles of beer."", ""Take one down and pass it around, 98 bottles of beer on the wall."", """", ""98 bottles of beer on the wall, 98 bottles of beer."", ""Take one down and pass it around, 97 bottles of beer on the wall.""]}, {""description"": ""last three verses"", ""property"": ""recite"", ""input"": {""startBottles"": 2, ""takeDown"": 3}, ""expected"": [""2 bottles of beer on the wall, 2 bottles of beer."", ""Take one down and pass it around, 1 bottle of beer on the wall."", """", ""1 bottle of beer on the wall, 1 bottle of beer."", ""Take it down and pass it around, no more bottles of beer on the wall."", """", ""No more bottles of beer on the wall, no more bottles of beer."", ""Go to the store and buy some more, 99 bottles of beer on the wall.""]}, {""description"": ""all verses"", ""property"": ""recite"", ""input"": {""startBottles"": 99, ""takeDown"": 100}, ""expected"": [""99 bottles of beer on the wall, 99 bottles of beer."", ""Take one down and pass it around, 98 bottles of beer on the wall."", """", ""98 bottles of beer on the wall, 98 bottles of beer."", ""Take one down and pass it around, 97 bottles of beer on the wall."", """", ""97 bottles of beer on the wall, 97 bottles of beer."", ""Take one down and pass it around, 96 bottles of beer on the wall."", """", ""96 bottles of beer on the wall, 96 bottles of beer."", ""Take one down and pass it around, 95 bottles of beer on the wall."", """", ""95 bottles of beer on the wall, 95 bottles of beer."", ""Take one down and pass it around, 94 bottles of beer on the wall."", """", ""94 bottles of beer on the wall, 94 bottles of beer."", ""Take one down and pass it around, 93 bottles of beer on the wall."", """", ""93 bottles of beer on the wall, 93 bottles of beer."", ""Take one down and pass it around, 92 bottles of beer on the wall."", """", ""92 bottles of beer on the wall, 92 bottles of beer."", ""Take one down and pass it around, 91 bottles of beer on the wall."", """", ""91 bottles of beer on the wall, 91 bottles of beer."", ""Take one down and pass it around, 90 bottles of beer on the wall."", """", ""90 bottles of beer on the wall, 90 bottles of beer."", ""Take one down and pass it around, 89 bottles of beer on the wall."", """", ""89 bottles of beer on the wall, 89 bottles of beer."", ""Take one down and pass it around, 88 bottles of beer on the wall."", """", ""88 bottles of beer on the wall, 88 bottles of beer."", ""Take one down and pass it around, 87 bottles of beer on the wall."", """", ""87 bottles of beer on the wall, 87 bottles of beer."", ""Take one down and pass it around, 86 bottles of beer on the wall."", """", ""86 bottles of beer on the wall, 86 bottles of beer."", ""Take one down and pass it around, 85 bottles of beer on the wall."", """", ""85 bottles of beer on the wall, 85 bottles of beer."", ""Take one down and pass it around, 84 bottles of beer on the wall."", """", ""84 bottles of beer on the wall, 84 bottles of beer."", ""Take one down and pass it around, 83 bottles of beer on the wall."", """", ""83 bottles of beer on the wall, 83 bottles of beer."", ""Take one down and pass it around, 82 bottles of beer on the wall."", """", ""82 bottles of beer on the wall, 82 bottles of beer."", ""Take one down and pass it around, 81 bottles of beer on the wall."", """", ""81 bottles of beer on the wall, 81 bottles of beer."", ""Take one down and pass it around, 80 bottles of beer on the wall."", """", ""80 bottles of beer on the wall, 80 bottles of beer."", ""Take one down and pass it around, 79 bottles of beer on the wall."", """", ""79 bottles of beer on the wall, 79 bottles of beer."", ""Take one down and pass it around, 78 bottles of beer on the wall."", """", ""78 bottles of beer on the wall, 78 bottles of beer."", ""Take one down and pass it around, 77 bottles of beer on the wall."", """", ""77 bottles of beer on the wall, 77 bottles of beer."", ""Take one down and pass it around, 76 bottles of beer on the wall."", """", ""76 bottles of beer on the wall, 76 bottles of beer."", ""Take one down and pass it around, 75 bottles of beer on the wall."", """", ""75 bottles of beer on the wall, 75 bottles of beer."", ""Take one down and pass it around, 74 bottles of beer on the wall."", """", ""74 bottles of beer on the wall, 74 bottles of beer."", ""Take one down and pass it around, 73 bottles of beer on the wall."", """", ""73 bottles of beer on the wall, 73 bottles of beer."", ""Take one down and pass it around, 72 bottles of beer on the wall."", """", ""72 bottles of beer on the wall, 72 bottles of beer."", ""Take one down and pass it around, 71 bottles of beer on the wall."", """", ""71 bottles of beer on the wall, 71 bottles of beer."", ""Take one down and pass it around, 70 bottles of beer on the wall."", """", ""70 bottles of beer on the wall, 70 bottles of beer."", ""Take one down and pass it around, 69 bottles of beer on the wall."", """", ""69 bottles of beer on the wall, 69 bottles of beer."", ""Take one down and pass it around, 68 bottles of beer on the wall."", """", ""68 bottles of beer on the wall, 68 bottles of beer."", ""Take one down and pass it around, 67 bottles of beer on the wall."", """", ""67 bottles of beer on the wall, 67 bottles of beer."", ""Take one down and pass it around, 66 bottles of beer on the wall."", """", ""66 bottles of beer on the wall, 66 bottles of beer."", ""Take one down and pass it around, 65 bottles of beer on the wall."", """", ""65 bottles of beer on the wall, 65 bottles of beer."", ""Take one down and pass it around, 64 bottles of beer on the wall."", """", ""64 bottles of beer on the wall, 64 bottles of beer."", ""Take one down and pass it around, 63 bottles of beer on the wall."", """", ""63 bottles of beer on the wall, 63 bottles of beer."", ""Take one down and pass it around, 62 bottles of beer on the wall."", """", ""62 bottles of beer on the wall, 62 bottles of beer."", ""Take one down and pass it around, 61 bottles of beer on the wall."", """", ""61 bottles of beer on the wall, 61 bottles of beer."", ""Take one down and pass it around, 60 bottles of beer on the wall."", """", ""60 bottles of beer on the wall, 60 bottles of beer."", ""Take one down and pass it around, 59 bottles of beer on the wall."", """", ""59 bottles of beer on the wall, 59 bottles of beer."", ""Take one down and pass it around, 58 bottles of beer on the wall."", """", ""58 bottles of beer on the wall, 58 bottles of beer."", ""Take one down and pass it around, 57 bottles of beer on the wall."", """", ""57 bottles of beer on the wall, 57 bottles of beer."", ""Take one down and pass it around, 56 bottles of beer on the wall."", """", ""56 bottles of beer on the wall, 56 bottles of beer."", ""Take one down and pass it around, 55 bottles of beer on the wall."", """", ""55 bottles of beer on the wall, 55 bottles of beer."", ""Take one down and pass it around, 54 bottles of beer on the wall."", """", ""54 bottles of beer on the wall, 54 bottles of beer."", ""Take one down and pass it around, 53 bottles of beer on the wall."", """", ""53 bottles of beer on the wall, 53 bottles of beer."", ""Take one down and pass it around, 52 bottles of beer on the wall."", """", ""52 bottles of beer on the wall, 52 bottles of beer."", ""Take one down and pass it around, 51 bottles of beer on the wall."", """", ""51 bottles of beer on the wall, 51 bottles of beer."", ""Take one down and pass it around, 50 bottles of beer on the wall."", """", ""50 bottles of beer on the wall, 50 bottles of beer."", ""Take one down and pass it around, 49 bottles of beer on the wall."", """", ""49 bottles of beer on the wall, 49 bottles of beer."", ""Take one down and pass it around, 48 bottles of beer on the wall."", """", ""48 bottles of beer on the wall, 48 bottles of beer."", ""Take one down and pass it around, 47 bottles of beer on the wall."", """", ""47 bottles of beer on the wall, 47 bottles of beer."", ""Take one down and pass it around, 46 bottles of beer on the wall."", """", ""46 bottles of beer on the wall, 46 bottles of beer."", ""Take one down and pass it around, 45 bottles of beer on the wall."", """", ""45 bottles of beer on the wall, 45 bottles of beer."", ""Take one down and pass it around, 44 bottles of beer on the wall."", """", ""44 bottles of beer on the wall, 44 bottles of beer."", ""Take one down and pass it around, 43 bottles of beer on the wall."", """", ""43 bottles of beer on the wall, 43 bottles of beer."", ""Take one down and pass it around, 42 bottles of beer on the wall."", """", ""42 bottles of beer on the wall, 42 bottles of beer."", ""Take one down and pass it around, 41 bottles of beer on the wall."", """", ""41 bottles of beer on the wall, 41 bottles of beer."", ""Take one down and pass it around, 40 bottles of beer on the wall."", """", ""40 bottles of beer on the wall, 40 bottles of beer."", ""Take one down and pass it around, 39 bottles of beer on the wall."", """", ""39 bottles of beer on the wall, 39 bottles of beer."", ""Take one down and pass it around, 38 bottles of beer on the wall."", """", ""38 bottles of beer on the wall, 38 bottles of beer."", ""Take one down and pass it around, 37 bottles of beer on the wall."", """", ""37 bottles of beer on the wall, 37 bottles of beer."", ""Take one down and pass it around, 36 bottles of beer on the wall."", """", ""36 bottles of beer on the wall, 36 bottles of beer."", ""Take one down and pass it around, 35 bottles of beer on the wall."", """", ""35 bottles of beer on the wall, 35 bottles of beer."", ""Take one down and pass it around, 34 bottles of beer on the wall."", """", ""34 bottles of beer on the wall, 34 bottles of beer."", ""Take one down and pass it around, 33 bottles of beer on the wall."", """", ""33 bottles of beer on the wall, 33 bottles of beer."", ""Take one down and pass it around, 32 bottles of beer on the wall."", """", ""32 bottles of beer on the wall, 32 bottles of beer."", ""Take one down and pass it around, 31 bottles of beer on the wall."", """", ""31 bottles of beer on the wall, 31 bottles of beer."", ""Take one down and pass it around, 30 bottles of beer on the wall."", """", ""30 bottles of beer on the wall, 30 bottles of beer."", ""Take one down and pass it around, 29 bottles of beer on the wall."", """", ""29 bottles of beer on the wall, 29 bottles of beer."", ""Take one down and pass it around, 28 bottles of beer on the wall."", """", ""28 bottles of beer on the wall, 28 bottles of beer."", ""Take one down and pass it around, 27 bottles of beer on the wall."", """", ""27 bottles of beer on the wall, 27 bottles of beer."", ""Take one down and pass it around, 26 bottles of beer on the wall."", """", ""26 bottles of beer on the wall, 26 bottles of beer."", ""Take one down and pass it around, 25 bottles of beer on the wall."", """", ""25 bottles of beer on the wall, 25 bottles of beer."", ""Take one down and pass it around, 24 bottles of beer on the wall."", """", ""24 bottles of beer on the wall, 24 bottles of beer."", ""Take one down and pass it around, 23 bottles of beer on the wall."", """", ""23 bottles of beer on the wall, 23 bottles of beer."", ""Take one down and pass it around, 22 bottles of beer on the wall."", """", ""22 bottles of beer on the wall, 22 bottles of beer."", ""Take one down and pass it around, 21 bottles of beer on the wall."", """", ""21 bottles of beer on the wall, 21 bottles of beer."", ""Take one down and pass it around, 20 bottles of beer on the wall."", """", ""20 bottles of beer on the wall, 20 bottles of beer."", ""Take one down and pass it around, 19 bottles of beer on the wall."", """", ""19 bottles of beer on the wall, 19 bottles of beer."", ""Take one down and pass it around, 18 bottles of beer on the wall."", """", ""18 bottles of beer on the wall, 18 bottles of beer."", ""Take one down and pass it around, 17 bottles of beer on the wall."", """", ""17 bottles of beer on the wall, 17 bottles of beer."", ""Take one down and pass it around, 16 bottles of beer on the wall."", """", ""16 bottles of beer on the wall, 16 bottles of beer."", ""Take one down and pass it around, 15 bottles of beer on the wall."", """", ""15 bottles of beer on the wall, 15 bottles of beer."", ""Take one down and pass it around, 14 bottles of beer on the wall."", """", ""14 bottles of beer on the wall, 14 bottles of beer."", ""Take one down and pass it around, 13 bottles of beer on the wall."", """", ""13 bottles of beer on the wall, 13 bottles of beer."", ""Take one down and pass it around, 12 bottles of beer on the wall."", """", ""12 bottles of beer on the wall, 12 bottles of beer."", ""Take one down and pass it around, 11 bottles of beer on the wall."", """", ""11 bottles of beer on the wall, 11 bottles of beer."", ""Take one down and pass it around, 10 bottles of beer on the wall."", """", ""10 bottles of beer on the wall, 10 bottles of beer."", ""Take one down and pass it around, 9 bottles of beer on the wall."", """", ""9 bottles of beer on the wall, 9 bottles of beer."", ""Take one down and pass it around, 8 bottles of beer on the wall."", """", ""8 bottles of beer on the wall, 8 bottles of beer."", ""Take one down and pass it around, 7 bottles of beer on the wall."", """", ""7 bottles of beer on the wall, 7 bottles of beer."", ""Take one down and pass it around, 6 bottles of beer on the wall."", """", ""6 bottles of beer on the wall, 6 bottles of beer."", ""Take one down and pass it around, 5 bottles of beer on the wall."", """", ""5 bottles of beer on the wall, 5 bottles of beer."", ""Take one down and pass it around, 4 bottles of beer on the wall."", """", ""4 bottles of beer on the wall, 4 bottles of beer."", ""Take one down and pass it around, 3 bottles of beer on the wall."", """", ""3 bottles of beer on the wall, 3 bottles of beer."", ""Take one down and pass it around, 2 bottles of beer on the wall."", """", ""2 bottles of beer on the wall, 2 bottles of beer."", ""Take one down and pass it around, 1 bottle of beer on the wall."", """", ""1 bottle of beer on the wall, 1 bottle of beer."", ""Take it down and pass it around, no more bottles of beer on the wall."", """", ""No more bottles of beer on the wall, no more bottles of beer."", ""Go to the store and buy some more, 99 bottles of beer on the wall.""]}]}]}]}","Recite the lyrics to that beloved classic, that field-trip favorite: 99 Bottles of Beer on the Wall.

Note that not all verses are identical.

```text
99 bottles of beer on the wall, 99 bottles of beer.
Take one down and pass it around, 98 bottles of beer on the wall.

98 bottles of beer on the wall, 98 bottles of beer.
Take one down and pass it around, 97 bottles of beer on the wall.

97 bottles of beer on the wall, 97 bottles of beer.
Take one down and pass it around, 96 bottles of beer on the wall.

96 bottles of beer on the wall, 96 bottles of beer.
Take one down and pass it around, 95 bottles of beer on the wall.

95 bottles of beer on the wall, 95 bottles of beer.
Take one down and pass it around, 94 bottles of beer on the wall.

94 bottles of beer on the wall, 94 bottles of beer.
Take one down and pass it around, 93 bottles of beer on the wall.

93 bottles of beer on the wall, 93 bottles of beer.
Take one down and pass it around, 92 bottles of beer on the wall.

92 bottles of beer on the wall, 92 bottles of beer.
Take one down and pass it around, 91 bottles of beer on the wall.

91 bottles of beer on the wall, 91 bottles of beer.
Take one down and pass it around, 90 bottles of beer on the wall.

90 bottles of beer on the wall, 90 bottles of beer.
Take one down and pass it around, 89 bottles of beer on the wall.

89 bottles of beer on the wall, 89 bottles of beer.
Take one down and pass it around, 88 bottles of beer on the wall.

88 bottles of beer on the wall, 88 bottles of beer.
Take one down and pass it around, 87 bottles of beer on the wall.

87 bottles of beer on the wall, 87 bottles of beer.
Take one down and pass it around, 86 bottles of beer on the wall.

86 bottles of beer on the wall, 86 bottles of beer.
Take one down and pass it around, 85 bottles of beer on the wall.

85 bottles of beer on the wall, 85 bottles of beer.
Take one down and pass it around, 84 bottles of beer on the wall.

84 bottles of beer on the wall, 84 bottles of beer.
Take one down and pass it around, 83 bottles of beer on the wall.

83 bottles of beer on the wall, 83 bottles of beer.
Take one down and pass it around, 82 bottles of beer on the wall.

82 bottles of beer on the wall, 82 bottles of beer.
Take one down and pass it around, 81 bottles of beer on the wall.

81 bottles of beer on the wall, 81 bottles of beer.
Take one down and pass it around, 80 bottles of beer on the wall.

80 bottles of beer on the wall, 80 bottles of beer.
Take one down and pass it around, 79 bottles of beer on the wall.

79 bottles of beer on the wall, 79 bottles of beer.
Take one down and pass it around, 78 bottles of beer on the wall.

78 bottles of beer on the wall, 78 bottles of beer.
Take one down and pass it around, 77 bottles of beer on the wall.

77 bottles of beer on the wall, 77 bottles of beer.
Take one down and pass it around, 76 bottles of beer on the wall.

76 bottles of beer on the wall, 76 bottles of beer.
Take one down and pass it around, 75 bottles of beer on the wall.

75 bottles of beer on the wall, 75 bottles of beer.
Take one down and pass it around, 74 bottles of beer on the wall.

74 bottles of beer on the wall, 74 bottles of beer.
Take one down and pass it around, 73 bottles of beer on the wall.

73 bottles of beer on the wall, 73 bottles of beer.
Take one down and pass it around, 72 bottles of beer on the wall.

72 bottles of beer on the wall, 72 bottles of beer.
Take one down and pass it around, 71 bottles of beer on the wall.

71 bottles of beer on the wall, 71 bottles of beer.
Take one down and pass it around, 70 bottles of beer on the wall.

70 bottles of beer on the wall, 70 bottles of beer.
Take one down and pass it around, 69 bottles of beer on the wall.

69 bottles of beer on the wall, 69 bottles of beer.
Take one down and pass it around, 68 bottles of beer on the wall.

68 bottles of beer on the wall, 68 bottles of beer.
Take one down and pass it around, 67 bottles of beer on the wall.

67 bottles of beer on the wall, 67 bottles of beer.
Take one down and pass it around, 66 bottles of beer on the wall.

66 bottles of beer on the wall, 66 bottles of beer.
Take one down and pass it around, 65 bottles of beer on the wall.

65 bottles of beer on the wall, 65 bottles of beer.
Take one down and pass it around, 64 bottles of beer on the wall.

64 bottles of beer on the wall, 64 bottles of beer.
Take one down and pass it around, 63 bottles of beer on the wall.

63 bottles of beer on the wall, 63 bottles of beer.
Take one down and pass it around, 62 bottles of beer on the wall.

62 bottles of beer on the wall, 62 bottles of beer.
Take one down and pass it around, 61 bottles of beer on the wall.

61 bottles of beer on the wall, 61 bottles of beer.
Take one down and pass it around, 60 bottles of beer on the wall.

60 bottles of beer on the wall, 60 bottles of beer.
Take one down and pass it around, 59 bottles of beer on the wall.

59 bottles of beer on the wall, 59 bottles of beer.
Take one down and pass it around, 58 bottles of beer on the wall.

58 bottles of beer on the wall, 58 bottles of beer.
Take one down and pass it around, 57 bottles of beer on the wall.

57 bottles of beer on the wall, 57 bottles of beer.
Take one down and pass it around, 56 bottles of beer on the wall.

56 bottles of beer on the wall, 56 bottles of beer.
Take one down and pass it around, 55 bottles of beer on the wall.

55 bottles of beer on the wall, 55 bottles of beer.
Take one down and pass it around, 54 bottles of beer on the wall.

54 bottles of beer on the wall, 54 bottles of beer.
Take one down and pass it around, 53 bottles of beer on the wall.

53 bottles of beer on the wall, 53 bottles of beer.
Take one down and pass it around, 52 bottles of beer on the wall.

52 bottles of beer on the wall, 52 bottles of beer.
Take one down and pass it around, 51 bottles of beer on the wall.

51 bottles of beer on the wall, 51 bottles of beer.
Take one down and pass it around, 50 bottles of beer on the wall.

50 bottles of beer on the wall, 50 bottles of beer.
Take one down and pass it around, 49 bottles of beer on the wall.

49 bottles of beer on the wall, 49 bottles of beer.
Take one down and pass it around, 48 bottles of beer on the wall.

48 bottles of beer on the wall, 48 bottles of beer.
Take one down and pass it around, 47 bottles of beer on the wall.

47 bottles of beer on the wall, 47 bottles of beer.
Take one down and pass it around, 46 bottles of beer on the wall.

46 bottles of beer on the wall, 46 bottles of beer.
Take one down and pass it around, 45 bottles of beer on the wall.

45 bottles of beer on the wall, 45 bottles of beer.
Take one down and pass it around, 44 bottles of beer on the wall.

44 bottles of beer on the wall, 44 bottles of beer.
Take one down and pass it around, 43 bottles of beer on the wall.

43 bottles of beer on the wall, 43 bottles of beer.
Take one down and pass it around, 42 bottles of beer on the wall.

42 bottles of beer on the wall, 42 bottles of beer.
Take one down and pass it around, 41 bottles of beer on the wall.

41 bottles of beer on the wall, 41 bottles of beer.
Take one down and pass it around, 40 bottles of beer on the wall.

40 bottles of beer on the wall, 40 bottles of beer.
Take one down and pass it around, 39 bottles of beer on the wall.

39 bottles of beer on the wall, 39 bottles of beer.
Take one down and pass it around, 38 bottles of beer on the wall.

38 bottles of beer on the wall, 38 bottles of beer.
Take one down and pass it around, 37 bottles of beer on the wall.

37 bottles of beer on the wall, 37 bottles of beer.
Take one down and pass it around, 36 bottles of beer on the wall.

36 bottles of beer on the wall, 36 bottles of beer.
Take one down and pass it around, 35 bottles of beer on the wall.

35 bottles of beer on the wall, 35 bottles of beer.
Take one down and pass it around, 34 bottles of beer on the wall.

34 bottles of beer on the wall, 34 bottles of beer.
Take one down and pass it around, 33 bottles of beer on the wall.

33 bottles of beer on the wall, 33 bottles of beer.
Take one down and pass it around, 32 bottles of beer on the wall.

32 bottles of beer on the wall, 32 bottles of beer.
Take one down and pass it around, 31 bottles of beer on the wall.

31 bottles of beer on the wall, 31 bottles of beer.
Take one down and pass it around, 30 bottles of beer on the wall.

30 bottles of beer on the wall, 30 bottles of beer.
Take one down and pass it around, 29 bottles of beer on the wall.

29 bottles of beer on the wall, 29 bottles of beer.
Take one down and pass it around, 28 bottles of beer on the wall.

28 bottles of beer on the wall, 28 bottles of beer.
Take one down and pass it around, 27 bottles of beer on the wall.

27 bottles of beer on the wall, 27 bottles of beer.
Take one down and pass it around, 26 bottles of beer on the wall.

26 bottles of beer on the wall, 26 bottles of beer.
Take one down and pass it around, 25 bottles of beer on the wall.

25 bottles of beer on the wall, 25 bottles of beer.
Take one down and pass it around, 24 bottles of beer on the wall.

24 bottles of beer on the wall, 24 bottles of beer.
Take one down and pass it around, 23 bottles of beer on the wall.

23 bottles of beer on the wall, 23 bottles of beer.
Take one down and pass it around, 22 bottles of beer on the wall.

22 bottles of beer on the wall, 22 bottles of beer.
Take one down and pass it around, 21 bottles of beer on the wall.

21 bottles of beer on the wall, 21 bottles of beer.
Take one down and pass it around, 20 bottles of beer on the wall.

20 bottles of beer on the wall, 20 bottles of beer.
Take one down and pass it around, 19 bottles of beer on the wall.

19 bottles of beer on the wall, 19 bottles of beer.
Take one down and pass it around, 18 bottles of beer on the wall.

18 bottles of beer on the wall, 18 bottles of beer.
Take one down and pass it around, 17 bottles of beer on the wall.

17 bottles of beer on the wall, 17 bottles of beer.
Take one down and pass it around, 16 bottles of beer on the wall.

16 bottles of beer on the wall, 16 bottles of beer.
Take one down and pass it around, 15 bottles of beer on the wall.

15 bottles of beer on the wall, 15 bottles of beer.
Take one down and pass it around, 14 bottles of beer on the wall.

14 bottles of beer on the wall, 14 bottles of beer.
Take one down and pass it around, 13 bottles of beer on the wall.

13 bottles of beer on the wall, 13 bottles of beer.
Take one down and pass it around, 12 bottles of beer on the wall.

12 bottles of beer on the wall, 12 bottles of beer.
Take one down and pass it around, 11 bottles of beer on the wall.

11 bottles of beer on the wall, 11 bottles of beer.
Take one down and pass it around, 10 bottles of beer on the wall.

10 bottles of beer on the wall, 10 bottles of beer.
Take one down and pass it around, 9 bottles of beer on the wall.

9 bottles of beer on the wall, 9 bottles of beer.
Take one down and pass it around, 8 bottles of beer on the wall.

8 bottles of beer on the wall, 8 bottles of beer.
Take one down and pass it around, 7 bottles of beer on the wall.

7 bottles of beer on the wall, 7 bottles of beer.
Take one down and pass it around, 6 bottles of beer on the wall.

6 bottles of beer on the wall, 6 bottles of beer.
Take one down and pass it around, 5 bottles of beer on the wall.

5 bottles of beer on the wall, 5 bottles of beer.
Take one down and pass it around, 4 bottles of beer on the wall.

4 bottles of beer on the wall, 4 bottles of beer.
Take one down and pass it around, 3 bottles of beer on the wall.

3 bottles of beer on the wall, 3 bottles of beer.
Take one down and pass it around, 2 bottles of beer on the wall.

2 bottles of beer on the wall, 2 bottles of beer.
Take one down and pass it around, 1 bottle of beer on the wall.

1 bottle of beer on the wall, 1 bottle of beer.
Take it down and pass it around, no more bottles of beer on the wall.

No more bottles of beer on the wall, no more bottles of beer.
Go to the store and buy some more, 99 bottles of beer on the wall.
```

## For bonus points

Did you get the tests passing and the code clean? If you want to, these
are some additional things you could try:

* Remove as much duplication as you possibly can.
* Optimize for readability, even if it means introducing duplication.
* If you've removed all the duplication, do you have a lot of
  conditionals? Try replacing the conditionals with polymorphism, if it
  applies in this language. How readable is it?

Then please share your thoughts in a comment on the submission. Did this
experiment make the code better? Worse? Did you learn anything from it?
"
binary-search-tree,"{""exercise"": ""binary-search-tree"", ""version"": ""1.0.0"", ""comments"": [""Each test case assumes an empty/new tree."", ""As per exercism/problem-specifications#996 key 'treeData' counts as an input"", ""to test generators."", ""The key 'treeData' represents an array of numbers for which the data should be "", ""inserted/added to the tree as it appears in the array from left to right."", ""e.g. treeData: ['2', '1', '3', '6', '7', '5']"", ""Insert 2. Insert 1. Insert 3. Insert 6, so on..."", ""This canonical-data does not restrict the data type of array elements to either"", ""strings or integers."", ""The key 'expected' represents tree state as JSON object of schema :"", ""{"", ""    'title':'nodeObject',"", ""    'type':'object',"", ""    'properties':{"", ""        'data':{"", ""            'type':'string'"", ""        },"", ""        'left':{"", ""            'type':'nodeObject'"", ""        },"", ""        'right':{"", ""            'type':'nodeObject'"", ""        }"", ""    },"", ""    'required':['data', 'left', 'right']"", ""}""], ""cases"": [{""description"": ""data is retained"", ""property"": ""data"", ""input"": {""treeData"": [""4""]}, ""expected"": {""data"": ""4"", ""left"": null, ""right"": null}}, {""description"": ""insert data at proper node"", ""cases"": [{""description"": ""smaller number at left node"", ""property"": ""data"", ""input"": {""treeData"": [""4"", ""2""]}, ""expected"": {""data"": ""4"", ""left"": {""data"": ""2"", ""left"": null, ""right"": null}, ""right"": null}}, {""description"": ""same number at left node"", ""property"": ""data"", ""input"": {""treeData"": [""4"", ""4""]}, ""expected"": {""data"": ""4"", ""left"": {""data"": ""4"", ""left"": null, ""right"": null}, ""right"": null}}, {""description"": ""greater number at right node"", ""property"": ""data"", ""input"": {""treeData"": [""4"", ""5""]}, ""expected"": {""data"": ""4"", ""left"": null, ""right"": {""data"": ""5"", ""left"": null, ""right"": null}}}]}, {""description"": ""can create complex tree"", ""property"": ""data"", ""input"": {""treeData"": [""4"", ""2"", ""6"", ""1"", ""3"", ""5"", ""7""]}, ""expected"": {""data"": ""4"", ""left"": {""data"": ""2"", ""left"": {""data"": ""1"", ""left"": null, ""right"": null}, ""right"": {""data"": ""3"", ""left"": null, ""right"": null}}, ""right"": {""data"": ""6"", ""left"": {""data"": ""5"", ""left"": null, ""right"": null}, ""right"": {""data"": ""7"", ""left"": null, ""right"": null}}}}, {""description"": ""can sort data"", ""cases"": [{""description"": ""can sort single number"", ""property"": ""sortedData"", ""input"": {""treeData"": [""2""]}, ""expected"": [""2""]}, {""description"": ""can sort if second number is smaller than first"", ""property"": ""sortedData"", ""input"": {""treeData"": [""2"", ""1""]}, ""expected"": [""1"", ""2""]}, {""description"": ""can sort if second number is same as first"", ""property"": ""sortedData"", ""input"": {""treeData"": [""2"", ""2""]}, ""expected"": [""2"", ""2""]}, {""description"": ""can sort if second number is greater than first"", ""property"": ""sortedData"", ""input"": {""treeData"": [""2"", ""3""]}, ""expected"": [""2"", ""3""]}, {""description"": ""can sort complex tree"", ""property"": ""sortedData"", ""input"": {""treeData"": [""2"", ""1"", ""3"", ""6"", ""7"", ""5""]}, ""expected"": [""1"", ""2"", ""3"", ""5"", ""6"", ""7""]}]}]}","Insert and search for numbers in a binary tree.

When we need to represent sorted data, an array does not make a good
data structure.

Say we have the array `[1, 3, 4, 5]`, and we add 2 to it so it becomes
`[1, 3, 4, 5, 2]` now we must sort the entire array again! We can
improve on this by realizing that we only need to make space for the new
item `[1, nil, 3, 4, 5]`, and then adding the item in the space we
added. But this still requires us to shift many elements down by one.

Binary Search Trees, however, can operate on sorted data much more
efficiently.

A binary search tree consists of a series of connected nodes. Each node
contains a piece of data (e.g. the number 3), a variable named `left`,
and a variable named `right`. The `left` and `right` variables point at
`nil`, or other nodes. Since these other nodes in turn have other nodes
beneath them, we say that the left and right variables are pointing at
subtrees. All data in the left subtree is less than or equal to the
current node's data, and all data in the right subtree is greater than
the current node's data.

For example, if we had a node containing the data 4, and we added the
data 2, our tree would look like this:

      4
     /
    2

If we then added 6, it would look like this:

      4
     / \
    2   6

If we then added 3, it would look like this

       4
     /   \
    2     6
     \
      3

And if we then added 1, 5, and 7, it would look like this

          4
        /   \
       /     \
      2       6
     / \     / \
    1   3   5   7
"
binary-search,"{""exercise"": ""binary-search"", ""version"": ""1.1.0"", ""comments"": [""Here -1 is used to indicate that the value is not included in the array."", ""It should be replaced with the respective expression that is idiomatic"", ""for the language that implements the tests."", ""Following https://github.com/exercism/problem-specifications/issues/234 the exercise"", ""should NOT include checking whether the array is sorted as it defeats"", ""the point of the binary search."", ""The exercise should utilize an array-like (i.e. constant-time indexed)"", ""data structure and not a linked list. If something like an array is not"", ""usually used in the language the problem should not be implemented."", ""See https://github.com/exercism/problem-specifications/issues/244 for details.""], ""cases"": [{""description"": ""finds a value in an array with one element"", ""property"": ""find"", ""input"": {""array"": [6], ""value"": 6}, ""expected"": 0}, {""description"": ""finds a value in the middle of an array"", ""property"": ""find"", ""input"": {""array"": [1, 3, 4, 6, 8, 9, 11], ""value"": 6}, ""expected"": 3}, {""description"": ""finds a value at the beginning of an array"", ""property"": ""find"", ""input"": {""array"": [1, 3, 4, 6, 8, 9, 11], ""value"": 1}, ""expected"": 0}, {""description"": ""finds a value at the end of an array"", ""property"": ""find"", ""input"": {""array"": [1, 3, 4, 6, 8, 9, 11], ""value"": 11}, ""expected"": 6}, {""description"": ""finds a value in an array of odd length"", ""property"": ""find"", ""input"": {""array"": [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 634], ""value"": 144}, ""expected"": 9}, {""description"": ""finds a value in an array of even length"", ""property"": ""find"", ""input"": {""array"": [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], ""value"": 21}, ""expected"": 5}, {""description"": ""identifies that a value is not included in the array"", ""property"": ""find"", ""input"": {""array"": [1, 3, 4, 6, 8, 9, 11], ""value"": 7}, ""expected"": -1}, {""description"": ""a value smaller than the array's smallest value is not included"", ""property"": ""find"", ""input"": {""array"": [1, 3, 4, 6, 8, 9, 11], ""value"": 0}, ""expected"": -1}, {""description"": ""a value larger than the array's largest value is not included"", ""property"": ""find"", ""input"": {""array"": [1, 3, 4, 6, 8, 9, 11], ""value"": 13}, ""expected"": -1}, {""description"": ""nothing is included in an empty array"", ""property"": ""find"", ""input"": {""array"": [], ""value"": 1}, ""expected"": -1}]}","Implement a binary search algorithm.

Searching a sorted collection is a common task. A dictionary is a sorted
list of word definitions. Given a word, one can find its definition. A
telephone book is a sorted list of people's names, addresses, and
telephone numbers. Knowing someone's name allows one to quickly find
their telephone number and address.

If the list to be searched contains more than a few items (a dozen, say)
a binary search will require far fewer comparisons than a linear search,
but it imposes the requirement that the list be sorted.

In computer science, a binary search or half-interval search algorithm
finds the position of a specified input value (the search ""key"") within
an array sorted by key value.

In each step, the algorithm compares the search key value with the key
value of the middle element of the array.

If the keys match, then a matching element has been found and its index,
or position, is returned.

Otherwise, if the search key is less than the middle element's key, then
the algorithm repeats its action on the sub-array to the left of the
middle element or, if the search key is greater, on the sub-array to the
right.

If the remaining array to be searched is empty, then the key cannot be
found in the array and a special ""not found"" indication is returned.

A binary search halves the number of items to check with each iteration,
so locating an item (or determining its absence) takes logarithmic time.
A binary search is a dichotomic divide and conquer search algorithm.
"
binary,"{""exercise"": ""binary"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""binary 0 is decimal 0"", ""property"": ""decimal"", ""input"": {""binary"": ""0""}, ""expected"": 0}, {""description"": ""binary 1 is decimal 1"", ""property"": ""decimal"", ""input"": {""binary"": ""1""}, ""expected"": 1}, {""description"": ""binary 10 is decimal 2"", ""property"": ""decimal"", ""input"": {""binary"": ""10""}, ""expected"": 2}, {""description"": ""binary 11 is decimal 3"", ""property"": ""decimal"", ""input"": {""binary"": ""11""}, ""expected"": 3}, {""description"": ""binary 100 is decimal 4"", ""property"": ""decimal"", ""input"": {""binary"": ""100""}, ""expected"": 4}, {""description"": ""binary 1001 is decimal 9"", ""property"": ""decimal"", ""input"": {""binary"": ""1001""}, ""expected"": 9}, {""description"": ""binary 11010 is decimal 26"", ""property"": ""decimal"", ""input"": {""binary"": ""11010""}, ""expected"": 26}, {""description"": ""binary 10001101000 is decimal 1128"", ""property"": ""decimal"", ""input"": {""binary"": ""10001101000""}, ""expected"": 1128}, {""description"": ""binary ignores leading zeros"", ""property"": ""decimal"", ""input"": {""binary"": ""000011111""}, ""expected"": 31}, {""description"": ""2 is not a valid binary digit"", ""property"": ""decimal"", ""input"": {""binary"": ""2""}, ""expected"": null}, {""description"": ""a number containing a non-binary digit is invalid"", ""property"": ""decimal"", ""input"": {""binary"": ""01201""}, ""expected"": null}, {""description"": ""a number with trailing non-binary characters is invalid"", ""property"": ""decimal"", ""input"": {""binary"": ""10nope""}, ""expected"": null}, {""description"": ""a number with leading non-binary characters is invalid"", ""property"": ""decimal"", ""input"": {""binary"": ""nope10""}, ""expected"": null}, {""description"": ""a number with internal non-binary characters is invalid"", ""property"": ""decimal"", ""input"": {""binary"": ""10nope10""}, ""expected"": null}, {""description"": ""a number and a word whitespace separated is invalid"", ""property"": ""decimal"", ""input"": {""binary"": ""001 nope""}, ""expected"": null}]}","Convert a binary number, represented as a string (e.g. '101010'), to its decimal equivalent using first principles.

Implement binary to decimal conversion. Given a binary input
string, your program should produce a decimal output. The
program should handle invalid inputs.

## Note

- Implement the conversion yourself.
  Do not use something else to perform the conversion for you.

## About Binary (Base-2)

Decimal is a base-10 system.

A number 23 in base 10 notation can be understood
as a linear combination of powers of 10:

- The rightmost digit gets multiplied by 10^0 = 1
- The next number gets multiplied by 10^1 = 10
- ...
- The *n*th number gets multiplied by 10^*(n-1)*.
- All these values are summed.

So: `23 => 2*10^1 + 3*10^0 => 2*10 + 3*1 = 23 base 10`

Binary is similar, but uses powers of 2 rather than powers of 10.

So: `101 => 1*2^2 + 0*2^1 + 1*2^0 => 1*4 + 0*2 + 1*1 => 4 + 1 => 5 base 10`.
"
bob,"{""exercise"": ""bob"", ""version"": ""1.4.0"", ""cases"": [{""description"": ""stating something"", ""property"": ""response"", ""input"": {""heyBob"": ""Tom-ay-to, tom-aaaah-to.""}, ""expected"": ""Whatever.""}, {""description"": ""shouting"", ""property"": ""response"", ""input"": {""heyBob"": ""WATCH OUT!""}, ""expected"": ""Whoa, chill out!""}, {""description"": ""shouting gibberish"", ""property"": ""response"", ""input"": {""heyBob"": ""FCECDFCAAB""}, ""expected"": ""Whoa, chill out!""}, {""description"": ""asking a question"", ""property"": ""response"", ""input"": {""heyBob"": ""Does this cryogenic chamber make me look fat?""}, ""expected"": ""Sure.""}, {""description"": ""asking a numeric question"", ""property"": ""response"", ""input"": {""heyBob"": ""You are, what, like 15?""}, ""expected"": ""Sure.""}, {""description"": ""asking gibberish"", ""property"": ""response"", ""input"": {""heyBob"": ""fffbbcbeab?""}, ""expected"": ""Sure.""}, {""description"": ""talking forcefully"", ""property"": ""response"", ""input"": {""heyBob"": ""Let's go make out behind the gym!""}, ""expected"": ""Whatever.""}, {""description"": ""using acronyms in regular speech"", ""property"": ""response"", ""input"": {""heyBob"": ""It's OK if you don't want to go to the DMV.""}, ""expected"": ""Whatever.""}, {""description"": ""forceful question"", ""property"": ""response"", ""input"": {""heyBob"": ""WHAT THE HELL WERE YOU THINKING?""}, ""expected"": ""Calm down, I know what I'm doing!""}, {""description"": ""shouting numbers"", ""property"": ""response"", ""input"": {""heyBob"": ""1, 2, 3 GO!""}, ""expected"": ""Whoa, chill out!""}, {""description"": ""no letters"", ""property"": ""response"", ""input"": {""heyBob"": ""1, 2, 3""}, ""expected"": ""Whatever.""}, {""description"": ""question with no letters"", ""property"": ""response"", ""input"": {""heyBob"": ""4?""}, ""expected"": ""Sure.""}, {""description"": ""shouting with special characters"", ""property"": ""response"", ""input"": {""heyBob"": ""ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!""}, ""expected"": ""Whoa, chill out!""}, {""description"": ""shouting with no exclamation mark"", ""property"": ""response"", ""input"": {""heyBob"": ""I HATE THE DMV""}, ""expected"": ""Whoa, chill out!""}, {""description"": ""statement containing question mark"", ""property"": ""response"", ""input"": {""heyBob"": ""Ending with ? means a question.""}, ""expected"": ""Whatever.""}, {""description"": ""non-letters with question"", ""property"": ""response"", ""input"": {""heyBob"": "":) ?""}, ""expected"": ""Sure.""}, {""description"": ""prattling on"", ""property"": ""response"", ""input"": {""heyBob"": ""Wait! Hang on. Are you going to be OK?""}, ""expected"": ""Sure.""}, {""description"": ""silence"", ""property"": ""response"", ""input"": {""heyBob"": """"}, ""expected"": ""Fine. Be that way!""}, {""description"": ""prolonged silence"", ""property"": ""response"", ""input"": {""heyBob"": ""          ""}, ""expected"": ""Fine. Be that way!""}, {""description"": ""alternate silence"", ""property"": ""response"", ""input"": {""heyBob"": ""\t\t\t\t\t\t\t\t\t\t""}, ""expected"": ""Fine. Be that way!""}, {""description"": ""multiple line question"", ""property"": ""response"", ""input"": {""heyBob"": ""\nDoes this cryogenic chamber make me look fat?\nNo.""}, ""expected"": ""Whatever.""}, {""description"": ""starting with whitespace"", ""property"": ""response"", ""input"": {""heyBob"": ""         hmmmmmmm...""}, ""expected"": ""Whatever.""}, {""description"": ""ending with whitespace"", ""property"": ""response"", ""input"": {""heyBob"": ""Okay if like my  spacebar  quite a bit?   ""}, ""expected"": ""Sure.""}, {""description"": ""other whitespace"", ""property"": ""response"", ""input"": {""heyBob"": ""\n\r \t""}, ""expected"": ""Fine. Be that way!""}, {""description"": ""non-question ending with whitespace"", ""property"": ""response"", ""input"": {""heyBob"": ""This is a statement ending with whitespace      ""}, ""expected"": ""Whatever.""}]}","Bob is a lackadaisical teenager. In conversation, his responses are very limited.

Bob answers 'Sure.' if you ask him a question.

He answers 'Whoa, chill out!' if you yell at him.

He answers 'Calm down, I know what I'm doing!' if you yell a question at him.

He says 'Fine. Be that way!' if you address him without actually saying
anything.

He answers 'Whatever.' to anything else.

Bob's conversational partner is a purist when it comes to written communication and always follows normal rules regarding sentence punctuation in English.
"
book-store,"{""exercise"": ""book-store"", ""version"": ""1.4.0"", ""cases"": [{""description"": ""Return the total basket price after applying the best discount."", ""comments"": [""Calculate lowest price for a shopping basket containing books only from "", ""a single series.  There is no discount advantage for having more than "", ""one copy of any single book in a grouping."", ""implementors should use proper fixed-point or currency data types of the "", ""corresponding language and not float."", ""All 'expected' amounts are in cents.""], ""cases"": [{""property"": ""total"", ""description"": ""Only a single book"", ""comments"": [""Suggested grouping, [[1]].""], ""input"": {""basket"": [1]}, ""expected"": 800}, {""property"": ""total"", ""description"": ""Two of the same book"", ""comments"": [""Suggested grouping, [[2],[2]].""], ""input"": {""basket"": [2, 2]}, ""expected"": 1600}, {""property"": ""total"", ""description"": ""Empty basket"", ""comments"": [""Suggested grouping, [].""], ""input"": {""basket"": []}, ""expected"": 0}, {""property"": ""total"", ""description"": ""Two different books"", ""comments"": [""Suggested grouping, [[1,2]].""], ""input"": {""basket"": [1, 2]}, ""expected"": 1520}, {""property"": ""total"", ""description"": ""Three different books"", ""comments"": [""Suggested grouping, [[1,2,3]].""], ""input"": {""basket"": [1, 2, 3]}, ""expected"": 2160}, {""property"": ""total"", ""description"": ""Four different books"", ""comments"": [""Suggested grouping, [[1,2,3,4]].""], ""input"": {""basket"": [1, 2, 3, 4]}, ""expected"": 2560}, {""property"": ""total"", ""description"": ""Five different books"", ""comments"": [""Suggested grouping, [[1,2,3,4,5]].""], ""input"": {""basket"": [1, 2, 3, 4, 5]}, ""expected"": 3000}, {""property"": ""total"", ""description"": ""Two groups of four is cheaper than group of five plus group of three"", ""comments"": [""Suggested grouping, [[1,2,3,4],[1,2,3,5]].""], ""input"": {""basket"": [1, 1, 2, 2, 3, 3, 4, 5]}, ""expected"": 5120}, {""property"": ""total"", ""description"": ""Two groups of four is cheaper than groups of five and three"", ""comments"": [""Suggested grouping, [[1,2,4,5],[1,3,4,5]]. This differs from the other 'two groups of four' test in that it will fail for solutions that add books to groups in the order in which they appear in the list.""], ""input"": {""basket"": [1, 1, 2, 3, 4, 4, 5, 5]}, ""expected"": 5120}, {""property"": ""total"", ""description"": ""Group of four plus group of two is cheaper than two groups of three"", ""comments"": [""Suggested grouping, [[1,2,3,4],[1,2]].""], ""input"": {""basket"": [1, 1, 2, 2, 3, 4]}, ""expected"": 4080}, {""property"": ""total"", ""description"": ""Two each of first 4 books and 1 copy each of rest"", ""comments"": [""Suggested grouping, [[1,2,3,4,5],[1,2,3,4]].""], ""input"": {""basket"": [1, 1, 2, 2, 3, 3, 4, 4, 5]}, ""expected"": 5560}, {""property"": ""total"", ""description"": ""Two copies of each book"", ""comments"": [""Suggested grouping, [[1,2,3,4,5],[1,2,3,4,5]].""], ""input"": {""basket"": [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]}, ""expected"": 6000}, {""property"": ""total"", ""description"": ""Three copies of first book and 2 each of remaining"", ""comments"": [""Suggested grouping, [[1,2,3,4,5],[1,2,3,4,5],[1]].""], ""input"": {""basket"": [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 1]}, ""expected"": 6800}, {""property"": ""total"", ""description"": ""Three each of first 2 books and 2 each of remaining books"", ""comments"": [""Suggested grouping, [[1,2,3,4,5],[1,2,3,4,5],[1,2]].""], ""input"": {""basket"": [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 1, 2]}, ""expected"": 7520}, {""property"": ""total"", ""description"": ""Four groups of four are cheaper than two groups each of five and three"", ""comments"": [""Suggested grouping, [[1,2,3,4],[1,2,3,5],[1,2,3,4],[1,2,3,5]].""], ""input"": {""basket"": [1, 1, 2, 2, 3, 3, 4, 5, 1, 1, 2, 2, 3, 3, 4, 5]}, ""expected"": 10240}]}]}","To try and encourage more sales of different books from a popular 5 book
series, a bookshop has decided to offer discounts on multiple book purchases.

One copy of any of the five books costs $8.

If, however, you buy two different books, you get a 5%
discount on those two books.

If you buy 3 different books, you get a 10% discount.

If you buy 4 different books, you get a 20% discount.

If you buy all 5, you get a 25% discount.

Note: that if you buy four books, of which 3 are
different titles, you get a 10% discount on the 3 that
form part of a set, but the fourth book still costs $8.

Your mission is to write a piece of code to calculate the
price of any conceivable shopping basket (containing only
books of the same series), giving as big a discount as
possible.

For example, how much does this basket of books cost?

- 2 copies of the first book
- 2 copies of the second book
- 2 copies of the third book
- 1 copy of the fourth book
- 1 copy of the fifth book

One way of grouping these 8 books is:

- 1 group of 5 --> 25% discount (1st,2nd,3rd,4th,5th)
- +1 group of 3 --> 10% discount (1st,2nd,3rd)

This would give a total of:

- 5 books at a 25% discount
- +3 books at a 10% discount

Resulting in:

- 5 x (8 - 2.00) == 5 x 6.00 == $30.00
- +3 x (8 - 0.80) == 3 x 7.20 == $21.60

For a total of $51.60

However, a different way to group these 8 books is:

- 1 group of 4 books --> 20% discount  (1st,2nd,3rd,4th)
- +1 group of 4 books --> 20% discount  (1st,2nd,3rd,5th)

This would give a total of:

- 4 books at a 20% discount
- +4 books at a 20% discount

Resulting in:

- 4 x (8 - 1.60) == 4 x 6.40 == $25.60
- +4 x (8 - 1.60) == 4 x 6.40 == $25.60

For a total of $51.20

And $51.20 is the price with the biggest discount.
"
bowling,"{""exercise"": ""bowling"", ""version"": ""1.2.0"", ""comments"": [""Students should implement roll and score methods."", ""Roll should accept a single integer."", ""Score should return the game's final score, when possible"", ""For brevity the tests display all the previous rolls in an array;"", ""each element of the previousRolls array should be passed to the roll method"", ""and each of those previous rolls is expected to succeed."", """", ""Two properties are tested:"", """", ""`score`: All rolls succeed, and taking the score gives the expected result."", ""The expected result may be an integer score or an error."", """", ""`roll`: All previousRolls succeed, and rolling the number of pins in `roll` produces the expected result."", ""Currently, all cases of this type result in errors."", """", ""In all error cases you should expect an error as is idiomatic for your language"", ""whether that be via exceptions, optional values, or otherwise.""], ""cases"": [{""description"": ""should be able to score a game with all zeros"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, ""expected"": 0}, {""description"": ""should be able to score a game with no strikes or spares"", ""property"": ""score"", ""input"": {""previousRolls"": [3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6]}, ""expected"": 90}, {""description"": ""a spare followed by zeros is worth ten points"", ""property"": ""score"", ""input"": {""previousRolls"": [6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, ""expected"": 10}, {""description"": ""points scored in the roll after a spare are counted twice"", ""property"": ""score"", ""input"": {""previousRolls"": [6, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, ""expected"": 16}, {""description"": ""consecutive spares each get a one roll bonus"", ""property"": ""score"", ""input"": {""previousRolls"": [5, 5, 3, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, ""expected"": 31}, {""description"": ""a spare in the last frame gets a one roll bonus that is counted once"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 7]}, ""expected"": 17}, {""description"": ""a strike earns ten points in a frame with a single roll"", ""property"": ""score"", ""input"": {""previousRolls"": [10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, ""expected"": 10}, {""description"": ""points scored in the two rolls after a strike are counted twice as a bonus"", ""property"": ""score"", ""input"": {""previousRolls"": [10, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, ""expected"": 26}, {""description"": ""consecutive strikes each get the two roll bonus"", ""property"": ""score"", ""input"": {""previousRolls"": [10, 10, 10, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, ""expected"": 81}, {""description"": ""a strike in the last frame gets a two roll bonus that is counted once"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 7, 1]}, ""expected"": 18}, {""description"": ""rolling a spare with the two roll bonus does not get a bonus roll"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 7, 3]}, ""expected"": 20}, {""description"": ""strikes with the two roll bonus do not get bonus rolls"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10]}, ""expected"": 30}, {""description"": ""a strike with the one roll bonus after a spare in the last frame does not get a bonus"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 10]}, ""expected"": 20}, {""description"": ""all strikes is a perfect game"", ""property"": ""score"", ""input"": {""previousRolls"": [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]}, ""expected"": 300}, {""description"": ""rolls cannot score negative points"", ""property"": ""roll"", ""input"": {""previousRolls"": [], ""roll"": -1}, ""expected"": {""error"": ""Negative roll is invalid""}}, {""description"": ""a roll cannot score more than 10 points"", ""property"": ""roll"", ""input"": {""previousRolls"": [], ""roll"": 11}, ""expected"": {""error"": ""Pin count exceeds pins on the lane""}}, {""description"": ""two rolls in a frame cannot score more than 10 points"", ""property"": ""roll"", ""input"": {""previousRolls"": [5], ""roll"": 6}, ""expected"": {""error"": ""Pin count exceeds pins on the lane""}}, {""description"": ""bonus roll after a strike in the last frame cannot score more than 10 points"", ""property"": ""roll"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10], ""roll"": 11}, ""expected"": {""error"": ""Pin count exceeds pins on the lane""}}, {""description"": ""two bonus rolls after a strike in the last frame cannot score more than 10 points"", ""property"": ""roll"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 5], ""roll"": 6}, ""expected"": {""error"": ""Pin count exceeds pins on the lane""}}, {""description"": ""two bonus rolls after a strike in the last frame can score more than 10 points if one is a strike"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 6]}, ""expected"": 26}, {""description"": ""the second bonus rolls after a strike in the last frame cannot be a strike if the first one is not a strike"", ""property"": ""roll"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 6], ""roll"": 10}, ""expected"": {""error"": ""Pin count exceeds pins on the lane""}}, {""description"": ""second bonus roll after a strike in the last frame cannot score more than 10 points"", ""property"": ""roll"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10], ""roll"": 11}, ""expected"": {""error"": ""Pin count exceeds pins on the lane""}}, {""description"": ""an unstarted game cannot be scored"", ""property"": ""score"", ""input"": {""previousRolls"": []}, ""expected"": {""error"": ""Score cannot be taken until the end of the game""}}, {""description"": ""an incomplete game cannot be scored"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0]}, ""expected"": {""error"": ""Score cannot be taken until the end of the game""}}, {""description"": ""cannot roll if game already has ten frames"", ""property"": ""roll"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""roll"": 0}, ""expected"": {""error"": ""Cannot roll after game is over""}}, {""description"": ""bonus rolls for a strike in the last frame must be rolled before score can be calculated"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10]}, ""expected"": {""error"": ""Score cannot be taken until the end of the game""}}, {""description"": ""both bonus rolls for a strike in the last frame must be rolled before score can be calculated"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10]}, ""expected"": {""error"": ""Score cannot be taken until the end of the game""}}, {""description"": ""bonus roll for a spare in the last frame must be rolled before score can be calculated"", ""property"": ""score"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3]}, ""expected"": {""error"": ""Score cannot be taken until the end of the game""}}, {""description"": ""cannot roll after bonus roll for spare"", ""property"": ""roll"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 2], ""roll"": 2}, ""expected"": {""error"": ""Cannot roll after game is over""}}, {""description"": ""cannot roll after bonus rolls for strike"", ""property"": ""roll"", ""input"": {""previousRolls"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 3, 2], ""roll"": 2}, ""expected"": {""error"": ""Cannot roll after game is over""}}]}","Score a bowling game.

Bowling is a game where players roll a heavy ball to knock down pins
arranged in a triangle. Write code to keep track of the score
of a game of bowling.

## Scoring Bowling

The game consists of 10 frames. A frame is composed of one or two ball
throws with 10 pins standing at frame initialization. There are three
cases for the tabulation of a frame.

* An open frame is where a score of less than 10 is recorded for the
  frame. In this case the score for the frame is the number of pins
  knocked down.

* A spare is where all ten pins are knocked down by the second
  throw. The total value of a spare is 10 plus the number of pins
  knocked down in their next throw.

* A strike is where all ten pins are knocked down by the first
  throw. The total value of a strike is 10 plus the number of pins
  knocked down in the next two throws. If a strike is immediately
  followed by a second strike, then the value of the first strike
  cannot be determined until the ball is thrown one more time.

Here is a three frame example:

| Frame 1         | Frame 2       | Frame 3                |
| :-------------: |:-------------:| :---------------------:|
| X (strike)      | 5/ (spare)    | 9 0 (open frame)       |

Frame 1 is (10 + 5 + 5) = 20

Frame 2 is (5 + 5 + 9) = 19

Frame 3 is (9 + 0) = 9

This means the current running total is 48.

The tenth frame in the game is a special case. If someone throws a
strike or a spare then they get a fill ball. Fill balls exist to
calculate the total of the 10th frame. Scoring a strike or spare on
the fill ball does not give the player more fill balls. The total
value of the 10th frame is the total number of pins knocked down.

For a tenth frame of X1/ (strike and a spare), the total value is 20.

For a tenth frame of XXX (three strikes), the total value is 30.

## Requirements

Write code to keep track of the score of a game of bowling. It should
support two operations:

* `roll(pins : int)` is called each time the player rolls a ball.  The
  argument is the number of pins knocked down.
* `score() : int` is called only at the very end of the game.  It
  returns the total score for that game.
"
bracket-push,"{""exercise"": ""bracket-push"", ""version"": ""1.4.0"", ""cases"": [{""description"": ""paired square brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""[]""}, ""expected"": true}, {""description"": ""empty string"", ""property"": ""isPaired"", ""input"": {""value"": """"}, ""expected"": true}, {""description"": ""unpaired brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""[[""}, ""expected"": false}, {""description"": ""wrong ordered brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""}{""}, ""expected"": false}, {""description"": ""wrong closing bracket"", ""property"": ""isPaired"", ""input"": {""value"": ""{]""}, ""expected"": false}, {""description"": ""paired with whitespace"", ""property"": ""isPaired"", ""input"": {""value"": ""{ }""}, ""expected"": true}, {""description"": ""partially paired brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""{[])""}, ""expected"": false}, {""description"": ""simple nested brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""{[]}""}, ""expected"": true}, {""description"": ""several paired brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""{}[]""}, ""expected"": true}, {""description"": ""paired and nested brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""([{}({}[])])""}, ""expected"": true}, {""description"": ""unopened closing brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""{[)][]}""}, ""expected"": false}, {""description"": ""unpaired and nested brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""([{])""}, ""expected"": false}, {""description"": ""paired and wrong nested brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""[({]})""}, ""expected"": false}, {""description"": ""paired and incomplete brackets"", ""property"": ""isPaired"", ""input"": {""value"": ""{}[""}, ""expected"": false}, {""description"": ""math expression"", ""property"": ""isPaired"", ""input"": {""value"": ""(((185 + 223.85) * 15) - 543)/2""}, ""expected"": true}, {""description"": ""complex latex expression"", ""property"": ""isPaired"", ""input"": {""value"": ""\\left(\\begin{array}{cc} \\frac{1}{3} & x\\\\ \\mathrm{e}^{x} &... x^2 \\end{array}\\right)""}, ""expected"": true}]}","Given a string containing brackets `[]`, braces `{}`, parentheses `()`,
or any combination thereof, verify that any and all pairs are matched
and nested correctly.
"
change,"{""exercise"": ""change"", ""version"": ""1.2.0"", ""comments"": [""Given an infinite supply of coins with different values, "", ""find the smallest number of coins needed to make a desired "", ""amount of change.""], ""cases"": [{""description"": ""single coin change"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [1, 5, 10, 25, 100], ""target"": 25}, ""expected"": [25]}, {""description"": ""multiple coin change"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [1, 5, 10, 25, 100], ""target"": 15}, ""expected"": [5, 10]}, {""description"": ""change with Lilliputian Coins"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [1, 4, 15, 20, 50], ""target"": 23}, ""expected"": [4, 4, 15]}, {""description"": ""change with Lower Elbonia Coins"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [1, 5, 10, 21, 25], ""target"": 63}, ""expected"": [21, 21, 21]}, {""description"": ""large target values"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [1, 2, 5, 10, 20, 50, 100], ""target"": 999}, ""expected"": [2, 2, 5, 20, 20, 50, 100, 100, 100, 100, 100, 100, 100, 100, 100]}, {""description"": ""possible change without unit coins available"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [2, 5, 10, 20, 50], ""target"": 21}, ""expected"": [2, 2, 2, 5, 10]}, {""description"": ""another possible change without unit coins available"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [4, 5], ""target"": 27}, ""expected"": [4, 4, 4, 5, 5, 5]}, {""description"": ""no coins make 0 change"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [1, 5, 10, 21, 25], ""target"": 0}, ""expected"": []}, {""description"": ""error testing for change smaller than the smallest of coins"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [5, 10], ""target"": 3}, ""expected"": -1}, {""description"": ""error if no combination can add up to target"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [5, 10], ""target"": 94}, ""expected"": -1}, {""description"": ""cannot find negative change values"", ""property"": ""findFewestCoins"", ""input"": {""coins"": [1, 2, 5], ""target"": -5}, ""expected"": -1}]}","Correctly determine the fewest number of coins to be given to a customer such
that the sum of the coins' value would equal the correct amount of change.

## For example

- An input of 15 with [1, 5, 10, 25, 100] should return one nickel (5)
  and one dime (10) or [0, 1, 1, 0, 0]
- An input of 40 with [1, 5, 10, 25, 100] should return one nickel (5)
  and one dime (10) and one quarter (25) or [0, 1, 1, 1, 0]

## Edge cases

- Does your algorithm work for any given set of coins?
- Can you ask for negative change?
- Can you ask for a change value smaller than the smallest coin value?
"
circular-buffer,"{""exercise"": ""circular-buffer"", ""version"": ""1.1.0"", ""comments"": [""In general, these circular buffers are expected to be stateful,"", ""and each language will operate on them differently."", ""Tests tend to perform a series of operations, some of which expect a certain result."", ""As such, this common test suite can only say in abstract terms what should be done."", """", ""Tests will contain a number of operations. The operation will be specified in the `operation` key."", ""Based on the operation, other keys may be present."", ""read: Reading from the buffer should succeed if and only if `should_succeed` is true."", ""  If it should succeed, it should produce the item at `expected`. "", ""  If it should fail, `expected` will not be present. "", ""write: Writing the item located at `item` should succeed if and only if `should_succeed` is true."", ""overwrite: Write the item located at `item` into the buffer, replacing the oldest item if necessary."", ""clear: Clear the buffer."", """", ""Failure of either `read` or `write` may be indicated in a manner appropriate for your language:"", ""Raising an exception, returning (int, error), returning Option<int>, etc."", """", ""Finally, note that all values are integers."", ""If your language contains generics, you may consider allowing buffers to contain other types."", ""Tests for that are not included here."", """"], ""cases"": [{""description"": ""reading empty buffer should fail"", ""property"": ""run"", ""input"": {""capacity"": 1, ""operations"": [{""operation"": ""read"", ""should_succeed"": false}]}, ""expected"": {}}, {""description"": ""can read an item just written"", ""property"": ""run"", ""input"": {""capacity"": 1, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 1}]}, ""expected"": {}}, {""description"": ""each item may only be read once"", ""property"": ""run"", ""input"": {""capacity"": 1, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 1}, {""operation"": ""read"", ""should_succeed"": false}]}, ""expected"": {}}, {""description"": ""items are read in the order they are written"", ""property"": ""run"", ""input"": {""capacity"": 2, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""write"", ""item"": 2, ""should_succeed"": true}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 1}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 2}]}, ""expected"": {}}, {""description"": ""full buffer can't be written to"", ""property"": ""run"", ""input"": {""capacity"": 1, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""write"", ""item"": 2, ""should_succeed"": false}]}, ""expected"": {}}, {""description"": ""a read frees up capacity for another write"", ""property"": ""run"", ""input"": {""capacity"": 1, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 1}, {""operation"": ""write"", ""item"": 2, ""should_succeed"": true}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 2}]}, ""expected"": {}}, {""description"": ""read position is maintained even across multiple writes"", ""property"": ""run"", ""input"": {""capacity"": 3, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""write"", ""item"": 2, ""should_succeed"": true}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 1}, {""operation"": ""write"", ""item"": 3, ""should_succeed"": true}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 2}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 3}]}, ""expected"": {}}, {""description"": ""items cleared out of buffer can't be read"", ""property"": ""run"", ""input"": {""capacity"": 1, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""clear""}, {""operation"": ""read"", ""should_succeed"": false}]}, ""expected"": {}}, {""description"": ""clear frees up capacity for another write"", ""property"": ""run"", ""input"": {""capacity"": 1, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""clear""}, {""operation"": ""write"", ""item"": 2, ""should_succeed"": true}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 2}]}, ""expected"": {}}, {""description"": ""clear does nothing on empty buffer"", ""property"": ""run"", ""input"": {""capacity"": 1, ""operations"": [{""operation"": ""clear""}, {""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 1}]}, ""expected"": {}}, {""description"": ""overwrite acts like write on non-full buffer"", ""property"": ""run"", ""input"": {""capacity"": 2, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""overwrite"", ""item"": 2}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 1}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 2}]}, ""expected"": {}}, {""description"": ""overwrite replaces the oldest item on full buffer"", ""property"": ""run"", ""input"": {""capacity"": 2, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""write"", ""item"": 2, ""should_succeed"": true}, {""operation"": ""overwrite"", ""item"": 3}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 2}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 3}]}, ""expected"": {}}, {""description"": ""overwrite replaces the oldest item remaining in buffer following a read"", ""property"": ""run"", ""input"": {""capacity"": 3, ""operations"": [{""operation"": ""write"", ""item"": 1, ""should_succeed"": true}, {""operation"": ""write"", ""item"": 2, ""should_succeed"": true}, {""operation"": ""write"", ""item"": 3, ""should_succeed"": true}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 1}, {""operation"": ""write"", ""item"": 4, ""should_succeed"": true}, {""operation"": ""overwrite"", ""item"": 5}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 3}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 4}, {""operation"": ""read"", ""should_succeed"": true, ""expected"": 5}]}, ""expected"": {}}]}","A circular buffer, cyclic buffer or ring buffer is a data structure that
uses a single, fixed-size buffer as if it were connected end-to-end.

A circular buffer first starts empty and of some predefined length. For
example, this is a 7-element buffer:

    [ ][ ][ ][ ][ ][ ][ ]

Assume that a 1 is written into the middle of the buffer (exact starting
location does not matter in a circular buffer):

    [ ][ ][ ][1][ ][ ][ ]

Then assume that two more elements are added — 2 & 3 — which get
appended after the 1:

    [ ][ ][ ][1][2][3][ ]

If two elements are then removed from the buffer, the oldest values
inside the buffer are removed. The two elements removed, in this case,
are 1 & 2, leaving the buffer with just a 3:

    [ ][ ][ ][ ][ ][3][ ]

If the buffer has 7 elements then it is completely full:

    [6][7][8][9][3][4][5]

When the buffer is full an error will be raised, alerting the client
that further writes are blocked until a slot becomes free.

When the buffer is full, the client can opt to overwrite the oldest
data with a forced write. In this case, two more elements — A & B —
are added and they overwrite the 3 & 4:

    [6][7][8][9][A][B][5]

3 & 4 have been replaced by A & B making 5 now the oldest data in the
buffer. Finally, if two elements are removed then what would be
returned is 5 & 6 yielding the buffer:

    [ ][7][8][9][A][B][ ]

Because there is space available, if the client again uses overwrite
to store C & D then the space where 5 & 6 were stored previously will
be used not the location of 7 & 8. 7 is still the oldest element and
the buffer is once again full.

    [D][7][8][9][A][B][C]
"
clock,"{""exercise"": ""clock"", ""version"": ""2.3.0"", ""comments"": [""Most languages require constructing a clock with initial values,"", ""adding or subtracting some number of minutes, and testing equality"", ""in some language-native way.  Negative and out of range values are"", ""generally expected to wrap around rather than represent errors.""], ""cases"": [{""description"": ""Create a new clock with an initial time"", ""cases"": [{""description"": ""on the hour"", ""property"": ""create"", ""input"": {""hour"": 8, ""minute"": 0}, ""expected"": ""08:00""}, {""description"": ""past the hour"", ""property"": ""create"", ""input"": {""hour"": 11, ""minute"": 9}, ""expected"": ""11:09""}, {""description"": ""midnight is zero hours"", ""property"": ""create"", ""input"": {""hour"": 24, ""minute"": 0}, ""expected"": ""00:00""}, {""description"": ""hour rolls over"", ""property"": ""create"", ""input"": {""hour"": 25, ""minute"": 0}, ""expected"": ""01:00""}, {""description"": ""hour rolls over continuously"", ""property"": ""create"", ""input"": {""hour"": 100, ""minute"": 0}, ""expected"": ""04:00""}, {""description"": ""sixty minutes is next hour"", ""property"": ""create"", ""input"": {""hour"": 1, ""minute"": 60}, ""expected"": ""02:00""}, {""description"": ""minutes roll over"", ""property"": ""create"", ""input"": {""hour"": 0, ""minute"": 160}, ""expected"": ""02:40""}, {""description"": ""minutes roll over continuously"", ""property"": ""create"", ""input"": {""hour"": 0, ""minute"": 1723}, ""expected"": ""04:43""}, {""description"": ""hour and minutes roll over"", ""property"": ""create"", ""input"": {""hour"": 25, ""minute"": 160}, ""expected"": ""03:40""}, {""description"": ""hour and minutes roll over continuously"", ""property"": ""create"", ""input"": {""hour"": 201, ""minute"": 3001}, ""expected"": ""11:01""}, {""description"": ""hour and minutes roll over to exactly midnight"", ""property"": ""create"", ""input"": {""hour"": 72, ""minute"": 8640}, ""expected"": ""00:00""}, {""description"": ""negative hour"", ""property"": ""create"", ""input"": {""hour"": -1, ""minute"": 15}, ""expected"": ""23:15""}, {""description"": ""negative hour rolls over"", ""property"": ""create"", ""input"": {""hour"": -25, ""minute"": 0}, ""expected"": ""23:00""}, {""description"": ""negative hour rolls over continuously"", ""property"": ""create"", ""input"": {""hour"": -91, ""minute"": 0}, ""expected"": ""05:00""}, {""description"": ""negative minutes"", ""property"": ""create"", ""input"": {""hour"": 1, ""minute"": -40}, ""expected"": ""00:20""}, {""description"": ""negative minutes roll over"", ""property"": ""create"", ""input"": {""hour"": 1, ""minute"": -160}, ""expected"": ""22:20""}, {""description"": ""negative minutes roll over continuously"", ""property"": ""create"", ""input"": {""hour"": 1, ""minute"": -4820}, ""expected"": ""16:40""}, {""description"": ""negative hour and minutes both roll over"", ""property"": ""create"", ""input"": {""hour"": -25, ""minute"": -160}, ""expected"": ""20:20""}, {""description"": ""negative hour and minutes both roll over continuously"", ""property"": ""create"", ""input"": {""hour"": -121, ""minute"": -5810}, ""expected"": ""22:10""}]}, {""description"": ""Add minutes"", ""cases"": [{""description"": ""add minutes"", ""property"": ""add"", ""input"": {""hour"": 10, ""minute"": 0, ""value"": 3}, ""expected"": ""10:03""}, {""description"": ""add no minutes"", ""property"": ""add"", ""input"": {""hour"": 6, ""minute"": 41, ""value"": 0}, ""expected"": ""06:41""}, {""description"": ""add to next hour"", ""property"": ""add"", ""input"": {""hour"": 0, ""minute"": 45, ""value"": 40}, ""expected"": ""01:25""}, {""description"": ""add more than one hour"", ""property"": ""add"", ""input"": {""hour"": 10, ""minute"": 0, ""value"": 61}, ""expected"": ""11:01""}, {""description"": ""add more than two hours with carry"", ""property"": ""add"", ""input"": {""hour"": 0, ""minute"": 45, ""value"": 160}, ""expected"": ""03:25""}, {""description"": ""add across midnight"", ""property"": ""add"", ""input"": {""hour"": 23, ""minute"": 59, ""value"": 2}, ""expected"": ""00:01""}, {""description"": ""add more than one day (1500 min = 25 hrs)"", ""property"": ""add"", ""input"": {""hour"": 5, ""minute"": 32, ""value"": 1500}, ""expected"": ""06:32""}, {""description"": ""add more than two days"", ""property"": ""add"", ""input"": {""hour"": 1, ""minute"": 1, ""value"": 3500}, ""expected"": ""11:21""}]}, {""description"": ""Subtract minutes"", ""cases"": [{""description"": ""subtract minutes"", ""property"": ""subtract"", ""input"": {""hour"": 10, ""minute"": 3, ""value"": 3}, ""expected"": ""10:00""}, {""description"": ""subtract to previous hour"", ""property"": ""subtract"", ""input"": {""hour"": 10, ""minute"": 3, ""value"": 30}, ""expected"": ""09:33""}, {""description"": ""subtract more than an hour"", ""property"": ""subtract"", ""input"": {""hour"": 10, ""minute"": 3, ""value"": 70}, ""expected"": ""08:53""}, {""description"": ""subtract across midnight"", ""property"": ""subtract"", ""input"": {""hour"": 0, ""minute"": 3, ""value"": 4}, ""expected"": ""23:59""}, {""description"": ""subtract more than two hours"", ""property"": ""subtract"", ""input"": {""hour"": 0, ""minute"": 0, ""value"": 160}, ""expected"": ""21:20""}, {""description"": ""subtract more than two hours with borrow"", ""property"": ""subtract"", ""input"": {""hour"": 6, ""minute"": 15, ""value"": 160}, ""expected"": ""03:35""}, {""description"": ""subtract more than one day (1500 min = 25 hrs)"", ""property"": ""subtract"", ""input"": {""hour"": 5, ""minute"": 32, ""value"": 1500}, ""expected"": ""04:32""}, {""description"": ""subtract more than two days"", ""property"": ""subtract"", ""input"": {""hour"": 2, ""minute"": 20, ""value"": 3000}, ""expected"": ""00:20""}]}, {""description"": ""Compare two clocks for equality"", ""cases"": [{""description"": ""clocks with same time"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 15, ""minute"": 37}, ""clock2"": {""hour"": 15, ""minute"": 37}}, ""expected"": true}, {""description"": ""clocks a minute apart"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 15, ""minute"": 36}, ""clock2"": {""hour"": 15, ""minute"": 37}}, ""expected"": false}, {""description"": ""clocks an hour apart"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 14, ""minute"": 37}, ""clock2"": {""hour"": 15, ""minute"": 37}}, ""expected"": false}, {""description"": ""clocks with hour overflow"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 10, ""minute"": 37}, ""clock2"": {""hour"": 34, ""minute"": 37}}, ""expected"": true}, {""description"": ""clocks with hour overflow by several days"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 3, ""minute"": 11}, ""clock2"": {""hour"": 99, ""minute"": 11}}, ""expected"": true}, {""description"": ""clocks with negative hour"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 22, ""minute"": 40}, ""clock2"": {""hour"": -2, ""minute"": 40}}, ""expected"": true}, {""description"": ""clocks with negative hour that wraps"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 17, ""minute"": 3}, ""clock2"": {""hour"": -31, ""minute"": 3}}, ""expected"": true}, {""description"": ""clocks with negative hour that wraps multiple times"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 13, ""minute"": 49}, ""clock2"": {""hour"": -83, ""minute"": 49}}, ""expected"": true}, {""description"": ""clocks with minute overflow"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 0, ""minute"": 1}, ""clock2"": {""hour"": 0, ""minute"": 1441}}, ""expected"": true}, {""description"": ""clocks with minute overflow by several days"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 2, ""minute"": 2}, ""clock2"": {""hour"": 2, ""minute"": 4322}}, ""expected"": true}, {""description"": ""clocks with negative minute"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 2, ""minute"": 40}, ""clock2"": {""hour"": 3, ""minute"": -20}}, ""expected"": true}, {""description"": ""clocks with negative minute that wraps"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 4, ""minute"": 10}, ""clock2"": {""hour"": 5, ""minute"": -1490}}, ""expected"": true}, {""description"": ""clocks with negative minute that wraps multiple times"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 6, ""minute"": 15}, ""clock2"": {""hour"": 6, ""minute"": -4305}}, ""expected"": true}, {""description"": ""clocks with negative hours and minutes"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 7, ""minute"": 32}, ""clock2"": {""hour"": -12, ""minute"": -268}}, ""expected"": true}, {""description"": ""clocks with negative hours and minutes that wrap"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 18, ""minute"": 7}, ""clock2"": {""hour"": -54, ""minute"": -11513}}, ""expected"": true}, {""description"": ""full clock and zeroed clock"", ""property"": ""equal"", ""input"": {""clock1"": {""hour"": 24, ""minute"": 0}, ""clock2"": {""hour"": 0, ""minute"": 0}}, ""expected"": true}]}]}","Implement a clock that handles times without dates.

You should be able to add and subtract minutes to it.

Two clocks that represent the same time should be equal to each other.
"
collatz-conjecture,"{""exercise"": ""collatz-conjecture"", ""version"": ""1.2.1"", ""cases"": [{""description"": ""zero steps for one"", ""property"": ""steps"", ""input"": {""number"": 1}, ""expected"": 0}, {""description"": ""divide if even"", ""property"": ""steps"", ""input"": {""number"": 16}, ""expected"": 4}, {""description"": ""even and odd steps"", ""property"": ""steps"", ""input"": {""number"": 12}, ""expected"": 9}, {""description"": ""large number of even and odd steps"", ""property"": ""steps"", ""input"": {""number"": 1000000}, ""expected"": 152}, {""description"": ""zero is an error"", ""property"": ""steps"", ""input"": {""number"": 0}, ""expected"": {""error"": ""Only positive numbers are allowed""}}, {""description"": ""negative value is an error"", ""property"": ""steps"", ""input"": {""number"": -15}, ""expected"": {""error"": ""Only positive numbers are allowed""}}]}","The Collatz Conjecture or 3x+1 problem can be summarized as follows:

Take any positive integer n. If n is even, divide n by 2 to get n / 2. If n is
odd, multiply n by 3 and add 1 to get 3n + 1. Repeat the process indefinitely.
The conjecture states that no matter which number you start with, you will
always reach 1 eventually.

Given a number n, return the number of steps required to reach 1.

## Examples

Starting with n = 12, the steps would be as follows:

0. 12
1. 6
2. 3
3. 10
4. 5
5. 16
6. 8
7. 4
8. 2
9. 1

Resulting in 9 steps. So for input n = 12, the return value would be 9.
"
complex-numbers,"{""exercise"": ""complex-numbers"", ""version"": ""1.3.0"", ""comments"": ["" The canonical data assumes mathematically correct real   "", "" numbers. The testsuites should consider rounding errors  "", "" instead of testing for exact values for any non-integer  "", "" tests.                                                   "", "" Complex numbers z are represented as arrays [x, y] so    "", "" that z = x + i * y.                                      "", "" Pi is represented as a string \""pi\"", euler's number is  "", "" represented as \""e\"".                                    ""], ""cases"": [{""description"": ""Real part"", ""cases"": [{""description"": ""Real part of a purely real number"", ""property"": ""real"", ""input"": {""z"": [1, 0]}, ""expected"": 1}, {""description"": ""Real part of a purely imaginary number"", ""property"": ""real"", ""input"": {""z"": [0, 1]}, ""expected"": 0}, {""description"": ""Real part of a number with real and imaginary part"", ""property"": ""real"", ""input"": {""z"": [1, 2]}, ""expected"": 1}]}, {""description"": ""Imaginary part"", ""cases"": [{""description"": ""Imaginary part of a purely real number"", ""property"": ""imaginary"", ""input"": {""z"": [1, 0]}, ""expected"": 0}, {""description"": ""Imaginary part of a purely imaginary number"", ""property"": ""imaginary"", ""input"": {""z"": [0, 1]}, ""expected"": 1}, {""description"": ""Imaginary part of a number with real and imaginary part"", ""property"": ""imaginary"", ""input"": {""z"": [1, 2]}, ""expected"": 2}]}, {""description"": ""Imaginary unit"", ""property"": ""mul"", ""input"": {""z1"": [0, 1], ""z2"": [0, 1]}, ""expected"": [-1, 0]}, {""description"": ""Arithmetic"", ""cases"": [{""description"": ""Addition"", ""cases"": [{""description"": ""Add purely real numbers"", ""property"": ""add"", ""input"": {""z1"": [1, 0], ""z2"": [2, 0]}, ""expected"": [3, 0]}, {""description"": ""Add purely imaginary numbers"", ""property"": ""add"", ""input"": {""z1"": [0, 1], ""z2"": [0, 2]}, ""expected"": [0, 3]}, {""description"": ""Add numbers with real and imaginary part"", ""property"": ""add"", ""input"": {""z1"": [1, 2], ""z2"": [3, 4]}, ""expected"": [4, 6]}]}, {""description"": ""Subtraction"", ""cases"": [{""description"": ""Subtract purely real numbers"", ""property"": ""sub"", ""input"": {""z1"": [1, 0], ""z2"": [2, 0]}, ""expected"": [-1, 0]}, {""description"": ""Subtract purely imaginary numbers"", ""property"": ""sub"", ""input"": {""z1"": [0, 1], ""z2"": [0, 2]}, ""expected"": [0, -1]}, {""description"": ""Subtract numbers with real and imaginary part"", ""property"": ""sub"", ""input"": {""z1"": [1, 2], ""z2"": [3, 4]}, ""expected"": [-2, -2]}]}, {""description"": ""Multiplication"", ""cases"": [{""description"": ""Multiply purely real numbers"", ""property"": ""mul"", ""input"": {""z1"": [1, 0], ""z2"": [2, 0]}, ""expected"": [2, 0]}, {""description"": ""Multiply purely imaginary numbers"", ""property"": ""mul"", ""input"": {""z1"": [0, 1], ""z2"": [0, 2]}, ""expected"": [-2, 0]}, {""description"": ""Multiply numbers with real and imaginary part"", ""property"": ""mul"", ""input"": {""z1"": [1, 2], ""z2"": [3, 4]}, ""expected"": [-5, 10]}]}, {""description"": ""Division"", ""cases"": [{""description"": ""Divide purely real numbers"", ""property"": ""div"", ""input"": {""z1"": [1, 0], ""z2"": [2, 0]}, ""expected"": [0.5, 0]}, {""description"": ""Divide purely imaginary numbers"", ""property"": ""div"", ""input"": {""z1"": [0, 1], ""z2"": [0, 2]}, ""expected"": [0.5, 0]}, {""description"": ""Divide numbers with real and imaginary part"", ""property"": ""div"", ""input"": {""z1"": [1, 2], ""z2"": [3, 4]}, ""expected"": [0.44, 0.08]}]}]}, {""description"": ""Absolute value"", ""cases"": [{""description"": ""Absolute value of a positive purely real number"", ""property"": ""abs"", ""input"": {""z"": [5, 0]}, ""expected"": 5}, {""description"": ""Absolute value of a negative purely real number"", ""property"": ""abs"", ""input"": {""z"": [-5, 0]}, ""expected"": 5}, {""description"": ""Absolute value of a purely imaginary number with positive imaginary part"", ""property"": ""abs"", ""input"": {""z"": [0, 5]}, ""expected"": 5}, {""description"": ""Absolute value of a purely imaginary number with negative imaginary part"", ""property"": ""abs"", ""input"": {""z"": [0, -5]}, ""expected"": 5}, {""description"": ""Absolute value of a number with real and imaginary part"", ""property"": ""abs"", ""input"": {""z"": [3, 4]}, ""expected"": 5}]}, {""description"": ""Complex conjugate"", ""cases"": [{""description"": ""Conjugate a purely real number"", ""property"": ""conjugate"", ""input"": {""z"": [5, 0]}, ""expected"": [5, 0]}, {""description"": ""Conjugate a purely imaginary number"", ""property"": ""conjugate"", ""input"": {""z"": [0, 5]}, ""expected"": [0, -5]}, {""description"": ""Conjugate a number with real and imaginary part"", ""property"": ""conjugate"", ""input"": {""z"": [1, 1]}, ""expected"": [1, -1]}]}, {""description"": ""Complex exponential function"", ""comments"": ["" Defining the exponential function can be optional.       "", "" If the language used does not have sine and cosine       "", "" functions in the standard library, this will be          "", "" significantly more difficult than the rest of the exer-  "", "" cise and should probably not be part of the problem.     "", "" The recommended implementation uses Euler's formula      "", "" exp(ix) = cos(x) + i * sin(x). This is not an ideal sol- "", "" ution but works for the purpose of teaching complex      "", "" numbers.                                                 ""], ""cases"": [{""description"": ""Euler's identity/formula"", ""property"": ""exp"", ""input"": {""z"": [0, ""pi""]}, ""expected"": [-1, 0]}, {""description"": ""Exponential of 0"", ""property"": ""exp"", ""input"": {""z"": [0, 0]}, ""expected"": [1, 0]}, {""description"": ""Exponential of a purely real number"", ""property"": ""exp"", ""input"": {""z"": [1, 0]}, ""expected"": [""e"", 0]}, {""description"": ""Exponential of a number with real and imaginary part"", ""property"": ""exp"", ""input"": {""z"": [""ln(2)"", ""pi""]}, ""expected"": [-2, 0]}]}]}","A complex number is a number in the form `a + b * i` where `a` and `b` are real and `i` satisfies `i^2 = -1`.

`a` is called the real part and `b` is called the imaginary part of `z`.
The conjugate of the number `a + b * i` is the number `a - b * i`.
The absolute value of a complex number `z = a + b * i` is a real number `|z| = sqrt(a^2 + b^2)`. The square of the absolute value `|z|^2` is the result of multiplication of `z` by its complex conjugate.

The sum/difference of two complex numbers involves adding/subtracting their real and imaginary parts separately:
`(a + i * b) + (c + i * d) = (a + c) + (b + d) * i`,
`(a + i * b) - (c + i * d) = (a - c) + (b - d) * i`.

Multiplication result is by definition
`(a + i * b) * (c + i * d) = (a * c - b * d) + (b * c + a * d) * i`.

The reciprocal of a non-zero complex number is
`1 / (a + i * b) = a/(a^2 + b^2) - b/(a^2 + b^2) * i`.

Dividing a complex number `a + i * b` by another `c + i * d` gives:
`(a + i * b) / (c + i * d) = (a * c + b * d)/(c^2 + d^2) + (b * c - a * d)/(c^2 + d^2) * i`.

Raising e to a complex exponent can be expressed as `e^(a + i * b) = e^a * e^(i * b)`, the last term of which is given by Euler's formula `e^(i * b) = cos(b) + i * sin(b)`.

Implement the following operations:
 - addition, subtraction, multiplication and division of two complex numbers,
 - conjugate, absolute value, exponent of a given complex number.


Assume the programming language you are using does not have an implementation of complex numbers.
"
connect,"{""exercise"": ""connect"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""an empty board has no winner"", ""property"": ""winner"", ""input"": {""board"": ["". . . . ."", "" . . . . ."", ""  . . . . ."", ""   . . . . ."", ""    . . . . .""]}, ""expected"": """"}, {""description"": ""X can win on a 1x1 board"", ""property"": ""winner"", ""input"": {""board"": [""X""]}, ""expected"": ""X""}, {""description"": ""O can win on a 1x1 board"", ""property"": ""winner"", ""input"": {""board"": [""O""]}, ""expected"": ""O""}, {""description"": ""only edges does not make a winner"", ""property"": ""winner"", ""input"": {""board"": [""O O O X"", "" X . . X"", ""  X . . X"", ""   X O O O""]}, ""expected"": """"}, {""description"": ""illegal diagonal does not make a winner"", ""property"": ""winner"", ""input"": {""board"": [""X O . ."", "" O X X X"", ""  O X O ."", ""   . O X ."", ""    X X O O""]}, ""expected"": """"}, {""description"": ""nobody wins crossing adjacent angles"", ""property"": ""winner"", ""input"": {""board"": [""X . . ."", "" . X O ."", ""  O . X O"", ""   . O . X"", ""    . . O .""]}, ""expected"": """"}, {""description"": ""X wins crossing from left to right"", ""property"": ""winner"", ""input"": {""board"": ["". O . ."", "" O X X X"", ""  O X O ."", ""   X X O X"", ""    . O X .""]}, ""expected"": ""X""}, {""description"": ""O wins crossing from top to bottom"", ""property"": ""winner"", ""input"": {""board"": ["". O . ."", "" O X X X"", ""  O O O ."", ""   X X O X"", ""    . O X .""]}, ""expected"": ""O""}, {""description"": ""X wins using a convoluted path"", ""property"": ""winner"", ""input"": {""board"": ["". X X . ."", "" X . X . X"", ""  . X . X ."", ""   . X X . ."", ""    O O O O O""]}, ""expected"": ""X""}, {""description"": ""X wins using a spiral path"", ""property"": ""winner"", ""input"": {""board"": [""O X X X X X X X X"", "" O X O O O O O O O"", ""  O X O X X X X X O"", ""   O X O X O O O X O"", ""    O X O X X X O X O"", ""     O X O O O X O X O"", ""      O X X X X X O X O"", ""       O O O O O O O X O"", ""        X X X X X X X X O""]}, ""expected"": ""X""}]}","Compute the result for a game of Hex / Polygon.

The abstract boardgame known as
[Hex](https://en.wikipedia.org/wiki/Hex_%28board_game%29) / Polygon /
CON-TAC-TIX is quite simple in rules, though complex in practice. Two players
place stones on a rhombus with hexagonal fields. The player to connect his/her
stones to the opposite side first wins. The four sides of the rhombus are
divided between the two players (i.e. one player gets assigned a side and the
side directly opposite it and the other player gets assigned the two other
sides).

Your goal is to build a program that given a simple representation of a board
computes the winner (or lack thereof). Note that all games need not be ""fair"".
(For example, players may have mismatched piece counts.)

The boards look like this (with spaces added for readability, which won't be in
the representation passed to your code):

```text
. O . X .
 . X X O .
  O O O X .
   . X O X O
    X O O O X
```

""Player `O`"" plays from top to bottom, ""Player `X`"" plays from left to right. In
the above example `O` has made a connection from left to right but nobody has
won since `O` didn't connect top and bottom.
"
counter,{},"**NOTE: This exercise has been deprecated.**

Please see the discussion in https://github.com/exercism/problem-specifications/issues/80
for more context.

--------
Design a test suite for a line/letter/character counter tool.

This is a special exercise. Instead of creating code that works with
an existing test suite you get to define the test suite. To help you
several variations of the code under test have been provided, your
test suite should at least be able to detect the problems (or lack
thereof) with them.

The system under test is supposed to be a system to count the
number of lines, letters and total characters in supplied strings.
The idea is that you perform the ""add string"" operation a number
of times, passing in strings, and afterwards call the ""lines"",
""letters"" and ""characters"" functions to get the totals.
"
crypto-square,"{""exercise"": ""crypto-square"", ""version"": ""3.2.0"", ""cases"": [{""description"": ""empty plaintext results in an empty ciphertext"", ""property"": ""ciphertext"", ""input"": {""plaintext"": """"}, ""expected"": """"}, {""description"": ""Lowercase"", ""property"": ""ciphertext"", ""input"": {""plaintext"": ""A""}, ""expected"": ""a""}, {""description"": ""Remove spaces"", ""property"": ""ciphertext"", ""input"": {""plaintext"": ""  b ""}, ""expected"": ""b""}, {""description"": ""Remove punctuation"", ""property"": ""ciphertext"", ""input"": {""plaintext"": ""@1,%!""}, ""expected"": ""1""}, {""description"": ""9 character plaintext results in 3 chunks of 3 characters"", ""property"": ""ciphertext"", ""input"": {""plaintext"": ""This is fun!""}, ""expected"": ""tsf hiu isn""}, {""description"": ""8 character plaintext results in 3 chunks, the last one with a trailing space"", ""property"": ""ciphertext"", ""input"": {""plaintext"": ""Chill out.""}, ""expected"": ""clu hlt io ""}, {""description"": ""54 character plaintext results in 7 chunks, the last two with trailing spaces"", ""property"": ""ciphertext"", ""input"": {""plaintext"": ""If man was meant to stay on the ground, god would have given us roots.""}, ""expected"": ""imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau ""}]}","Implement the classic method for composing secret messages called a square code.

Given an English text, output the encoded version of that text.

First, the input is normalized: the spaces and punctuation are removed
from the English text and the message is downcased.

Then, the normalized characters are broken into rows.  These rows can be
regarded as forming a rectangle when printed with intervening newlines.

For example, the sentence

```text
""If man was meant to stay on the ground, god would have given us roots.""
```

is normalized to:

```text
""ifmanwasmeanttostayonthegroundgodwouldhavegivenusroots""
```

The plaintext should be organized in to a rectangle.  The size of the
rectangle (`r x c`) should be decided by the length of the message,
such that `c >= r` and `c - r <= 1`, where `c` is the number of columns
and `r` is the number of rows.

Our normalized text is 54 characters long, dictating a rectangle with
`c = 8` and `r = 7`:

```text
""ifmanwas""
""meanttos""
""tayonthe""
""groundgo""
""dwouldha""
""vegivenu""
""sroots  ""
```

The coded message is obtained by reading down the columns going left to
right.

The message above is coded as:

```text
""imtgdvsfearwermayoogoanouuiontnnlvtwttddesaohghnsseoau""
```

Output the encoded text in chunks that fill perfect rectangles `(r X c)`,
with `c` chunks of `r` length, separated by spaces. For phrases that are
`n` characters short of the perfect rectangle, pad each of the last `n`
chunks with a single trailing space.

```text
""imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau ""
```

Notice that were we to stack these, we could visually decode the
cyphertext back in to the original message:

```text
""imtgdvs""
""fearwer""
""mayoogo""
""anouuio""
""ntnnlvt""
""wttddes""
""aohghn ""
""sseoau ""
```
"
custom-set,"{""exercise"": ""custom-set"", ""version"": ""1.3.0"", ""comments"": [""These tests cover the core components of a set data structure: checking"", ""presence, adding, comparing and basic set operations. Other features"", ""such as deleting elements, checking size, sorting are not tested, but"", ""you can add them if they are interesting in your language"", """", ""Tests about mixed-type sets are not included because the ability"", ""to implement that will vary by language. If your language supports it"", ""and you want to implement mixed-type sets, feel free.""], ""cases"": [{""description"": ""Returns true if the set contains no elements"", ""cases"": [{""description"": ""sets with no elements are empty"", ""property"": ""empty"", ""input"": {""set"": []}, ""expected"": true}, {""description"": ""sets with elements are not empty"", ""property"": ""empty"", ""input"": {""set"": [1]}, ""expected"": false}]}, {""description"": ""Sets can report if they contain an element"", ""cases"": [{""description"": ""nothing is contained in an empty set"", ""property"": ""contains"", ""input"": {""set"": [], ""element"": 1}, ""expected"": false}, {""description"": ""when the element is in the set"", ""property"": ""contains"", ""input"": {""set"": [1, 2, 3], ""element"": 1}, ""expected"": true}, {""description"": ""when the element is not in the set"", ""property"": ""contains"", ""input"": {""set"": [1, 2, 3], ""element"": 4}, ""expected"": false}]}, {""description"": ""A set is a subset if all of its elements are contained in the other set"", ""cases"": [{""description"": ""empty set is a subset of another empty set"", ""property"": ""subset"", ""input"": {""set1"": [], ""set2"": []}, ""expected"": true}, {""description"": ""empty set is a subset of non-empty set"", ""property"": ""subset"", ""input"": {""set1"": [], ""set2"": [1]}, ""expected"": true}, {""description"": ""non-empty set is not a subset of empty set"", ""property"": ""subset"", ""input"": {""set1"": [1], ""set2"": []}, ""expected"": false}, {""description"": ""set is a subset of set with exact same elements"", ""property"": ""subset"", ""input"": {""set1"": [1, 2, 3], ""set2"": [1, 2, 3]}, ""expected"": true}, {""description"": ""set is a subset of larger set with same elements"", ""property"": ""subset"", ""input"": {""set1"": [1, 2, 3], ""set2"": [4, 1, 2, 3]}, ""expected"": true}, {""description"": ""set is not a subset of set that does not contain its elements"", ""property"": ""subset"", ""input"": {""set1"": [1, 2, 3], ""set2"": [4, 1, 3]}, ""expected"": false}]}, {""description"": ""Sets are disjoint if they share no elements"", ""cases"": [{""description"": ""the empty set is disjoint with itself"", ""property"": ""disjoint"", ""input"": {""set1"": [], ""set2"": []}, ""expected"": true}, {""description"": ""empty set is disjoint with non-empty set"", ""property"": ""disjoint"", ""input"": {""set1"": [], ""set2"": [1]}, ""expected"": true}, {""description"": ""non-empty set is disjoint with empty set"", ""property"": ""disjoint"", ""input"": {""set1"": [1], ""set2"": []}, ""expected"": true}, {""description"": ""sets are not disjoint if they share an element"", ""property"": ""disjoint"", ""input"": {""set1"": [1, 2], ""set2"": [2, 3]}, ""expected"": false}, {""description"": ""sets are disjoint if they share no elements"", ""property"": ""disjoint"", ""input"": {""set1"": [1, 2], ""set2"": [3, 4]}, ""expected"": true}]}, {""description"": ""Sets with the same elements are equal"", ""cases"": [{""description"": ""empty sets are equal"", ""property"": ""equal"", ""input"": {""set1"": [], ""set2"": []}, ""expected"": true}, {""description"": ""empty set is not equal to non-empty set"", ""property"": ""equal"", ""input"": {""set1"": [], ""set2"": [1, 2, 3]}, ""expected"": false}, {""description"": ""non-empty set is not equal to empty set"", ""property"": ""equal"", ""input"": {""set1"": [1, 2, 3], ""set2"": []}, ""expected"": false}, {""description"": ""sets with the same elements are equal"", ""property"": ""equal"", ""input"": {""set1"": [1, 2], ""set2"": [2, 1]}, ""expected"": true}, {""description"": ""sets with different elements are not equal"", ""property"": ""equal"", ""input"": {""set1"": [1, 2, 3], ""set2"": [1, 2, 4]}, ""expected"": false}, {""description"": ""set is not equal to larger set with same elements"", ""property"": ""equal"", ""input"": {""set1"": [1, 2, 3], ""set2"": [1, 2, 3, 4]}, ""expected"": false}]}, {""description"": ""Unique elements can be added to a set"", ""cases"": [{""description"": ""add to empty set"", ""property"": ""add"", ""input"": {""set"": [], ""element"": 3}, ""expected"": [3]}, {""description"": ""add to non-empty set"", ""property"": ""add"", ""input"": {""set"": [1, 2, 4], ""element"": 3}, ""expected"": [1, 2, 3, 4]}, {""description"": ""adding an existing element does not change the set"", ""property"": ""add"", ""input"": {""set"": [1, 2, 3], ""element"": 3}, ""expected"": [1, 2, 3]}]}, {""description"": ""Intersection returns a set of all shared elements"", ""cases"": [{""description"": ""intersection of two empty sets is an empty set"", ""property"": ""intersection"", ""input"": {""set1"": [], ""set2"": []}, ""expected"": []}, {""description"": ""intersection of an empty set and non-empty set is an empty set"", ""property"": ""intersection"", ""input"": {""set1"": [], ""set2"": [3, 2, 5]}, ""expected"": []}, {""description"": ""intersection of a non-empty set and an empty set is an empty set"", ""property"": ""intersection"", ""input"": {""set1"": [1, 2, 3, 4], ""set2"": []}, ""expected"": []}, {""description"": ""intersection of two sets with no shared elements is an empty set"", ""property"": ""intersection"", ""input"": {""set1"": [1, 2, 3], ""set2"": [4, 5, 6]}, ""expected"": []}, {""description"": ""intersection of two sets with shared elements is a set of the shared elements"", ""property"": ""intersection"", ""input"": {""set1"": [1, 2, 3, 4], ""set2"": [3, 2, 5]}, ""expected"": [2, 3]}]}, {""description"": ""Difference (or Complement) of a set is a set of all elements that are only in the first set"", ""cases"": [{""description"": ""difference of two empty sets is an empty set"", ""property"": ""difference"", ""input"": {""set1"": [], ""set2"": []}, ""expected"": []}, {""description"": ""difference of empty set and non-empty set is an empty set"", ""property"": ""difference"", ""input"": {""set1"": [], ""set2"": [3, 2, 5]}, ""expected"": []}, {""description"": ""difference of a non-empty set and an empty set is the non-empty set"", ""property"": ""difference"", ""input"": {""set1"": [1, 2, 3, 4], ""set2"": []}, ""expected"": [1, 2, 3, 4]}, {""description"": ""difference of two non-empty sets is a set of elements that are only in the first set"", ""property"": ""difference"", ""input"": {""set1"": [3, 2, 1], ""set2"": [2, 4]}, ""expected"": [1, 3]}]}, {""description"": ""Union returns a set of all elements in either set"", ""cases"": [{""description"": ""union of empty sets is an empty set"", ""property"": ""union"", ""input"": {""set1"": [], ""set2"": []}, ""expected"": []}, {""description"": ""union of an empty set and non-empty set is the non-empty set"", ""property"": ""union"", ""input"": {""set1"": [], ""set2"": [2]}, ""expected"": [2]}, {""description"": ""union of a non-empty set and empty set is the non-empty set"", ""property"": ""union"", ""input"": {""set1"": [1, 3], ""set2"": []}, ""expected"": [1, 3]}, {""description"": ""union of non-empty sets contains all unique elements"", ""property"": ""union"", ""input"": {""set1"": [1, 3], ""set2"": [2, 3]}, ""expected"": [3, 2, 1]}]}]}","Create a custom set type.

Sometimes it is necessary to define a custom data structure of some
type, like a set. In this exercise you will define your own set. How it
works internally doesn't matter, as long as it behaves like a set of
unique elements.
"
diamond,"{""exercise"": ""diamond"", ""version"": ""1.1.0"", ""comments"": ["" The tests contained within this canonical data file are suitable   "", "" for value-based testing, in which each test case checks that the   "", "" value returned by the function under test is in every way          "", "" identical to a given expected value.                               "", ""                                                                    "", "" This exercise is also amenable to property-based testing, in which "", "" each test case verifies that the value returned by the function    "", "" under test exhibits a specific desired property.                   "", ""                                                                    "", "" Several tracks (notably, C# and Go) forgo the value-based tests    "", "" below in favor of property-based tests. If you are feeling         "", "" adventurous and would like to use this exercise to introduce the   "", "" concept of property-based testing to participants in your track,   "", "" please ignore the value-based tests below and instead reference    "", "" the test suites in the aforementioned tracks.                      ""], ""cases"": [{""description"": ""Degenerate case with a single 'A' row"", ""property"": ""rows"", ""input"": {""letter"": ""A""}, ""expected"": [""A""]}, {""description"": ""Degenerate case with no row containing 3 distinct groups of spaces"", ""property"": ""rows"", ""input"": {""letter"": ""B""}, ""expected"": ["" A "", ""B B"", "" A ""]}, {""description"": ""Smallest non-degenerate case with odd diamond side length"", ""property"": ""rows"", ""input"": {""letter"": ""C""}, ""expected"": [""  A  "", "" B B "", ""C   C"", "" B B "", ""  A  ""]}, {""description"": ""Smallest non-degenerate case with even diamond side length"", ""property"": ""rows"", ""input"": {""letter"": ""D""}, ""expected"": [""   A   "", ""  B B  "", "" C   C "", ""D     D"", "" C   C "", ""  B B  "", ""   A   ""]}, {""description"": ""Largest possible diamond"", ""property"": ""rows"", ""input"": {""letter"": ""Z""}, ""expected"": [""                         A                         "", ""                        B B                        "", ""                       C   C                       "", ""                      D     D                      "", ""                     E       E                     "", ""                    F         F                    "", ""                   G           G                   "", ""                  H             H                  "", ""                 I               I                 "", ""                J                 J                "", ""               K                   K               "", ""              L                     L              "", ""             M                       M             "", ""            N                         N            "", ""           O                           O           "", ""          P                             P          "", ""         Q                               Q         "", ""        R                                 R        "", ""       S                                   S       "", ""      T                                     T      "", ""     U                                       U     "", ""    V                                         V    "", ""   W                                           W   "", ""  X                                             X  "", "" Y                                               Y "", ""Z                                                 Z"", "" Y                                               Y "", ""  X                                             X  "", ""   W                                           W   "", ""    V                                         V    "", ""     U                                       U     "", ""      T                                     T      "", ""       S                                   S       "", ""        R                                 R        "", ""         Q                               Q         "", ""          P                             P          "", ""           O                           O           "", ""            N                         N            "", ""             M                       M             "", ""              L                     L              "", ""               K                   K               "", ""                J                 J                "", ""                 I               I                 "", ""                  H             H                  "", ""                   G           G                   "", ""                    F         F                    "", ""                     E       E                     "", ""                      D     D                      "", ""                       C   C                       "", ""                        B B                        "", ""                         A                         ""]}]}","The diamond kata takes as its input a letter, and outputs it in a diamond
shape. Given a letter, it prints a diamond starting with 'A', with the
supplied letter at the widest point.

## Requirements

* The first row contains one 'A'.
* The last row contains one 'A'.
* All rows, except the first and last, have exactly two identical letters.
* All rows have as many trailing spaces as leading spaces. (This might be 0).
* The diamond is horizontally symmetric.
* The diamond is vertically symmetric.
* The diamond has a square shape (width equals height).
* The letters form a diamond shape.
* The top half has the letters in ascending order.
* The bottom half has the letters in descending order.
* The four corners (containing the spaces) are triangles.

## Examples

In the following examples, spaces are indicated by `·` characters.

Diamond for letter 'A':

```text
A
```

Diamond for letter 'C':

```text
··A··
·B·B·
C···C
·B·B·
··A··
```

Diamond for letter 'E':

```text
····A····
···B·B···
··C···C··
·D·····D·
E·······E
·D·····D·
··C···C··
···B·B···
····A····
```
"
difference-of-squares,"{""exercise"": ""difference-of-squares"", ""version"": ""1.2.0"", ""cases"": [{""description"": ""Square the sum of the numbers up to the given number"", ""cases"": [{""description"": ""square of sum 1"", ""property"": ""squareOfSum"", ""input"": {""number"": 1}, ""expected"": 1}, {""description"": ""square of sum 5"", ""property"": ""squareOfSum"", ""input"": {""number"": 5}, ""expected"": 225}, {""description"": ""square of sum 100"", ""property"": ""squareOfSum"", ""input"": {""number"": 100}, ""expected"": 25502500}]}, {""description"": ""Sum the squares of the numbers up to the given number"", ""cases"": [{""description"": ""sum of squares 1"", ""property"": ""sumOfSquares"", ""input"": {""number"": 1}, ""expected"": 1}, {""description"": ""sum of squares 5"", ""property"": ""sumOfSquares"", ""input"": {""number"": 5}, ""expected"": 55}, {""description"": ""sum of squares 100"", ""property"": ""sumOfSquares"", ""input"": {""number"": 100}, ""expected"": 338350}]}, {""description"": ""Subtract sum of squares from square of sums"", ""cases"": [{""description"": ""difference of squares 1"", ""property"": ""differenceOfSquares"", ""input"": {""number"": 1}, ""expected"": 0}, {""description"": ""difference of squares 5"", ""property"": ""differenceOfSquares"", ""input"": {""number"": 5}, ""expected"": 170}, {""description"": ""difference of squares 100"", ""property"": ""differenceOfSquares"", ""input"": {""number"": 100}, ""expected"": 25164150}]}]}","Find the difference between the square of the sum and the sum of the squares of the first N natural numbers.

The square of the sum of the first ten natural numbers is
(1 + 2 + ... + 10)² = 55² = 3025.

The sum of the squares of the first ten natural numbers is
1² + 2² + ... + 10² = 385.

Hence the difference between the square of the sum of the first
ten natural numbers and the sum of the squares of the first ten
natural numbers is 3025 - 385 = 2640.
"
diffie-hellman,"{""exercise"": ""diffie-hellman"", ""version"": ""1.0.0"", ""comments"": [""Optional tests to consider:"", ""* Validation of parameters:"", ""  Validate that `p`, `g` are valid."", ""  Validate that keys given as inputs are valid."", ""  Resources that show what happens if parameters are not validated:"", ""  http://cryptopals.com/sets/5/challenges/34"", ""  http://cryptopals.com/sets/5/challenges/35"", ""* Large numbers:"", ""  Although the calculations fundamentally do not require large numbers,"", ""  this is a reasonable real-world use for them"", ""  and it may be instructive to have an exercise on their use."", ""  Consult tracks with this exercise (such as the Go track) for possible inputs to use.""], ""cases"": [{""description"": ""private key is in range 1 .. p"", ""property"": ""privateKeyIsInRange"", ""input"": {}, ""expected"": {""greaterThan"": 1, ""lessThan"": ""p""}}, {""description"": ""private key is random"", ""property"": ""privateKeyIsRandom"", ""input"": {}, ""expected"": {""random"": true}}, {""description"": ""can calculate public key using private key"", ""property"": ""publicKey"", ""input"": {""p"": 23, ""g"": 5, ""privateKey"": 6}, ""expected"": 8}, {""description"": ""can calculate secret using other party's public key"", ""property"": ""secret"", ""input"": {""p"": 23, ""theirPublicKey"": 19, ""myPrivateKey"": 6}, ""expected"": 2}, {""description"": ""key exchange"", ""property"": ""keyExchange"", ""input"": {""p"": 23, ""g"": 5, ""alicePrivateKey"": ""privateKey(p)"", ""bobPrivateKey"": ""privateKey(p)"", ""alicePublicKey"": ""publicKey(p, g, alicePrivateKey)"", ""bobPublicKey"": ""publicKey(p, g, bobPrivateKey)"", ""secretA"": ""secret(p, bobPublicKey, alicePrivateKey)"", ""secretB"": ""secret(p, alicePublicKey, bobPrivateKey)""}, ""expected"": ""secretA == secretB""}]}","Diffie-Hellman key exchange.

Alice and Bob use Diffie-Hellman key exchange to share secrets.  They
start with prime numbers, pick private keys, generate and share public
keys, and then generate a shared secret key.

## Step 0

The test program supplies prime numbers p and g.

## Step 1

Alice picks a private key, a, greater than 1 and less than p.  Bob does
the same to pick a private key b.

## Step 2

Alice calculates a public key A.

    A = g**a mod p

Using the same p and g, Bob similarly calculates a public key B from his
private key b.

## Step 3

Alice and Bob exchange public keys.  Alice calculates secret key s.

    s = B**a mod p

Bob calculates

    s = A**b mod p

The calculations produce the same result!  Alice and Bob now share
secret s.
"
dominoes,"{""exercise"": ""dominoes"", ""version"": ""2.1.0"", ""comments"": [""Inputs are given as lists of two-element lists."", ""Feel free to convert the input to a sensible type in the specific language"", ""For example, if the target language has 2-tuples, that is a good candidate."", """", ""There are two levels of this exercise that can be implemented and/or tested:"", """", ""1: Given a list of dominoes, determine whether it can be made into a chain."", ""Under this scheme, the submitted code only needs to return a boolean."", ""The test code only needs to check that that boolean value matches up."", """", ""2: Given a list of dominoes, determine one possible chain, if one exists, or else conclude that none can be made."", ""Under this scheme, the submitted code needs to either return a chain, or signal that none exists."", ""Different languages may do this differently:"", ""return Option<Vector<Domino>>, return ([]Domino, error), raise exception, etc."", ""The test code needs to check that the returned chain is correct (see below)."", """", ""It's infeasible to list every single possible result chain in this file."", ""That's because for even a simple list [(1, 2), (2, 3), (3, 1)],"", ""the possible chains are that order, any rotation of that order,"", ""and any rotation of that order with all dominoes reversed."", """", ""For this reason, this JSON file will only list whether a chain is possible."", ""Tracks wishing to verify correct results of the second level must separately perform this verification."", """", ""The properties to verify are:"", ""1. The submitted code claims there is a chain if and only if there actually is one."", ""2. The number of dominoes in the output equals the number of dominoes in the input."", ""3a. For each adjacent pair of dominoes ... (a, b), (c, d) ...: b is equal to c."", ""3b. For the dominoes on the ends (a, b) ... (c, d): a is equal to d."", ""4. Every domino appears in the output an equal number of times as the number of times it appears in the input."", ""(in other words, the dominoes in the output are the same dominoes as the ones in the input)"", """", ""Feel free to examine the Rust track for ideas on implementing the second level verification.""], ""cases"": [{""description"": ""empty input = empty output"", ""property"": ""canChain"", ""input"": {""dominoes"": []}, ""expected"": true}, {""description"": ""singleton input = singleton output"", ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 1]]}, ""expected"": true}, {""description"": ""singleton that can't be chained"", ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 2]]}, ""expected"": false}, {""description"": ""three elements"", ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 2], [3, 1], [2, 3]]}, ""expected"": true}, {""description"": ""can reverse dominoes"", ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 2], [1, 3], [2, 3]]}, ""expected"": true}, {""description"": ""can't be chained"", ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 2], [4, 1], [2, 3]]}, ""expected"": false}, {""description"": ""disconnected - simple"", ""comments"": [""This meets the requirement of being possibly-Euclidean."", ""All vertices have even degree."", ""Nevertheless, there is no chain here, as there's no way to get from 1 to 2."", ""This test (and the two following) prevent solutions from using the even-degree test as the sole criterion,"", ""as that is not a sufficient condition.""], ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 1], [2, 2]]}, ""expected"": false}, {""description"": ""disconnected - double loop"", ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 2], [2, 1], [3, 4], [4, 3]]}, ""expected"": false}, {""description"": ""disconnected - single isolated"", ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 2], [2, 3], [3, 1], [4, 4]]}, ""expected"": false}, {""description"": ""need backtrack"", ""comments"": [""Some solutions may make a chain out of (1, 2), (2, 3), (3, 1)"", ""then decide that since there are no more dominoes containing a 1,"", ""there is no chain possible."", ""There is indeed a chain here, so this test checks for this line of reasoning."", ""You need to place the (2, 4) after the (1, 2) rather than the (2, 3).""], ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 2], [2, 3], [3, 1], [2, 4], [2, 4]]}, ""expected"": true}, {""description"": ""separate loops"", ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 2], [2, 3], [3, 1], [1, 1], [2, 2], [3, 3]]}, ""expected"": true}, {""description"": ""nine elements"", ""property"": ""canChain"", ""input"": {""dominoes"": [[1, 2], [5, 3], [3, 1], [1, 2], [2, 4], [1, 6], [2, 3], [3, 4], [5, 6]]}, ""expected"": true}]}","Make a chain of dominoes.

Compute a way to order a given set of dominoes in such a way that they form a
correct domino chain (the dots on one half of a stone match the dots on the
neighbouring half of an adjacent stone) and that dots on the halfs of the stones
which don't have a neighbour (the first and last stone) match each other.

For example given the stones `[2|1]`, `[2|3]` and `[1|3]` you should compute something
like `[1|2] [2|3] [3|1]` or `[3|2] [2|1] [1|3]` or `[1|3] [3|2] [2|1]` etc, where the first and last numbers are the same.

For stones `[1|2]`, `[4|1]` and `[2|3]` the resulting chain is not valid: `[4|1] [1|2] [2|3]`'s first and last numbers are not the same. 4 != 3

Some test cases may use duplicate stones in a chain solution, assume that multiple Domino sets are being used.
"
dot-dsl,{},"Write a Domain Specific Language similar to the Graphviz dot language.

A [Domain Specific Language
(DSL)](https://en.wikipedia.org/wiki/Domain-specific_language) is a
small language optimized for a specific domain.

For example the [DOT language](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) allows
you to write a textual description of a graph which is then transformed into a picture by one of
the [Graphviz](http://graphviz.org/) tools (such as `dot`). A simple graph looks like this:

    graph {
        graph [bgcolor=""yellow""]
        a [color=""red""]
        b [color=""blue""]
        a -- b [color=""green""]
    }

Putting this in a file `example.dot` and running `dot example.dot -T png
-o example.png` creates an image `example.png` with red and blue circle
connected by a green line on a yellow background.

Create a DSL similar to the dot language.
"
error-handling,{},"Implement various kinds of error handling and resource management.

An important point of programming is how to handle errors and close
resources even if errors occur.

This exercise requires you to handle various errors. Because error handling
is rather programming language specific you'll have to refer to the tests
for your track to see what's exactly required.
"
etl,"{""exercise"": ""etl"", ""version"": ""1.0.0"", ""cases"": [{""comments"": [""Note:  The expected input data for these tests should have"", ""integer keys (not stringified numbers as shown in the JSON below"", ""Unless the language prohibits that, please implement these tests"", ""such that keys are integers. e.g. in JavaScript, it might look "", ""like `transform( { 1: ['A'] } );`""], ""description"": ""transforms the a set of scrabble data previously indexed by the tile score to a set of data indexed by the tile letter"", ""cases"": [{""description"": ""a single letter"", ""property"": ""transform"", ""input"": {""1"": [""A""]}, ""expected"": {""a"": 1}}, {""description"": ""single score with multiple letters"", ""property"": ""transform"", ""input"": {""1"": [""A"", ""E"", ""I"", ""O"", ""U""]}, ""expected"": {""a"": 1, ""e"": 1, ""i"": 1, ""o"": 1, ""u"": 1}}, {""description"": ""multiple scores with multiple letters"", ""property"": ""transform"", ""input"": {""1"": [""A"", ""E""], ""2"": [""D"", ""G""]}, ""expected"": {""a"": 1, ""d"": 2, ""e"": 1, ""g"": 2}}, {""description"": ""multiple scores with differing numbers of letters"", ""property"": ""transform"", ""input"": {""1"": [""A"", ""E"", ""I"", ""O"", ""U"", ""L"", ""N"", ""R"", ""S"", ""T""], ""2"": [""D"", ""G""], ""3"": [""B"", ""C"", ""M"", ""P""], ""4"": [""F"", ""H"", ""V"", ""W"", ""Y""], ""5"": [""K""], ""8"": [""J"", ""X""], ""10"": [""Q"", ""Z""]}, ""expected"": {""a"": 1, ""b"": 3, ""c"": 3, ""d"": 2, ""e"": 1, ""f"": 4, ""g"": 2, ""h"": 4, ""i"": 1, ""j"": 8, ""k"": 5, ""l"": 1, ""m"": 3, ""n"": 1, ""o"": 1, ""p"": 3, ""q"": 10, ""r"": 1, ""s"": 1, ""t"": 1, ""u"": 1, ""v"": 4, ""w"": 4, ""x"": 8, ""y"": 4, ""z"": 10}}]}]}","We are going to do the `Transform` step of an Extract-Transform-Load.

### ETL

Extract-Transform-Load (ETL) is a fancy way of saying, ""We have some crufty, legacy data over in this system, and now we need it in this shiny new system over here, so
we're going to migrate this.""

(Typically, this is followed by, ""We're only going to need to run this
once."" That's then typically followed by much forehead slapping and
moaning about how stupid we could possibly be.)

### The goal

We're going to extract some scrabble scores from a legacy system.

The old system stored a list of letters per score:

- 1 point: ""A"", ""E"", ""I"", ""O"", ""U"", ""L"", ""N"", ""R"", ""S"", ""T"",
- 2 points: ""D"", ""G"",
- 3 points: ""B"", ""C"", ""M"", ""P"",
- 4 points: ""F"", ""H"", ""V"", ""W"", ""Y"",
- 5 points: ""K"",
- 8 points: ""J"", ""X"",
- 10 points: ""Q"", ""Z"",

The shiny new scrabble system instead stores the score per letter, which
makes it much faster and easier to calculate the score for a word. It
also stores the letters in lower-case regardless of the case of the
input letters:

- ""a"" is worth 1 point.
- ""b"" is worth 3 points.
- ""c"" is worth 3 points.
- ""d"" is worth 2 points.
- Etc.

Your mission, should you choose to accept it, is to transform the legacy data
format to the shiny new format.

### Notes

A final note about scoring, Scrabble is played around the world in a
variety of languages, each with its own unique scoring table. For
example, an ""E"" is scored at 2 in the Māori-language version of the
game while being scored at 4 in the Hawaiian-language version.
"
flatten-array,"{""exercise"": ""flatten-array"", ""version"": ""1.2.0"", ""cases"": [{""description"": ""no nesting"", ""property"": ""flatten"", ""input"": {""array"": [0, 1, 2]}, ""expected"": [0, 1, 2]}, {""description"": ""flattens array with just integers present"", ""property"": ""flatten"", ""input"": {""array"": [1, [2, 3, 4, 5, 6, 7], 8]}, ""expected"": [1, 2, 3, 4, 5, 6, 7, 8]}, {""description"": ""5 level nesting"", ""property"": ""flatten"", ""input"": {""array"": [0, 2, [[2, 3], 8, 100, 4, [[[50]]]], -2]}, ""expected"": [0, 2, 2, 3, 8, 100, 4, 50, -2]}, {""description"": ""6 level nesting"", ""property"": ""flatten"", ""input"": {""array"": [1, [2, [[3]], [4, [[5]]], 6, 7], 8]}, ""expected"": [1, 2, 3, 4, 5, 6, 7, 8]}, {""description"": ""6 level nest list with null values"", ""property"": ""flatten"", ""input"": {""array"": [0, 2, [[2, 3], 8, [[100]], null, [[null]]], -2]}, ""expected"": [0, 2, 2, 3, 8, 100, -2]}, {""description"": ""all values in nested list are null"", ""property"": ""flatten"", ""input"": {""array"": [null, [[[null]]], null, null, [[null, null], null], null]}, ""expected"": []}]}","Take a nested list and return a single flattened list with all values except nil/null.

The challenge is to write a function that accepts an arbitrarily-deep nested list-like structure and returns a flattened structure without any nil/null values.

For Example

input: [1,[2,3,null,4],[null],5]

output: [1,2,3,4,5]
"
food-chain,"{""exercise"": ""food-chain"", ""version"": ""2.1.0"", ""comments"": [""JSON doesn't allow for multi-line strings, so all verses are presented "", ""here as arrays of strings. It's up to the test generator to join the "", ""lines together with line breaks."", ""Some languages test for the verse() method, which takes a start verse "", ""and optional end verse, but other languages have only tested for the full poem."", ""For those languages in the latter category, you may wish to only "", ""implement the full song test and leave the rest alone, ignoring the start "", ""and end verse fields.""], ""cases"": [{""description"": ""Return specified verse or series of verses"", ""cases"": [{""description"": ""fly"", ""property"": ""recite"", ""input"": {""startVerse"": 1, ""endVerse"": 1}, ""expected"": [""I know an old lady who swallowed a fly."", ""I don't know why she swallowed the fly. Perhaps she'll die.""]}, {""description"": ""spider"", ""property"": ""recite"", ""input"": {""startVerse"": 2, ""endVerse"": 2}, ""expected"": [""I know an old lady who swallowed a spider."", ""It wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die.""]}, {""description"": ""bird"", ""property"": ""recite"", ""input"": {""startVerse"": 3, ""endVerse"": 3}, ""expected"": [""I know an old lady who swallowed a bird."", ""How absurd to swallow a bird!"", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die.""]}, {""description"": ""cat"", ""property"": ""recite"", ""input"": {""startVerse"": 4, ""endVerse"": 4}, ""expected"": [""I know an old lady who swallowed a cat."", ""Imagine that, to swallow a cat!"", ""She swallowed the cat to catch the bird."", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die.""]}, {""description"": ""dog"", ""property"": ""recite"", ""input"": {""startVerse"": 5, ""endVerse"": 5}, ""expected"": [""I know an old lady who swallowed a dog."", ""What a hog, to swallow a dog!"", ""She swallowed the dog to catch the cat."", ""She swallowed the cat to catch the bird."", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die.""]}, {""description"": ""goat"", ""property"": ""recite"", ""input"": {""startVerse"": 6, ""endVerse"": 6}, ""expected"": [""I know an old lady who swallowed a goat."", ""Just opened her throat and swallowed a goat!"", ""She swallowed the goat to catch the dog."", ""She swallowed the dog to catch the cat."", ""She swallowed the cat to catch the bird."", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die.""]}, {""description"": ""cow"", ""property"": ""recite"", ""input"": {""startVerse"": 7, ""endVerse"": 7}, ""expected"": [""I know an old lady who swallowed a cow."", ""I don't know how she swallowed a cow!"", ""She swallowed the cow to catch the goat."", ""She swallowed the goat to catch the dog."", ""She swallowed the dog to catch the cat."", ""She swallowed the cat to catch the bird."", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die.""]}, {""description"": ""horse"", ""property"": ""recite"", ""input"": {""startVerse"": 8, ""endVerse"": 8}, ""expected"": [""I know an old lady who swallowed a horse."", ""She's dead, of course!""]}, {""description"": ""multiple verses"", ""property"": ""recite"", ""input"": {""startVerse"": 1, ""endVerse"": 3}, ""expected"": [""I know an old lady who swallowed a fly."", ""I don't know why she swallowed the fly. Perhaps she'll die."", """", ""I know an old lady who swallowed a spider."", ""It wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die."", """", ""I know an old lady who swallowed a bird."", ""How absurd to swallow a bird!"", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die.""]}, {""description"": ""full song"", ""property"": ""recite"", ""input"": {""startVerse"": 1, ""endVerse"": 8}, ""expected"": [""I know an old lady who swallowed a fly."", ""I don't know why she swallowed the fly. Perhaps she'll die."", """", ""I know an old lady who swallowed a spider."", ""It wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die."", """", ""I know an old lady who swallowed a bird."", ""How absurd to swallow a bird!"", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die."", """", ""I know an old lady who swallowed a cat."", ""Imagine that, to swallow a cat!"", ""She swallowed the cat to catch the bird."", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die."", """", ""I know an old lady who swallowed a dog."", ""What a hog, to swallow a dog!"", ""She swallowed the dog to catch the cat."", ""She swallowed the cat to catch the bird."", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die."", """", ""I know an old lady who swallowed a goat."", ""Just opened her throat and swallowed a goat!"", ""She swallowed the goat to catch the dog."", ""She swallowed the dog to catch the cat."", ""She swallowed the cat to catch the bird."", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die."", """", ""I know an old lady who swallowed a cow."", ""I don't know how she swallowed a cow!"", ""She swallowed the cow to catch the goat."", ""She swallowed the goat to catch the dog."", ""She swallowed the dog to catch the cat."", ""She swallowed the cat to catch the bird."", ""She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."", ""She swallowed the spider to catch the fly."", ""I don't know why she swallowed the fly. Perhaps she'll die."", """", ""I know an old lady who swallowed a horse."", ""She's dead, of course!""]}]}]}","Generate the lyrics of the song 'I Know an Old Lady Who Swallowed a Fly'.

While you could copy/paste the lyrics,
or read them from a file, this problem is much more
interesting if you approach it algorithmically.

This is a [cumulative song](http://en.wikipedia.org/wiki/Cumulative_song) of unknown origin.

This is one of many common variants.

```text
I know an old lady who swallowed a fly.
I don't know why she swallowed the fly. Perhaps she'll die.

I know an old lady who swallowed a spider.
It wriggled and jiggled and tickled inside her.
She swallowed the spider to catch the fly.
I don't know why she swallowed the fly. Perhaps she'll die.

I know an old lady who swallowed a bird.
How absurd to swallow a bird!
She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.
She swallowed the spider to catch the fly.
I don't know why she swallowed the fly. Perhaps she'll die.

I know an old lady who swallowed a cat.
Imagine that, to swallow a cat!
She swallowed the cat to catch the bird.
She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.
She swallowed the spider to catch the fly.
I don't know why she swallowed the fly. Perhaps she'll die.

I know an old lady who swallowed a dog.
What a hog, to swallow a dog!
She swallowed the dog to catch the cat.
She swallowed the cat to catch the bird.
She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.
She swallowed the spider to catch the fly.
I don't know why she swallowed the fly. Perhaps she'll die.

I know an old lady who swallowed a goat.
Just opened her throat and swallowed a goat!
She swallowed the goat to catch the dog.
She swallowed the dog to catch the cat.
She swallowed the cat to catch the bird.
She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.
She swallowed the spider to catch the fly.
I don't know why she swallowed the fly. Perhaps she'll die.

I know an old lady who swallowed a cow.
I don't know how she swallowed a cow!
She swallowed the cow to catch the goat.
She swallowed the goat to catch the dog.
She swallowed the dog to catch the cat.
She swallowed the cat to catch the bird.
She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.
She swallowed the spider to catch the fly.
I don't know why she swallowed the fly. Perhaps she'll die.

I know an old lady who swallowed a horse.
She's dead, of course!
```
"
forth,"{""exercise"": ""forth"", ""version"": ""1.6.0"", ""comments"": [""The cases are split into multiple sections, all with the same structure."", ""In all cases, the `expected` key is the resulting stack"", ""after executing the Forth program contained in the `input` key.""], ""cases"": [{""description"": ""parsing and numbers"", ""cases"": [{""description"": ""numbers just get pushed onto the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 3 4 5""]}, ""expected"": [1, 2, 3, 4, 5]}]}, {""description"": ""addition"", ""cases"": [{""description"": ""can add two numbers"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 +""]}, ""expected"": [3]}, {""description"": ""errors if there is nothing on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""+""]}, ""expected"": null}, {""description"": ""errors if there is only one value on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 +""]}, ""expected"": null}]}, {""description"": ""subtraction"", ""cases"": [{""description"": ""can subtract two numbers"", ""property"": ""evaluate"", ""input"": {""instructions"": [""3 4 -""]}, ""expected"": [-1]}, {""description"": ""errors if there is nothing on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""-""]}, ""expected"": null}, {""description"": ""errors if there is only one value on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 -""]}, ""expected"": null}]}, {""description"": ""multiplication"", ""cases"": [{""description"": ""can multiply two numbers"", ""property"": ""evaluate"", ""input"": {""instructions"": [""2 4 *""]}, ""expected"": [8]}, {""description"": ""errors if there is nothing on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""*""]}, ""expected"": null}, {""description"": ""errors if there is only one value on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 *""]}, ""expected"": null}]}, {""description"": ""division"", ""cases"": [{""description"": ""can divide two numbers"", ""property"": ""evaluate"", ""input"": {""instructions"": [""12 3 /""]}, ""expected"": [4]}, {""description"": ""performs integer division"", ""property"": ""evaluate"", ""input"": {""instructions"": [""8 3 /""]}, ""expected"": [2]}, {""description"": ""errors if dividing by zero"", ""property"": ""evaluate"", ""input"": {""instructions"": [""4 0 /""]}, ""expected"": null}, {""description"": ""errors if there is nothing on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""/""]}, ""expected"": null}, {""description"": ""errors if there is only one value on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 /""]}, ""expected"": null}]}, {""description"": ""combined arithmetic"", ""cases"": [{""description"": ""addition and subtraction"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 + 4 -""]}, ""expected"": [-1]}, {""description"": ""multiplication and division"", ""property"": ""evaluate"", ""input"": {""instructions"": [""2 4 * 3 /""]}, ""expected"": [2]}]}, {""description"": ""dup"", ""cases"": [{""description"": ""copies a value on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 dup""]}, ""expected"": [1, 1]}, {""description"": ""copies the top value on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 dup""]}, ""expected"": [1, 2, 2]}, {""description"": ""errors if there is nothing on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""dup""]}, ""expected"": null}]}, {""description"": ""drop"", ""cases"": [{""description"": ""removes the top value on the stack if it is the only one"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 drop""]}, ""expected"": []}, {""description"": ""removes the top value on the stack if it is not the only one"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 drop""]}, ""expected"": [1]}, {""description"": ""errors if there is nothing on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""drop""]}, ""expected"": null}]}, {""description"": ""swap"", ""cases"": [{""description"": ""swaps the top two values on the stack if they are the only ones"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 swap""]}, ""expected"": [2, 1]}, {""description"": ""swaps the top two values on the stack if they are not the only ones"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 3 swap""]}, ""expected"": [1, 3, 2]}, {""description"": ""errors if there is nothing on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""swap""]}, ""expected"": null}, {""description"": ""errors if there is only one value on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 swap""]}, ""expected"": null}]}, {""description"": ""over"", ""cases"": [{""description"": ""copies the second element if there are only two"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 over""]}, ""expected"": [1, 2, 1]}, {""description"": ""copies the second element if there are more than two"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 3 over""]}, ""expected"": [1, 2, 3, 2]}, {""description"": ""errors if there is nothing on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""over""]}, ""expected"": null}, {""description"": ""errors if there is only one value on the stack"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 over""]}, ""expected"": null}]}, {""description"": ""user-defined words"", ""cases"": [{""description"": ""can consist of built-in words"", ""property"": ""evaluate"", ""input"": {""instructions"": ["": dup-twice dup dup ;"", ""1 dup-twice""]}, ""expected"": [1, 1, 1]}, {""description"": ""execute in the right order"", ""property"": ""evaluate"", ""input"": {""instructions"": ["": countup 1 2 3 ;"", ""countup""]}, ""expected"": [1, 2, 3]}, {""description"": ""can override other user-defined words"", ""property"": ""evaluate"", ""input"": {""instructions"": ["": foo dup ;"", "": foo dup dup ;"", ""1 foo""]}, ""expected"": [1, 1, 1]}, {""description"": ""can override built-in words"", ""property"": ""evaluate"", ""input"": {""instructions"": ["": swap dup ;"", ""1 swap""]}, ""expected"": [1, 1]}, {""description"": ""can override built-in operators"", ""property"": ""evaluate"", ""input"": {""instructions"": ["": + * ;"", ""3 4 +""]}, ""expected"": [12]}, {""description"": ""can use different words with the same name"", ""property"": ""evaluate"", ""input"": {""instructions"": ["": foo 5 ;"", "": bar foo ;"", "": foo 6 ;"", ""bar foo""]}, ""expected"": [5, 6]}, {""description"": ""can define word that uses word with the same name"", ""property"": ""evaluate"", ""input"": {""instructions"": ["": foo 10 ;"", "": foo foo 1 + ;"", ""foo""]}, ""expected"": [11]}, {""description"": ""cannot redefine numbers"", ""property"": ""evaluate"", ""input"": {""instructions"": ["": 1 2 ;""]}, ""expected"": null}, {""description"": ""errors if executing a non-existent word"", ""property"": ""evaluate"", ""input"": {""instructions"": [""foo""]}, ""expected"": null}]}, {""description"": ""case-insensitivity"", ""cases"": [{""description"": ""DUP is case-insensitive"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 DUP Dup dup""]}, ""expected"": [1, 1, 1, 1]}, {""description"": ""DROP is case-insensitive"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 3 4 DROP Drop drop""]}, ""expected"": [1]}, {""description"": ""SWAP is case-insensitive"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 SWAP 3 Swap 4 swap""]}, ""expected"": [2, 3, 4, 1]}, {""description"": ""OVER is case-insensitive"", ""property"": ""evaluate"", ""input"": {""instructions"": [""1 2 OVER Over over""]}, ""expected"": [1, 2, 1, 2, 1]}, {""description"": ""user-defined words are case-insensitive"", ""property"": ""evaluate"", ""input"": {""instructions"": ["": foo dup ;"", ""1 FOO Foo foo""]}, ""expected"": [1, 1, 1, 1]}, {""description"": ""definitions are case-insensitive"", ""property"": ""evaluate"", ""input"": {""instructions"": ["": SWAP DUP Dup dup ;"", ""1 swap""]}, ""expected"": [1, 1, 1, 1]}]}]}","Implement an evaluator for a very simple subset of Forth.

[Forth](https://en.wikipedia.org/wiki/Forth_%28programming_language%29)
is a stack-based programming language. Implement a very basic evaluator
for a small subset of Forth.

Your evaluator has to support the following words:

- `+`, `-`, `*`, `/` (integer arithmetic)
- `DUP`, `DROP`, `SWAP`, `OVER` (stack manipulation)

Your evaluator also has to support defining new words using the
customary syntax: `: word-name definition ;`.

To keep things simple the only data type you need to support is signed
integers of at least 16 bits size.

You should use the following rules for the syntax: a number is a
sequence of one or more (ASCII) digits, a word is a sequence of one or
more letters, digits, symbols or punctuation that is not a number.
(Forth probably uses slightly different rules, but this is close
enough.)

Words are case-insensitive.
"
gigasecond,"{""exercise"": ""gigasecond"", ""version"": ""1.1.0"", ""comments"": [""The basic test is to add one gigasecond to a few ordinary dates."", ""Most test programs currently check only the date and ignore the time."", ""For languages with a native date-time type though, expected times"", ""here show the correct seconds, ignoring leap seconds."", ""The date and time formats here are per"", ""http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15."", """", ""Finally, as a demonstration but not really a test,"", ""some languages demonstrate the add function by inviting the"", ""solver to include their birthdate in either the solution code"", ""or test program.  The test program then shows or tests their"", ""gigasecond anniversary.""], ""cases"": [{""description"": ""Add one gigasecond to the input."", ""cases"": [{""description"": ""date only specification of time"", ""property"": ""add"", ""input"": {""birthdate"": ""2011-04-25""}, ""expected"": ""2043-01-01T01:46:40""}, {""description"": ""second test for date only specification of time"", ""property"": ""add"", ""input"": {""birthdate"": ""1977-06-13""}, ""expected"": ""2009-02-19T01:46:40""}, {""description"": ""third test for date only specification of time"", ""property"": ""add"", ""input"": {""birthdate"": ""1959-07-19""}, ""expected"": ""1991-03-27T01:46:40""}, {""description"": ""full time specified"", ""property"": ""add"", ""input"": {""birthdate"": ""2015-01-24T22:00:00""}, ""expected"": ""2046-10-02T23:46:40""}, {""description"": ""full time with day roll-over"", ""property"": ""add"", ""input"": {""birthdate"": ""2015-01-24T23:59:59""}, ""expected"": ""2046-10-03T01:46:39""}]}]}","Calculate the moment when someone has lived for 10^9 seconds.

A gigasecond is 10^9 (1,000,000,000) seconds.
"
go-counting,"{""exercise"": ""go-counting"", ""version"": ""1.0.0"", ""comments"": [""Territory consists of [x, y] coordinate pairs.""], ""cases"": [{""description"": ""Black corner territory on 5x5 board"", ""property"": ""territory"", ""input"": {""board"": [""  B  "", "" B B "", ""B W B"", "" W W "", ""  W  ""], ""x"": 0, ""y"": 1}, ""expected"": {""owner"": ""BLACK"", ""territory"": [[0, 0], [0, 1], [1, 0]]}}, {""description"": ""White center territory on 5x5 board"", ""property"": ""territory"", ""input"": {""board"": [""  B  "", "" B B "", ""B W B"", "" W W "", ""  W  ""], ""x"": 2, ""y"": 3}, ""expected"": {""owner"": ""WHITE"", ""territory"": [[2, 3]]}}, {""description"": ""Open corner territory on 5x5 board"", ""property"": ""territory"", ""input"": {""board"": [""  B  "", "" B B "", ""B W B"", "" W W "", ""  W  ""], ""x"": 1, ""y"": 4}, ""expected"": {""owner"": ""NONE"", ""territory"": [[0, 3], [0, 4], [1, 4]]}}, {""description"": ""A stone and not a territory on 5x5 board"", ""property"": ""territory"", ""input"": {""board"": [""  B  "", "" B B "", ""B W B"", "" W W "", ""  W  ""], ""x"": 1, ""y"": 1}, ""expected"": {""owner"": ""NONE"", ""territory"": []}}, {""description"": ""Invalid because X is too low for 5x5 board"", ""property"": ""territory"", ""input"": {""board"": [""  B  "", "" B B "", ""B W B"", "" W W "", ""  W  ""], ""x"": -1, ""y"": 1}, ""expected"": {""error"": ""Invalid coordinate""}}, {""description"": ""Invalid because X is too high for 5x5 board"", ""property"": ""territory"", ""input"": {""board"": [""  B  "", "" B B "", ""B W B"", "" W W "", ""  W  ""], ""x"": 5, ""y"": 1}, ""expected"": {""error"": ""Invalid coordinate""}}, {""description"": ""Invalid because Y is too low for 5x5 board"", ""property"": ""territory"", ""input"": {""board"": [""  B  "", "" B B "", ""B W B"", "" W W "", ""  W  ""], ""x"": 1, ""y"": -1}, ""expected"": {""error"": ""Invalid coordinate""}}, {""description"": ""Invalid because Y is too high for 5x5 board"", ""property"": ""territory"", ""input"": {""board"": [""  B  "", "" B B "", ""B W B"", "" W W "", ""  W  ""], ""x"": 1, ""y"": 5}, ""expected"": {""error"": ""Invalid coordinate""}}, {""description"": ""One territory is the whole board"", ""property"": ""territories"", ""input"": {""board"": ["" ""]}, ""expected"": {""territoryBlack"": [], ""territoryWhite"": [], ""territoryNone"": [[0, 0]]}}, {""description"": ""Two territory rectangular board"", ""property"": ""territories"", ""input"": {""board"": ["" BW "", "" BW ""]}, ""expected"": {""territoryBlack"": [[0, 0], [0, 1]], ""territoryWhite"": [[3, 0], [3, 1]], ""territoryNone"": []}}, {""description"": ""Two region rectangular board"", ""property"": ""territories"", ""input"": {""board"": ["" B ""]}, ""expected"": {""territoryBlack"": [[0, 0], [2, 0]], ""territoryWhite"": [], ""territoryNone"": []}}]}","Count the scored points on a Go board.

In the game of go (also known as baduk, igo, cờ vây and wéiqí) points
are gained by completely encircling empty intersections with your
stones. The encircled intersections of a player are known as its
territory.

Write a function that determines the territory of each player. You may
assume that any stones that have been stranded in enemy territory have
already been taken off the board.

Write a function that determines the territory which includes a specified coordinate.

Multiple empty intersections may be encircled at once and for encircling
only horizontal and vertical neighbours count. In the following diagram
the stones which matter are marked ""O"" and the stones that don't are
marked ""I"" (ignored).  Empty spaces represent empty intersections.

```text
+----+
|IOOI|
|O  O|
|O OI|
|IOI |
+----+
```

To be more precise an empty intersection is part of a player's territory
if all of its neighbours are either stones of that player or empty
intersections that are part of that player's territory.

For more information see
[wikipedia](https://en.wikipedia.org/wiki/Go_%28game%29) or [Sensei's
Library](http://senseis.xmp.net/).
"
grade-school,"{""exercise"": ""grade-school"", ""version"": ""1.0.0"", ""comments"": [""Given students' names along with the grade that they are in, "", ""create a roster for the school.""], ""cases"": [{""description"": ""Adding a student adds them to the sorted roster"", ""property"": ""roster"", ""input"": {""students"": [[""Aimee"", 2]]}, ""expected"": [""Aimee""]}, {""description"": ""Adding more student adds them to the sorted roster"", ""property"": ""roster"", ""input"": {""students"": [[""Blair"", 2], [""James"", 2], [""Paul"", 2]]}, ""expected"": [""Blair"", ""James"", ""Paul""]}, {""description"": ""Adding students to different grades adds them to the same sorted roster"", ""property"": ""roster"", ""input"": {""students"": [[""Chelsea"", 3], [""Logan"", 7]]}, ""expected"": [""Chelsea"", ""Logan""]}, {""description"": ""Roster returns an empty list if there are no students enrolled"", ""property"": ""roster"", ""input"": {""students"": []}, ""expected"": []}, {""description"": ""Student names with grades are displayed in the same sorted roster"", ""property"": ""roster"", ""input"": {""students"": [[""Peter"", 2], [""Anna"", 1], [""Barb"", 1], [""Zoe"", 2], [""Alex"", 2], [""Jim"", 3], [""Charlie"", 1]]}, ""expected"": [""Anna"", ""Barb"", ""Charlie"", ""Alex"", ""Peter"", ""Zoe"", ""Jim""]}, {""description"": ""Grade returns the students in that grade in alphabetical order"", ""property"": ""grade"", ""input"": {""students"": [[""Franklin"", 5], [""Bradley"", 5], [""Jeff"", 1]], ""desiredGrade"": 5}, ""expected"": [""Bradley"", ""Franklin""]}, {""description"": ""Grade returns an empty list if there are no students in that grade"", ""property"": ""grade"", ""input"": {""students"": [], ""desiredGrade"": 1}, ""expected"": []}]}","Given students' names along with the grade that they are in, create a roster
for the school.

In the end, you should be able to:

- Add a student's name to the roster for a grade
  - ""Add Jim to grade 2.""
  - ""OK.""
- Get a list of all students enrolled in a grade
  - ""Which students are in grade 2?""
  - ""We've only got Jim just now.""
- Get a sorted list of all students in all grades.  Grades should sort
  as 1, 2, 3, etc., and students within a grade should be sorted
  alphabetically by name.
  - ""Who all is enrolled in school right now?""
  - ""Grade 1: Anna, Barb, and Charlie. Grade 2: Alex, Peter, and Zoe.
    Grade 3…""

Note that all our students only have one name.  (It's a small town, what
do you want?)

## For bonus points

Did you get the tests passing and the code clean? If you want to, these
are some additional things you could try:

- If you're working in a language with mutable data structures and your
  implementation allows outside code to mutate the school's internal DB
  directly, see if you can prevent this. Feel free to introduce additional
  tests.

Then please share your thoughts in a comment on the submission. Did this
experiment make the code better? Worse? Did you learn anything from it?
"
grains,"{""exercise"": ""grains"", ""version"": ""1.1.0"", ""comments"": [""The final tests of square test error conditions"", ""The expectation for these tests is -1, indicating an error"", ""In these cases you should expect an error as is idiomatic for your language""], ""cases"": [{""description"": ""returns the number of grains on the square"", ""cases"": [{""description"": ""1"", ""property"": ""square"", ""input"": {""square"": 1}, ""expected"": 1}, {""description"": ""2"", ""property"": ""square"", ""input"": {""square"": 2}, ""expected"": 2}, {""description"": ""3"", ""property"": ""square"", ""input"": {""square"": 3}, ""expected"": 4}, {""description"": ""4"", ""property"": ""square"", ""input"": {""square"": 4}, ""expected"": 8}, {""description"": ""16"", ""property"": ""square"", ""input"": {""square"": 16}, ""expected"": 32768}, {""description"": ""32"", ""property"": ""square"", ""input"": {""square"": 32}, ""expected"": 2147483648}, {""description"": ""64"", ""property"": ""square"", ""input"": {""square"": 64}, ""expected"": 9223372036854775808}, {""description"": ""square 0 raises an exception"", ""property"": ""square"", ""input"": {""square"": 0}, ""expected"": -1}, {""description"": ""negative square raises an exception"", ""property"": ""square"", ""input"": {""square"": -1}, ""expected"": -1}, {""description"": ""square greater than 64 raises an exception"", ""property"": ""square"", ""input"": {""square"": 65}, ""expected"": -1}]}, {""description"": ""returns the total number of grains on the board"", ""property"": ""total"", ""input"": {}, ""expected"": 18446744073709551615}]}","Calculate the number of grains of wheat on a chessboard given that the number
on each square doubles.

There once was a wise servant who saved the life of a prince. The king
promised to pay whatever the servant could dream up. Knowing that the
king loved chess, the servant told the king he would like to have grains
of wheat. One grain on the first square of a chess board. Two grains on
the next. Four on the third, and so on.

There are 64 squares on a chessboard.

Write code that shows:
- how many grains were on each square, and
- the total number of grains

## For bonus points

Did you get the tests passing and the code clean? If you want to, these
are some additional things you could try:

- Optimize for speed.
- Optimize for readability.

Then please share your thoughts in a comment on the submission. Did this
experiment make the code better? Worse? Did you learn anything from it?
"
grep,"{""exercise"": ""grep"", ""version"": ""1.1.0"", ""comments"": ["" JSON doesn't allow for multi-line strings, so all   "", "" outputs are presented here as arrays of strings.    "", "" It's up to the test generator to join the lines     "", "" together with line breaks.                          "", ""                                                     "", "" The tests are divided into two groups:              "", ""  - Grepping a single file                           "", ""  - Grepping multiple files at once                  "", ""                                                     "", "" The language track implementing this exercise       "", "" should ensure that when the tests run, three files  "", "" are created with the following contents. The file   "", "" names and their contents are listed below:          "", ""                                                     "", "" iliad.txt                                           "", ""   ---------------------------------------------     "", ""   |Achilles sing, O Goddess! Peleus' son;     |     "", ""   |His wrath pernicious, who ten thousand woes|     "", ""   |Caused to Achaia's host, sent many a soul  |     "", ""   |Illustrious into Ades premature,           |     "", ""   |And Heroes gave (so stood the will of Jove)|     "", ""   |To dogs and to all ravening fowls a prey,  |     "", ""   |When fierce dispute had separated once     |     "", ""   |The noble Chief Achilles from the son      |     "", ""   |Of Atreus, Agamemnon, King of men.         |     "", ""   ---------------------------------------------     "", ""                                                     "", "" midsummer-night.txt                                 "", ""   -----------------------------------------------   "", ""   |I do entreat your grace to pardon me.        |   "", ""   |I know not by what power I am made bold,     |   "", ""   |Nor how it may concern my modesty,           |   "", ""   |In such a presence here to plead my thoughts;|   "", ""   |But I beseech your grace that I may know     |   "", ""   |The worst that may befall me in this case,   |   "", ""   |If I refuse to wed Demetrius.                |   "", ""   -----------------------------------------------   "", ""                                                     "", "" paradise-lost.txt                                   "", ""   ------------------------------------------------- "", ""   |Of Mans First Disobedience, and the Fruit      | "", ""   |Of that Forbidden Tree, whose mortal tast      | "", ""   |Brought Death into the World, and all our woe, | "", ""   |With loss of Eden, till one greater Man        | "", ""   |Restore us, and regain the blissful Seat,      | "", ""   |Sing Heav'nly Muse, that on the secret top     | "", ""   |Of Oreb, or of Sinai, didst inspire            | "", ""   |That Shepherd, who first taught the chosen Seed| "", ""   ------------------------------------------------- ""], ""cases"": [{""description"": ""Test grepping a single file"", ""cases"": [{""description"": ""One file, one match, no flags"", ""property"": ""grep"", ""input"": {""pattern"": ""Agamemnon"", ""flags"": [], ""files"": [""iliad.txt""]}, ""expected"": [""Of Atreus, Agamemnon, King of men.""]}, {""description"": ""One file, one match, print line numbers flag"", ""property"": ""grep"", ""input"": {""pattern"": ""Forbidden"", ""flags"": [""-n""], ""files"": [""paradise-lost.txt""]}, ""expected"": [""2:Of that Forbidden Tree, whose mortal tast""]}, {""description"": ""One file, one match, case-insensitive flag"", ""property"": ""grep"", ""input"": {""pattern"": ""FORBIDDEN"", ""flags"": [""-i""], ""files"": [""paradise-lost.txt""]}, ""expected"": [""Of that Forbidden Tree, whose mortal tast""]}, {""description"": ""One file, one match, print file names flag"", ""property"": ""grep"", ""input"": {""pattern"": ""Forbidden"", ""flags"": [""-l""], ""files"": [""paradise-lost.txt""]}, ""expected"": [""paradise-lost.txt""]}, {""description"": ""One file, one match, match entire lines flag"", ""property"": ""grep"", ""input"": {""pattern"": ""With loss of Eden, till one greater Man"", ""flags"": [""-x""], ""files"": [""paradise-lost.txt""]}, ""expected"": [""With loss of Eden, till one greater Man""]}, {""description"": ""One file, one match, multiple flags"", ""property"": ""grep"", ""input"": {""pattern"": ""OF ATREUS, Agamemnon, KIng of MEN."", ""flags"": [""-n"", ""-i"", ""-x""], ""files"": [""iliad.txt""]}, ""expected"": [""9:Of Atreus, Agamemnon, King of men.""]}, {""description"": ""One file, several matches, no flags"", ""property"": ""grep"", ""input"": {""pattern"": ""may"", ""flags"": [], ""files"": [""midsummer-night.txt""]}, ""expected"": [""Nor how it may concern my modesty,"", ""But I beseech your grace that I may know"", ""The worst that may befall me in this case,""]}, {""description"": ""One file, several matches, print line numbers flag"", ""property"": ""grep"", ""input"": {""pattern"": ""may"", ""flags"": [""-n""], ""files"": [""midsummer-night.txt""]}, ""expected"": [""3:Nor how it may concern my modesty,"", ""5:But I beseech your grace that I may know"", ""6:The worst that may befall me in this case,""]}, {""description"": ""One file, several matches, match entire lines flag"", ""property"": ""grep"", ""input"": {""pattern"": ""may"", ""flags"": [""-x""], ""files"": [""midsummer-night.txt""]}, ""expected"": []}, {""description"": ""One file, several matches, case-insensitive flag"", ""property"": ""grep"", ""input"": {""pattern"": ""ACHILLES"", ""flags"": [""-i""], ""files"": [""iliad.txt""]}, ""expected"": [""Achilles sing, O Goddess! Peleus' son;"", ""The noble Chief Achilles from the son""]}, {""description"": ""One file, several matches, inverted flag"", ""property"": ""grep"", ""input"": {""pattern"": ""Of"", ""flags"": [""-v""], ""files"": [""paradise-lost.txt""]}, ""expected"": [""Brought Death into the World, and all our woe,"", ""With loss of Eden, till one greater Man"", ""Restore us, and regain the blissful Seat,"", ""Sing Heav'nly Muse, that on the secret top"", ""That Shepherd, who first taught the chosen Seed""]}, {""description"": ""One file, no matches, various flags"", ""property"": ""grep"", ""input"": {""pattern"": ""Gandalf"", ""flags"": [""-n"", ""-l"", ""-x"", ""-i""], ""files"": [""iliad.txt""]}, ""expected"": []}]}, {""description"": ""Test grepping multiples files at once"", ""cases"": [{""description"": ""Multiple files, one match, no flags"", ""property"": ""grep"", ""input"": {""pattern"": ""Agamemnon"", ""flags"": [], ""files"": [""iliad.txt"", ""midsummer-night.txt"", ""paradise-lost.txt""]}, ""expected"": [""iliad.txt:Of Atreus, Agamemnon, King of men.""]}, {""description"": ""Multiple files, several matches, no flags"", ""property"": ""grep"", ""input"": {""pattern"": ""may"", ""flags"": [], ""files"": [""iliad.txt"", ""midsummer-night.txt"", ""paradise-lost.txt""]}, ""expected"": [""midsummer-night.txt:Nor how it may concern my modesty,"", ""midsummer-night.txt:But I beseech your grace that I may know"", ""midsummer-night.txt:The worst that may befall me in this case,""]}, {""description"": ""Multiple files, several matches, print line numbers flag"", ""property"": ""grep"", ""input"": {""pattern"": ""that"", ""flags"": [""-n""], ""files"": [""iliad.txt"", ""midsummer-night.txt"", ""paradise-lost.txt""]}, ""expected"": [""midsummer-night.txt:5:But I beseech your grace that I may know"", ""midsummer-night.txt:6:The worst that may befall me in this case,"", ""paradise-lost.txt:2:Of that Forbidden Tree, whose mortal tast"", ""paradise-lost.txt:6:Sing Heav'nly Muse, that on the secret top""]}, {""description"": ""Multiple files, one match, print file names flag"", ""property"": ""grep"", ""input"": {""pattern"": ""who"", ""flags"": [""-l""], ""files"": [""iliad.txt"", ""midsummer-night.txt"", ""paradise-lost.txt""]}, ""expected"": [""iliad.txt"", ""paradise-lost.txt""]}, {""description"": ""Multiple files, several matches, case-insensitive flag"", ""property"": ""grep"", ""input"": {""pattern"": ""TO"", ""flags"": [""-i""], ""files"": [""iliad.txt"", ""midsummer-night.txt"", ""paradise-lost.txt""]}, ""expected"": [""iliad.txt:Caused to Achaia's host, sent many a soul"", ""iliad.txt:Illustrious into Ades premature,"", ""iliad.txt:And Heroes gave (so stood the will of Jove)"", ""iliad.txt:To dogs and to all ravening fowls a prey,"", ""midsummer-night.txt:I do entreat your grace to pardon me."", ""midsummer-night.txt:In such a presence here to plead my thoughts;"", ""midsummer-night.txt:If I refuse to wed Demetrius."", ""paradise-lost.txt:Brought Death into the World, and all our woe,"", ""paradise-lost.txt:Restore us, and regain the blissful Seat,"", ""paradise-lost.txt:Sing Heav'nly Muse, that on the secret top""]}, {""description"": ""Multiple files, several matches, inverted flag"", ""property"": ""grep"", ""input"": {""pattern"": ""a"", ""flags"": [""-v""], ""files"": [""iliad.txt"", ""midsummer-night.txt"", ""paradise-lost.txt""]}, ""expected"": [""iliad.txt:Achilles sing, O Goddess! Peleus' son;"", ""iliad.txt:The noble Chief Achilles from the son"", ""midsummer-night.txt:If I refuse to wed Demetrius.""]}, {""description"": ""Multiple files, one match, match entire lines flag"", ""property"": ""grep"", ""input"": {""pattern"": ""But I beseech your grace that I may know"", ""flags"": [""-x""], ""files"": [""iliad.txt"", ""midsummer-night.txt"", ""paradise-lost.txt""]}, ""expected"": [""midsummer-night.txt:But I beseech your grace that I may know""]}, {""description"": ""Multiple files, one match, multiple flags"", ""property"": ""grep"", ""input"": {""pattern"": ""WITH LOSS OF EDEN, TILL ONE GREATER MAN"", ""flags"": [""-n"", ""-i"", ""-x""], ""files"": [""iliad.txt"", ""midsummer-night.txt"", ""paradise-lost.txt""]}, ""expected"": [""paradise-lost.txt:4:With loss of Eden, till one greater Man""]}, {""description"": ""Multiple files, no matches, various flags"", ""property"": ""grep"", ""input"": {""pattern"": ""Frodo"", ""flags"": [""-n"", ""-l"", ""-x"", ""-i""], ""files"": [""iliad.txt"", ""midsummer-night.txt"", ""paradise-lost.txt""]}, ""expected"": []}]}]}","Search a file for lines matching a regular expression pattern. Return the line
number and contents of each matching line.

The Unix [`grep`](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/grep.html) command can be used to search for lines in one or more files
that match a user-provided search query (known as the *pattern*).

The `grep` command takes three arguments:

1. The pattern used to match lines in a file.
2. Zero or more flags to customize the matching behavior.
3. One or more files in which to search for matching lines.

Your task is to implement the `grep` function, which should read the contents
of the specified files, find the lines that match the specified pattern
and then output those lines as a single string. Note that the lines should
be output in the order in which they were found, with the first matching line
in the first file being output first.

As an example, suppose there is a file named ""input.txt"" with the following contents:

```text
hello
world
hello again
```

If we were to call `grep ""hello"" input.txt`, the returned string should be:

```text
hello
hello again
```

### Flags

As said earlier, the `grep` command should also support the following flags:

- `-n` Print the line numbers of each matching line.
- `-l` Print only the names of files that contain at least one matching line.
- `-i` Match line using a case-insensitive comparison.
- `-v` Invert the program -- collect all lines that fail to match the pattern.
- `-x` Only match entire lines, instead of lines that contain a match.

If we run `grep -n ""hello"" input.txt`, the `-n` flag will require the matching
lines to be prefixed with its line number:

```text
1:hello
3:hello again
```

And if we run `grep -i ""HELLO"" input.txt`, we'll do a case-insensitive match,
and the output will be:

```text
hello
hello again
```

The `grep` command should support multiple flags at once.

For example, running `grep -l -v ""hello"" file1.txt file2.txt` should
print the names of files that do not contain the string ""hello"".
"
hamming,"{""exercise"": ""hamming"", ""version"": ""2.1.0"", ""comments"": [""Language implementations vary on the issue of unequal length strands."", ""A language may elect to simplify this task by only presenting equal"", ""length test cases.  For languages handling unequal length strands as"", ""error condition, unequal length test cases are included here and are"", ""indicated with an expected value of -1.  Note however that -1 is"", ""simply an indication here in the JSON.  Actually returning -1 from"", ""a hamming distance function may or may not be idiomatic in a language."", ""Language idioms of errors or exceptions should be followed."", ""Alternative interpretations such as ignoring excess length at the end"", ""are not represented here.""], ""cases"": [{""description"": ""empty strands"", ""property"": ""distance"", ""input"": {""strand1"": """", ""strand2"": """"}, ""expected"": 0}, {""description"": ""identical strands"", ""property"": ""distance"", ""input"": {""strand1"": ""A"", ""strand2"": ""A""}, ""expected"": 0}, {""description"": ""long identical strands"", ""property"": ""distance"", ""input"": {""strand1"": ""GGACTGA"", ""strand2"": ""GGACTGA""}, ""expected"": 0}, {""description"": ""complete distance in single nucleotide strands"", ""property"": ""distance"", ""input"": {""strand1"": ""A"", ""strand2"": ""G""}, ""expected"": 1}, {""description"": ""complete distance in small strands"", ""property"": ""distance"", ""input"": {""strand1"": ""AG"", ""strand2"": ""CT""}, ""expected"": 2}, {""description"": ""small distance in small strands"", ""property"": ""distance"", ""input"": {""strand1"": ""AT"", ""strand2"": ""CT""}, ""expected"": 1}, {""description"": ""small distance"", ""property"": ""distance"", ""input"": {""strand1"": ""GGACG"", ""strand2"": ""GGTCG""}, ""expected"": 1}, {""description"": ""small distance in long strands"", ""property"": ""distance"", ""input"": {""strand1"": ""ACCAGGG"", ""strand2"": ""ACTATGG""}, ""expected"": 2}, {""description"": ""non-unique character in first strand"", ""property"": ""distance"", ""input"": {""strand1"": ""AAG"", ""strand2"": ""AAA""}, ""expected"": 1}, {""description"": ""non-unique character in second strand"", ""property"": ""distance"", ""input"": {""strand1"": ""AAA"", ""strand2"": ""AAG""}, ""expected"": 1}, {""description"": ""same nucleotides in different positions"", ""property"": ""distance"", ""input"": {""strand1"": ""TAG"", ""strand2"": ""GAT""}, ""expected"": 2}, {""description"": ""large distance"", ""property"": ""distance"", ""input"": {""strand1"": ""GATACA"", ""strand2"": ""GCATAA""}, ""expected"": 4}, {""description"": ""large distance in off-by-one strand"", ""property"": ""distance"", ""input"": {""strand1"": ""GGACGGATTCTG"", ""strand2"": ""AGGACGGATTCT""}, ""expected"": 9}, {""description"": ""disallow first strand longer"", ""property"": ""distance"", ""input"": {""strand1"": ""AATG"", ""strand2"": ""AAA""}, ""expected"": {""error"": ""left and right strands must be of equal length""}}, {""description"": ""disallow second strand longer"", ""property"": ""distance"", ""input"": {""strand1"": ""ATA"", ""strand2"": ""AGTG""}, ""expected"": {""error"": ""left and right strands must be of equal length""}}]}","Calculate the Hamming difference between two DNA strands.

A mutation is simply a mistake that occurs during the creation or
copying of a nucleic acid, in particular DNA. Because nucleic acids are
vital to cellular functions, mutations tend to cause a ripple effect
throughout the cell. Although mutations are technically mistakes, a very
rare mutation may equip the cell with a beneficial attribute. In fact,
the macro effects of evolution are attributable by the accumulated
result of beneficial microscopic mutations over many generations.

The simplest and most common type of nucleic acid mutation is a point
mutation, which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands
taken from different genomes with a common ancestor, we get a measure of
the minimum number of point mutations that could have occurred on the
evolutionary path between the two strands.

This is called the 'Hamming distance'.

It is found by comparing two DNA strands and counting how many of the
nucleotides are different from their equivalent in the other string.

    GAGCCTACTAACGGGAT
    CATCGTAATGACGGCCT
    ^ ^ ^  ^ ^    ^^

The Hamming distance between these two DNA strands is 7.

# Implementation notes

The Hamming distance is only defined for sequences of equal length, so
an attempt to calculate it between sequences of different lengths should
not work. The general handling of this situation (e.g., raising an
exception vs returning a special value) may differ between languages.
"
hangman,{},"Implement the logic of the hangman game using functional reactive programming.

[Hangman][] is a simple word guessing game.

[Functional Reactive Programming][frp] is a way to write interactive
programs. It differs from the usual perspective in that instead of
saying ""when the button is pressed increment the counter"", you write
""the value of the counter is the sum of the number of times the button
is pressed.""

Implement the basic logic behind hangman using functional reactive
programming.  You'll need to install an FRP library for this, this will
be described in the language/track specific files of the exercise.

[Hangman]: https://en.wikipedia.org/wiki/Hangman_%28game%29
[frp]: https://en.wikipedia.org/wiki/Functional_reactive_programming
"
hello-world,"{""exercise"": ""hello-world"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""Say Hi!"", ""property"": ""hello"", ""input"": {}, ""expected"": ""Hello, World!""}]}","The classical introductory exercise. Just say ""Hello, World!"".

[""Hello, World!""](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string ""Hello, World!"".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.
"
hexadecimal,{},"Convert a hexadecimal number, represented as a string (e.g. ""10af8c""), to its decimal equivalent using first principles (i.e. no, you may not use built-in or external libraries to accomplish the conversion).

On the web we use hexadecimal to represent colors, e.g. green: 008000,
teal: 008080, navy: 000080).

The program should handle invalid hexadecimal strings.
"
house,"{""exercise"": ""house"", ""version"": ""2.2.0"", ""comments"": [""JSON doesn't allow for multi-line strings, so all verses are presented "", ""here as arrays of strings. It's up to the test generator to join the "", ""lines together with line breaks."", ""Some languages test for the verse() method, which takes a start verse "", ""and optional end verse, but other languages have only tested for the full poem."", ""For those languages in the latter category, you may wish to only "", ""implement the full song test and leave the rest alone, ignoring the startVerse "", ""and endVerse fields.""], ""cases"": [{""description"": ""Return specified verse or series of verses"", ""cases"": [{""description"": ""verse one - the house that jack built"", ""property"": ""recite"", ""input"": {""startVerse"": 1, ""endVerse"": 1}, ""expected"": [""This is the house that Jack built.""]}, {""description"": ""verse two - the malt that lay"", ""property"": ""recite"", ""input"": {""startVerse"": 2, ""endVerse"": 2}, ""expected"": [""This is the malt that lay in the house that Jack built.""]}, {""description"": ""verse three - the rat that ate"", ""property"": ""recite"", ""input"": {""startVerse"": 3, ""endVerse"": 3}, ""expected"": [""This is the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""verse four - the cat that killed"", ""property"": ""recite"", ""input"": {""startVerse"": 4, ""endVerse"": 4}, ""expected"": [""This is the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""verse five - the dog that worried"", ""property"": ""recite"", ""input"": {""startVerse"": 5, ""endVerse"": 5}, ""expected"": [""This is the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""verse six - the cow with the crumpled horn"", ""property"": ""recite"", ""input"": {""startVerse"": 6, ""endVerse"": 6}, ""expected"": [""This is the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""verse seven - the maiden all forlorn"", ""property"": ""recite"", ""input"": {""startVerse"": 7, ""endVerse"": 7}, ""expected"": [""This is the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""verse eight - the man all tattered and torn"", ""property"": ""recite"", ""input"": {""startVerse"": 8, ""endVerse"": 8}, ""expected"": [""This is the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""verse nine - the priest all shaven and shorn"", ""property"": ""recite"", ""input"": {""startVerse"": 9, ""endVerse"": 9}, ""expected"": [""This is the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""verse 10 - the rooster that crowed in the morn"", ""property"": ""recite"", ""input"": {""startVerse"": 10, ""endVerse"": 10}, ""expected"": [""This is the rooster that crowed in the morn that woke the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""verse 11 - the farmer sowing his corn"", ""property"": ""recite"", ""input"": {""startVerse"": 11, ""endVerse"": 11}, ""expected"": [""This is the farmer sowing his corn that kept the rooster that crowed in the morn that woke the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""verse 12 - the horse and the hound and the horn"", ""property"": ""recite"", ""input"": {""startVerse"": 12, ""endVerse"": 12}, ""expected"": [""This is the horse and the hound and the horn that belonged to the farmer sowing his corn that kept the rooster that crowed in the morn that woke the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""multiple verses"", ""property"": ""recite"", ""input"": {""startVerse"": 4, ""endVerse"": 8}, ""expected"": [""This is the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}, {""description"": ""full rhyme"", ""property"": ""recite"", ""input"": {""startVerse"": 1, ""endVerse"": 12}, ""expected"": [""This is the house that Jack built."", ""This is the malt that lay in the house that Jack built."", ""This is the rat that ate the malt that lay in the house that Jack built."", ""This is the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the rooster that crowed in the morn that woke the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the farmer sowing his corn that kept the rooster that crowed in the morn that woke the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built."", ""This is the horse and the hound and the horn that belonged to the farmer sowing his corn that kept the rooster that crowed in the morn that woke the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.""]}]}]}","Recite the nursery rhyme 'This is the House that Jack Built'.

> [The] process of placing a phrase of clause within another phrase of
> clause is called embedding. It is through the processes of recursion
> and embedding that we are able to take a finite number of forms (words
> and phrases) and construct an infinite number of expressions.
> Furthermore, embedding also allows us to construct an infinitely long
> structure, in theory anyway.

- [papyr.com](http://papyr.com/hypertextbooks/grammar/ph_noun.htm)

The nursery rhyme reads as follows:

```text
This is the house that Jack built.

This is the malt
that lay in the house that Jack built.

This is the rat
that ate the malt
that lay in the house that Jack built.

This is the cat
that killed the rat
that ate the malt
that lay in the house that Jack built.

This is the dog
that worried the cat
that killed the rat
that ate the malt
that lay in the house that Jack built.

This is the cow with the crumpled horn
that tossed the dog
that worried the cat
that killed the rat
that ate the malt
that lay in the house that Jack built.

This is the maiden all forlorn
that milked the cow with the crumpled horn
that tossed the dog
that worried the cat
that killed the rat
that ate the malt
that lay in the house that Jack built.

This is the man all tattered and torn
that kissed the maiden all forlorn
that milked the cow with the crumpled horn
that tossed the dog
that worried the cat
that killed the rat
that ate the malt
that lay in the house that Jack built.

This is the priest all shaven and shorn
that married the man all tattered and torn
that kissed the maiden all forlorn
that milked the cow with the crumpled horn
that tossed the dog
that worried the cat
that killed the rat
that ate the malt
that lay in the house that Jack built.

This is the rooster that crowed in the morn
that woke the priest all shaven and shorn
that married the man all tattered and torn
that kissed the maiden all forlorn
that milked the cow with the crumpled horn
that tossed the dog
that worried the cat
that killed the rat
that ate the malt
that lay in the house that Jack built.

This is the farmer sowing his corn
that kept the rooster that crowed in the morn
that woke the priest all shaven and shorn
that married the man all tattered and torn
that kissed the maiden all forlorn
that milked the cow with the crumpled horn
that tossed the dog
that worried the cat
that killed the rat
that ate the malt
that lay in the house that Jack built.

This is the horse and the hound and the horn
that belonged to the farmer sowing his corn
that kept the rooster that crowed in the morn
that woke the priest all shaven and shorn
that married the man all tattered and torn
that kissed the maiden all forlorn
that milked the cow with the crumpled horn
that tossed the dog
that worried the cat
that killed the rat
that ate the malt
that lay in the house that Jack built.
```
"
isbn-verifier,"{""exercise"": ""isbn-verifier"", ""version"": ""2.7.0"", ""comments"": [""An expected value of true indicates a valid ISBN-10, "", ""whereas false means the ISBN-10 is invalid.""], ""cases"": [{""description"": ""valid isbn number"", ""property"": ""isValid"", ""input"": {""isbn"": ""3-598-21508-8""}, ""expected"": true}, {""description"": ""invalid isbn check digit"", ""property"": ""isValid"", ""input"": {""isbn"": ""3-598-21508-9""}, ""expected"": false}, {""description"": ""valid isbn number with a check digit of 10"", ""property"": ""isValid"", ""input"": {""isbn"": ""3-598-21507-X""}, ""expected"": true}, {""description"": ""check digit is a character other than X"", ""property"": ""isValid"", ""input"": {""isbn"": ""3-598-21507-A""}, ""expected"": false}, {""description"": ""invalid character in isbn"", ""property"": ""isValid"", ""input"": {""isbn"": ""3-598-P1581-X""}, ""expected"": false}, {""description"": ""X is only valid as a check digit"", ""property"": ""isValid"", ""input"": {""isbn"": ""3-598-2X507-9""}, ""expected"": false}, {""description"": ""valid isbn without separating dashes"", ""property"": ""isValid"", ""input"": {""isbn"": ""3598215088""}, ""expected"": true}, {""description"": ""isbn without separating dashes and X as check digit"", ""property"": ""isValid"", ""input"": {""isbn"": ""359821507X""}, ""expected"": true}, {""description"": ""isbn without check digit and dashes"", ""property"": ""isValid"", ""input"": {""isbn"": ""359821507""}, ""expected"": false}, {""description"": ""too long isbn and no dashes"", ""property"": ""isValid"", ""input"": {""isbn"": ""3598215078X""}, ""expected"": false}, {""description"": ""too short isbn"", ""property"": ""isValid"", ""input"": {""isbn"": ""00""}, ""expected"": false}, {""description"": ""isbn without check digit"", ""property"": ""isValid"", ""input"": {""isbn"": ""3-598-21507""}, ""expected"": false}, {""description"": ""check digit of X should not be used for 0"", ""property"": ""isValid"", ""input"": {""isbn"": ""3-598-21515-X""}, ""expected"": false}, {""description"": ""empty isbn"", ""property"": ""isValid"", ""input"": {""isbn"": """"}, ""expected"": false}, {""description"": ""input is 9 characters"", ""property"": ""isValid"", ""input"": {""isbn"": ""134456729""}, ""expected"": false}, {""description"": ""invalid characters are not ignored"", ""property"": ""isValid"", ""input"": {""isbn"": ""3132P34035""}, ""expected"": false}, {""description"": ""input is too long but contains a valid isbn"", ""property"": ""isValid"", ""input"": {""isbn"": ""98245726788""}, ""expected"": false}]}","The [ISBN-10 verification process](https://en.wikipedia.org/wiki/International_Standard_Book_Number) is used to validate book identification
numbers. These normally contain dashes and look like: `3-598-21508-8`

## ISBN

The ISBN-10 format is 9 digits (0 to 9) plus one check character (either a digit or an X only). In the case the check character is an X, this represents the value '10'. These may be communicated with or without hyphens, and can be checked for their validity by the following formula:

```
(x1 * 10 + x2 * 9 + x3 * 8 + x4 * 7 + x5 * 6 + x6 * 5 + x7 * 4 + x8 * 3 + x9 * 2 + x10 * 1) mod 11 == 0
```

If the result is 0, then it is a valid ISBN-10, otherwise it is invalid.

## Example

Let's take the ISBN-10 `3-598-21508-8`. We plug it in to the formula, and get:
```
(3 * 10 + 5 * 9 + 9 * 8 + 8 * 7 + 2 * 6 + 1 * 5 + 5 * 4 + 0 * 3 + 8 * 2 + 8 * 1) mod 11 == 0
```

Since the result is 0, this proves that our ISBN is valid.

## Task

Given a string the program should check if the provided string is a valid ISBN-10.
Putting this into place requires some thinking about preprocessing/parsing of the string prior to calculating the check digit for the ISBN.

The program should be able to verify ISBN-10 both with and without separating dashes.


## Caveats

Converting from strings to numbers can be tricky in certain languages.
Now, it's even trickier since the check digit of an ISBN-10 may be 'X' (representing '10'). For instance `3-598-21507-X` is a valid ISBN-10.

## Bonus tasks

* Generate a valid ISBN-13 from the input ISBN-10 (and maybe verify it again with a derived verifier).

* Generate valid ISBN, maybe even from a given starting ISBN."
isogram,"{""exercise"": ""isogram"", ""comments"": [""An isogram is a word or phrase without a repeating letter.""], ""version"": ""1.6.0"", ""cases"": [{""description"": ""Check if the given string is an isogram"", ""comments"": [""Output should be a boolean denoting if the string is a isogram or not.""], ""cases"": [{""description"": ""empty string"", ""property"": ""isIsogram"", ""input"": {""phrase"": """"}, ""expected"": true}, {""description"": ""isogram with only lower case characters"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""isogram""}, ""expected"": true}, {""description"": ""word with one duplicated character"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""eleven""}, ""expected"": false}, {""description"": ""word with one duplicated character from the end of the alphabet"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""zzyzx""}, ""expected"": false}, {""description"": ""longest reported english isogram"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""subdermatoglyphic""}, ""expected"": true}, {""description"": ""word with duplicated character in mixed case"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""Alphabet""}, ""expected"": false}, {""description"": ""word with duplicated character in mixed case, lowercase first"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""alphAbet""}, ""expected"": false}, {""description"": ""hypothetical isogrammic word with hyphen"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""thumbscrew-japingly""}, ""expected"": true}, {""description"": ""isogram with duplicated hyphen"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""six-year-old""}, ""expected"": true}, {""description"": ""made-up name that is an isogram"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""Emily Jung Schwartzkopf""}, ""expected"": true}, {""description"": ""duplicated character in the middle"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""accentor""}, ""expected"": false}, {""description"": ""same first and last characters"", ""property"": ""isIsogram"", ""input"": {""phrase"": ""angola""}, ""expected"": false}]}]}","Determine if a word or phrase is an isogram.

An isogram (also known as a ""nonpattern word"") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times.

Examples of isograms:

- lumberjacks
- background
- downstream
- six-year-old

The word *isograms*, however, is not an isogram, because the s repeats.
"
kindergarten-garden,"{""exercise"": ""kindergarten-garden"", ""version"": ""1.1.1"", ""cases"": [{""description"": ""partial garden"", ""cases"": [{""description"": ""garden with single student"", ""property"": ""plants"", ""input"": {""diagram"": ""RC\nGG"", ""student"": ""Alice""}, ""expected"": [""radishes"", ""clover"", ""grass"", ""grass""]}, {""description"": ""different garden with single student"", ""property"": ""plants"", ""input"": {""diagram"": ""VC\nRC"", ""student"": ""Alice""}, ""expected"": [""violets"", ""clover"", ""radishes"", ""clover""]}, {""description"": ""garden with two students"", ""property"": ""plants"", ""input"": {""diagram"": ""VVCG\nVVRC"", ""student"": ""Bob""}, ""expected"": [""clover"", ""grass"", ""radishes"", ""clover""]}, {""description"": ""multiple students for the same garden with three students"", ""cases"": [{""description"": ""second student's garden"", ""property"": ""plants"", ""input"": {""diagram"": ""VVCCGG\nVVCCGG"", ""student"": ""Bob""}, ""expected"": [""clover"", ""clover"", ""clover"", ""clover""]}, {""description"": ""third student's garden"", ""property"": ""plants"", ""input"": {""diagram"": ""VVCCGG\nVVCCGG"", ""student"": ""Charlie""}, ""expected"": [""grass"", ""grass"", ""grass"", ""grass""]}]}]}, {""description"": ""full garden"", ""cases"": [{""description"": ""first student's garden"", ""property"": ""plants"", ""input"": {""diagram"": ""VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV"", ""student"": ""Alice""}, ""expected"": [""violets"", ""radishes"", ""violets"", ""radishes""]}, {""description"": ""second student's garden"", ""property"": ""plants"", ""input"": {""diagram"": ""VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV"", ""student"": ""Bob""}, ""expected"": [""clover"", ""grass"", ""clover"", ""clover""]}, {""description"": ""second to last student's garden"", ""property"": ""plants"", ""input"": {""diagram"": ""VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV"", ""student"": ""Kincaid""}, ""expected"": [""grass"", ""clover"", ""clover"", ""grass""]}, {""description"": ""last student's garden"", ""property"": ""plants"", ""input"": {""diagram"": ""VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV"", ""student"": ""Larry""}, ""expected"": [""grass"", ""violets"", ""clover"", ""violets""]}]}]}","Given a diagram, determine which plants each child in the kindergarten class is
responsible for.

The kindergarten class is learning about growing plants. The teacher
thought it would be a good idea to give them actual seeds, plant them in
actual dirt, and grow actual plants.

They've chosen to grow grass, clover, radishes, and violets.

To this end, the children have put little cups along the window sills, and
planted one type of plant in each cup, choosing randomly from the available
types of seeds.

```text
[window][window][window]
........................ # each dot represents a cup
........................
```

There are 12 children in the class:

- Alice, Bob, Charlie, David,
- Eve, Fred, Ginny, Harriet,
- Ileana, Joseph, Kincaid, and Larry.

Each child gets 4 cups, two on each row. Their teacher assigns cups to
the children alphabetically by their names.

The following diagram represents Alice's plants:

```text
[window][window][window]
VR......................
RG......................
```

In the first row, nearest the windows, she has a violet and a radish.  In the
second row she has a radish and some grass.

Your program will be given the plants from left-to-right starting with
the row nearest the windows. From this, it should be able to determine
which plants belong to each student.

For example, if it's told that the garden looks like so:

```text
[window][window][window]
VRCGVVRVCGGCCGVRGCVCGCGV
VRCCCGCRRGVCGCRVVCVGCGCV
```

Then if asked for Alice's plants, it should provide:

- Violets, radishes, violets, radishes

While asking for Bob's plants would yield:

- Clover, grass, clover, clover
"
largest-series-product,"{""exercise"": ""largest-series-product"", ""version"": ""1.1.0"", ""comments"": [""A negative expected value means the input is invalid."", ""Different languages may handle this differently."", ""e.g. raise exceptions, return (int, error), return Option<int>, etc."", ""Some languages specifically test the string->digits conversion"", ""and the 'slices of size N' operation."", ""These cases *deliberately* do not cover those two operations."", ""Those are implementation details."", ""Testing them constrains implementations,"", ""and not all implementations use these operations."", ""e.g. The implementation which makes a single pass through the digits.""], ""cases"": [{""description"": ""finds the largest product if span equals length"", ""property"": ""largestProduct"", ""input"": {""digits"": ""29"", ""span"": 2}, ""expected"": 18}, {""description"": ""can find the largest product of 2 with numbers in order"", ""property"": ""largestProduct"", ""input"": {""digits"": ""0123456789"", ""span"": 2}, ""expected"": 72}, {""description"": ""can find the largest product of 2"", ""property"": ""largestProduct"", ""input"": {""digits"": ""576802143"", ""span"": 2}, ""expected"": 48}, {""description"": ""can find the largest product of 3 with numbers in order"", ""property"": ""largestProduct"", ""input"": {""digits"": ""0123456789"", ""span"": 3}, ""expected"": 504}, {""description"": ""can find the largest product of 3"", ""property"": ""largestProduct"", ""input"": {""digits"": ""1027839564"", ""span"": 3}, ""expected"": 270}, {""description"": ""can find the largest product of 5 with numbers in order"", ""property"": ""largestProduct"", ""input"": {""digits"": ""0123456789"", ""span"": 5}, ""expected"": 15120}, {""description"": ""can get the largest product of a big number"", ""property"": ""largestProduct"", ""input"": {""digits"": ""73167176531330624919225119674426574742355349194934"", ""span"": 6}, ""expected"": 23520}, {""description"": ""reports zero if the only digits are zero"", ""property"": ""largestProduct"", ""input"": {""digits"": ""0000"", ""span"": 2}, ""expected"": 0}, {""description"": ""reports zero if all spans include zero"", ""property"": ""largestProduct"", ""input"": {""digits"": ""99099"", ""span"": 3}, ""expected"": 0}, {""description"": ""rejects span longer than string length"", ""property"": ""largestProduct"", ""input"": {""digits"": ""123"", ""span"": 4}, ""expected"": -1}, {""comments"": [""There may be some confusion about whether this should be 1 or error."", ""The reasoning for it being 1 is this:"", ""There is one 0-character string contained in the empty string."", ""That's the empty string itself."", ""The empty product is 1 (the identity for multiplication)."", ""Therefore LSP('', 0) is 1."", ""It's NOT the case that LSP('', 0) takes max of an empty list."", ""So there is no error."", ""Compare against LSP('123', 4):"", ""There are zero 4-character strings in '123'."", ""So LSP('123', 4) really DOES take the max of an empty list."", ""So LSP('123', 4) errors and LSP('', 0) does NOT.""], ""description"": ""reports 1 for empty string and empty product (0 span)"", ""property"": ""largestProduct"", ""input"": {""digits"": """", ""span"": 0}, ""expected"": 1}, {""comments"": [""As above, there is one 0-character string in '123'."", ""So again no error. It's the empty product, 1.""], ""description"": ""reports 1 for nonempty string and empty product (0 span)"", ""property"": ""largestProduct"", ""input"": {""digits"": ""123"", ""span"": 0}, ""expected"": 1}, {""description"": ""rejects empty string and nonzero span"", ""property"": ""largestProduct"", ""input"": {""digits"": """", ""span"": 1}, ""expected"": -1}, {""description"": ""rejects invalid character in digits"", ""property"": ""largestProduct"", ""input"": {""digits"": ""1234a5"", ""span"": 2}, ""expected"": -1}, {""description"": ""rejects negative span"", ""property"": ""largestProduct"", ""input"": {""digits"": ""12345"", ""span"": -1}, ""expected"": -1}]}","Given a string of digits, calculate the largest product for a contiguous
substring of digits of length n.

For example, for the input `'1027839564'`, the largest product for a
series of 3 digits is 270 (9 * 5 * 6), and the largest product for a
series of 5 digits is 7560 (7 * 8 * 3 * 9 * 5).

Note that these series are only required to occupy *adjacent positions*
in the input; the digits need not be *numerically consecutive*.

For the input `'73167176531330624919225119674426574742355349194934'`,
the largest product for a series of 6 digits is 23520.
"
leap,"{""exercise"": ""leap"", ""version"": ""1.3.0"", ""cases"": [{""description"": ""year not divisible by 4: common year"", ""property"": ""leapYear"", ""input"": {""year"": 2015}, ""expected"": false}, {""description"": ""year divisible by 4, not divisible by 100: leap year"", ""property"": ""leapYear"", ""input"": {""year"": 1996}, ""expected"": true}, {""description"": ""year divisible by 100, not divisible by 400: common year"", ""property"": ""leapYear"", ""input"": {""year"": 2100}, ""expected"": false}, {""description"": ""year divisible by 400: leap year"", ""property"": ""leapYear"", ""input"": {""year"": 2000}, ""expected"": true}]}","Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

```text
on every year that is evenly divisible by 4
  except every year that is evenly divisible by 100
    unless the year is also evenly divisible by 400
```

For example, 1997 is not a leap year, but 1996 is.  1900 is not a leap
year, but 2000 is.

If your language provides a method in the standard library that does
this look-up, pretend it doesn't exist and implement it yourself.

## Notes

Though our exercise adopts some very simple rules, there is more to
learn!

For a delightful, four minute explanation of the whole leap year
phenomenon, go watch [this youtube video][video].

[video]: http://www.youtube.com/watch?v=xX96xng7sAE
"
ledger,{},"Refactor a ledger printer.

The ledger exercise is a refactoring exercise. There is code that prints a
nicely formatted ledger, given a locale (American or Dutch) and a currency (US
dollar or euro). The code however is rather badly written, though (somewhat
surprisingly) it consistently passes the test suite.

Rewrite this code. Remember that in refactoring the trick is to make small steps
that keep the tests passing. That way you can always quickly go back to a
working version.  Version control tools like git can help here as well.

Please keep a log of what changes you've made and make a comment on the exercise
containing that log, this will help reviewers.
"
lens-person,{},"Use lenses to update nested records (specific to languages with immutable data).

Updating fields of nested records is kind of annoying in Haskell. One solution
is to use [lenses](https://wiki.haskell.org/Lens).  Implement several record
accessing functions using lenses, you may use any library you want. The test
suite also allows you to avoid lenses altogether so you can experiment with
different approaches.
"
linked-list,{},"Implement a doubly linked list.

Like an array, a linked list is a simple linear data structure. Several
common data types can be implemented using linked lists, like queues,
stacks, and associative arrays.

A linked list is a collection of data elements called *nodes*. In a
*singly linked list* each node holds a value and a link to the next node.
In a *doubly linked list* each node also holds a link to the previous
node.

You will write an implementation of a doubly linked list. Implement a
Node to hold a value and pointers to the next and previous nodes. Then
implement a List which holds references to the first and last node and
offers an array-like interface for adding and removing items:

* `push` (*insert value at back*);
* `pop` (*remove value at back*);
* `shift` (*remove value at front*).
* `unshift` (*insert value at front*);

To keep your implementation simple, the tests will not cover error
conditions. Specifically: `pop` or `shift` will never be called on an
empty list.

If you want to know more about linked lists, check [Wikipedia](https://en.wikipedia.org/wiki/Linked_list).
"
list-ops,"{""exercise"": ""list-ops"", ""version"": ""2.3.0"", ""comments"": [""Though there are no specifications here for dealing with large lists,"", ""implementers may add tests for handling large lists to ensure that the"", ""solutions have thought about performance concerns.""], ""cases"": [{""description"": ""append entries to a list and return the new list"", ""cases"": [{""description"": ""empty lists"", ""property"": ""append"", ""input"": {""list1"": [], ""list2"": []}, ""expected"": []}, {""description"": ""empty list to list"", ""property"": ""append"", ""input"": {""list1"": [], ""list2"": [1, 2, 3, 4]}, ""expected"": [1, 2, 3, 4]}, {""description"": ""non-empty lists"", ""property"": ""append"", ""input"": {""list1"": [1, 2], ""list2"": [2, 3, 4, 5]}, ""expected"": [1, 2, 2, 3, 4, 5]}]}, {""description"": ""concatenate a list of lists"", ""cases"": [{""description"": ""empty list"", ""property"": ""concat"", ""input"": {""lists"": []}, ""expected"": []}, {""description"": ""list of lists"", ""property"": ""concat"", ""input"": {""lists"": [[1, 2], [3], [], [4, 5, 6]]}, ""expected"": [1, 2, 3, 4, 5, 6]}, {""description"": ""list of nested lists"", ""property"": ""concat"", ""input"": {""lists"": [[[1], [2]], [[3]], [[]], [[4, 5, 6]]]}, ""expected"": [[1], [2], [3], [], [4, 5, 6]]}]}, {""description"": ""filter list returning only values that satisfy the filter function"", ""cases"": [{""description"": ""empty list"", ""property"": ""filter"", ""input"": {""list"": [], ""function"": ""(x) -> x modulo 2 == 1""}, ""expected"": []}, {""description"": ""non-empty list"", ""property"": ""filter"", ""input"": {""list"": [1, 2, 3, 5], ""function"": ""(x) -> x modulo 2 == 1""}, ""expected"": [1, 3, 5]}]}, {""description"": ""returns the length of a list"", ""cases"": [{""description"": ""empty list"", ""property"": ""length"", ""input"": {""list"": []}, ""expected"": 0}, {""description"": ""non-empty list"", ""property"": ""length"", ""input"": {""list"": [1, 2, 3, 4]}, ""expected"": 4}]}, {""description"": ""return a list of elements whose values equal the list value transformed by the mapping function"", ""cases"": [{""description"": ""empty list"", ""property"": ""map"", ""input"": {""list"": [], ""function"": ""(x) -> x + 1""}, ""expected"": []}, {""description"": ""non-empty list"", ""property"": ""map"", ""input"": {""list"": [1, 3, 5, 7], ""function"": ""(x) -> x + 1""}, ""expected"": [2, 4, 6, 8]}]}, {""description"": ""folds (reduces) the given list from the left with a function"", ""cases"": [{""description"": ""empty list"", ""property"": ""foldl"", ""input"": {""list"": [], ""initial"": 2, ""function"": ""(x, y) -> x * y""}, ""expected"": 2}, {""description"": ""direction independent function applied to non-empty list"", ""property"": ""foldl"", ""input"": {""list"": [1, 2, 3, 4], ""initial"": 5, ""function"": ""(x, y) -> x + y""}, ""expected"": 15}, {""description"": ""direction dependent function applied to non-empty list"", ""property"": ""foldl"", ""input"": {""list"": [2, 5], ""initial"": 5, ""function"": ""(x, y) -> x / y""}, ""expected"": 0}]}, {""description"": ""folds (reduces) the given list from the right with a function"", ""cases"": [{""description"": ""empty list"", ""property"": ""foldr"", ""input"": {""list"": [], ""initial"": 2, ""function"": ""(x, y) -> x * y""}, ""expected"": 2}, {""description"": ""direction independent function applied to non-empty list"", ""property"": ""foldr"", ""input"": {""list"": [1, 2, 3, 4], ""initial"": 5, ""function"": ""(x, y) -> x + y""}, ""expected"": 15}, {""description"": ""direction dependent function applied to non-empty list"", ""property"": ""foldr"", ""input"": {""list"": [2, 5], ""initial"": 5, ""function"": ""(x, y) -> x / y""}, ""expected"": 2}]}, {""description"": ""reverse the elements of the list"", ""cases"": [{""description"": ""empty list"", ""property"": ""reverse"", ""input"": {""list"": []}, ""expected"": []}, {""description"": ""non-empty list"", ""property"": ""reverse"", ""input"": {""list"": [1, 3, 5, 7]}, ""expected"": [7, 5, 3, 1]}]}]}","Implement basic list operations.

In functional languages list operations like `length`, `map`, and
`reduce` are very common. Implement a series of basic list operations,
without using existing functions.
"
luhn,"{""exercise"": ""luhn"", ""version"": ""1.2.0"", ""cases"": [{""description"": ""single digit strings can not be valid"", ""property"": ""valid"", ""input"": {""value"": ""1""}, ""expected"": false}, {""description"": ""a single zero is invalid"", ""property"": ""valid"", ""input"": {""value"": ""0""}, ""expected"": false}, {""description"": ""a simple valid SIN that remains valid if reversed"", ""property"": ""valid"", ""input"": {""value"": ""059""}, ""expected"": true}, {""description"": ""a simple valid SIN that becomes invalid if reversed"", ""property"": ""valid"", ""input"": {""value"": ""59""}, ""expected"": true}, {""description"": ""a valid Canadian SIN"", ""property"": ""valid"", ""input"": {""value"": ""055 444 285""}, ""expected"": true}, {""description"": ""invalid Canadian SIN"", ""property"": ""valid"", ""input"": {""value"": ""055 444 286""}, ""expected"": false}, {""description"": ""invalid credit card"", ""property"": ""valid"", ""input"": {""value"": ""8273 1232 7352 0569""}, ""expected"": false}, {""description"": ""valid strings with a non-digit included become invalid"", ""property"": ""valid"", ""input"": {""value"": ""055a 444 285""}, ""expected"": false}, {""description"": ""valid strings with punctuation included become invalid"", ""property"": ""valid"", ""input"": {""value"": ""055-444-285""}, ""expected"": false}, {""description"": ""valid strings with symbols included become invalid"", ""property"": ""valid"", ""input"": {""value"": ""055\u00a3 444$ 285""}, ""expected"": false}, {""description"": ""single zero with space is invalid"", ""property"": ""valid"", ""input"": {""value"": "" 0""}, ""expected"": false}, {""description"": ""more than a single zero is valid"", ""property"": ""valid"", ""input"": {""value"": ""0000 0""}, ""expected"": true}, {""description"": ""input digit 9 is correctly converted to output digit 9"", ""property"": ""valid"", ""input"": {""value"": ""091""}, ""expected"": true}, {""description"": ""strings with non-digits is invalid"", ""property"": ""valid"", ""input"": {""value"": "":9""}, ""expected"": false}]}","Given a number determine whether or not it is valid per the Luhn formula.

The [Luhn algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm) is
a simple checksum formula used to validate a variety of identification
numbers, such as credit card numbers and Canadian Social Insurance
Numbers.

The task is to check if a given string is valid.

Validating a Number
------

Strings of length 1 or less are not valid. Spaces are allowed in the input,
but they should be stripped before checking. All other non-digit characters
are disallowed.

## Example 1: valid credit card number

```text
4539 1488 0343 6467
```

The first step of the Luhn algorithm is to double every second digit,
starting from the right. We will be doubling

```text
4_3_ 1_8_ 0_4_ 6_6_
```

If doubling the number results in a number greater than 9 then subtract 9
from the product. The results of our doubling:

```text
8569 2478 0383 3437
```

Then sum all of the digits:

```text
8+5+6+9+2+4+7+8+0+3+8+3+3+4+3+7 = 80
```

If the sum is evenly divisible by 10, then the number is valid. This number is valid!

## Example 2: invalid credit card number

```text
8273 1232 7352 0569
```

Double the second digits, starting from the right

```text
7253 2262 5312 0539
```

Sum the digits

```text
7+2+5+3+2+2+6+2+5+3+1+2+0+5+3+9 = 57
```

57 is not evenly divisible by 10, so this number is not valid.
"
markdown,"{""exercise"": ""markdown"", ""version"": ""1.3.0"", ""comments"": [""Markdown is a shorthand for creating HTML from text strings.""], ""cases"": [{""description"": ""parses normal text as a paragraph"", ""property"": ""parse"", ""input"": {""markdown"": ""This will be a paragraph""}, ""expected"": ""<p>This will be a paragraph</p>""}, {""description"": ""parsing italics"", ""property"": ""parse"", ""input"": {""markdown"": ""_This will be italic_""}, ""expected"": ""<p><em>This will be italic</em></p>""}, {""description"": ""parsing bold text"", ""property"": ""parse"", ""input"": {""markdown"": ""__This will be bold__""}, ""expected"": ""<p><strong>This will be bold</strong></p>""}, {""description"": ""mixed normal, italics and bold text"", ""property"": ""parse"", ""input"": {""markdown"": ""This will _be_ __mixed__""}, ""expected"": ""<p>This will <em>be</em> <strong>mixed</strong></p>""}, {""description"": ""with h1 header level"", ""property"": ""parse"", ""input"": {""markdown"": ""# This will be an h1""}, ""expected"": ""<h1>This will be an h1</h1>""}, {""description"": ""with h2 header level"", ""property"": ""parse"", ""input"": {""markdown"": ""## This will be an h2""}, ""expected"": ""<h2>This will be an h2</h2>""}, {""description"": ""with h6 header level"", ""property"": ""parse"", ""input"": {""markdown"": ""###### This will be an h6""}, ""expected"": ""<h6>This will be an h6</h6>""}, {""description"": ""unordered lists"", ""property"": ""parse"", ""input"": {""markdown"": ""* Item 1\n* Item 2""}, ""expected"": ""<ul><li>Item 1</li><li>Item 2</li></ul>""}, {""description"": ""With a little bit of everything"", ""property"": ""parse"", ""input"": {""markdown"": ""# Header!\n* __Bold Item__\n* _Italic Item_""}, ""expected"": ""<h1>Header!</h1><ul><li><strong>Bold Item</strong></li><li><em>Italic Item</em></li></ul>""}, {""description"": ""with markdown symbols in the header text that should not be interpreted"", ""property"": ""parse"", ""input"": {""markdown"": ""# This is a header with # and * in the text""}, ""expected"": ""<h1>This is a header with # and * in the text</h1>""}, {""description"": ""with markdown symbols in the list item text that should not be interpreted"", ""property"": ""parse"", ""input"": {""markdown"": ""* Item 1 with a # in the text\n* Item 2 with * in the text""}, ""expected"": ""<ul><li>Item 1 with a # in the text</li><li>Item 2 with * in the text</li></ul>""}, {""description"": ""with markdown symbols in the paragraph text that should not be interpreted"", ""property"": ""parse"", ""input"": {""markdown"": ""This is a paragraph with # and * in the text""}, ""expected"": ""<p>This is a paragraph with # and * in the text</p>""}]}","Refactor a Markdown parser.

The markdown exercise is a refactoring exercise. There is code that parses a
given string with [Markdown
syntax](https://guides.github.com/features/mastering-markdown/) and returns the
associated HTML for that string. Even though this code is confusingly written
and hard to follow, somehow it works and all the tests are passing! Your
challenge is to re-write this code to make it easier to read and maintain
while still making sure that all the tests keep passing.

It would be helpful if you made notes of what you did in your refactoring in
comments so reviewers can see that, but it isn't strictly necessary. The most
important thing is to make the code better!
"
matrix,"{""exercise"": ""matrix"", ""version"": ""1.0.0"", ""cases"": [{""description"": ""extract row from one number matrix"", ""property"": ""row"", ""input"": {""string"": ""1"", ""index"": 0}, ""expected"": [1]}, {""description"": ""can extract row"", ""property"": ""row"", ""input"": {""string"": ""1 2\n3 4"", ""index"": 1}, ""expected"": [3, 4]}, {""description"": ""extract row where numbers have different widths"", ""property"": ""row"", ""input"": {""string"": ""1 2\n10 20"", ""index"": 1}, ""expected"": [10, 20]}, {""description"": ""can extract row from non-square matrix"", ""property"": ""row"", ""input"": {""string"": ""1 2 3\n4 5 6\n7 8 9\n8 7 6"", ""index"": 2}, ""expected"": [7, 8, 9]}, {""description"": ""extract column from one number matrix"", ""property"": ""column"", ""input"": {""string"": ""1"", ""index"": 0}, ""expected"": [1]}, {""description"": ""can extract column"", ""property"": ""column"", ""input"": {""string"": ""1 2 3\n4 5 6\n7 8 9"", ""index"": 2}, ""expected"": [3, 6, 9]}, {""description"": ""can extract column from non-square matrix"", ""property"": ""column"", ""input"": {""string"": ""1 2 3\n4 5 6\n7 8 9\n8 7 6"", ""index"": 2}, ""expected"": [3, 6, 9, 6]}, {""description"": ""extract column where numbers have different widths"", ""property"": ""column"", ""input"": {""string"": ""89 1903 3\n18 3 1\n9 4 800"", ""index"": 1}, ""expected"": [1903, 3, 4]}]}","Given a string representing a matrix of numbers, return the rows and columns of
that matrix.

So given a string with embedded newlines like:

```text
9 8 7
5 3 2
6 6 7
```

representing this matrix:

```text
    0  1  2
  |---------
0 | 9  8  7
1 | 5  3  2
2 | 6  6  7
```

your code should be able to spit out:

- A list of the rows, reading each row left-to-right while moving
  top-to-bottom across the rows,
- A list of the columns, reading each column top-to-bottom while moving
  from left-to-right.

The rows for our example matrix:

- 9, 8, 7
- 5, 3, 2
- 6, 6, 7

And its columns:

- 9, 5, 6
- 8, 3, 6
- 7, 2, 7
"
meetup,"{""exercise"": ""meetup"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""monteenth of May 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 5, ""week"": ""teenth"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-05-13""}, {""description"": ""monteenth of August 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 8, ""week"": ""teenth"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-08-19""}, {""description"": ""monteenth of September 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 9, ""week"": ""teenth"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-09-16""}, {""description"": ""tuesteenth of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""teenth"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-03-19""}, {""description"": ""tuesteenth of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""teenth"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-04-16""}, {""description"": ""tuesteenth of August 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 8, ""week"": ""teenth"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-08-13""}, {""description"": ""wednesteenth of January 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 1, ""week"": ""teenth"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-01-16""}, {""description"": ""wednesteenth of February 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 2, ""week"": ""teenth"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-02-13""}, {""description"": ""wednesteenth of June 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 6, ""week"": ""teenth"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-06-19""}, {""description"": ""thursteenth of May 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 5, ""week"": ""teenth"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-05-16""}, {""description"": ""thursteenth of June 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 6, ""week"": ""teenth"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-06-13""}, {""description"": ""thursteenth of September 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 9, ""week"": ""teenth"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-09-19""}, {""description"": ""friteenth of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""teenth"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-04-19""}, {""description"": ""friteenth of August 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 8, ""week"": ""teenth"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-08-16""}, {""description"": ""friteenth of September 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 9, ""week"": ""teenth"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-09-13""}, {""description"": ""saturteenth of February 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 2, ""week"": ""teenth"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-02-16""}, {""description"": ""saturteenth of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""teenth"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-04-13""}, {""description"": ""saturteenth of October 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 10, ""week"": ""teenth"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-10-19""}, {""description"": ""sunteenth of May 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 5, ""week"": ""teenth"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-05-19""}, {""description"": ""sunteenth of June 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 6, ""week"": ""teenth"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-06-16""}, {""description"": ""sunteenth of October 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 10, ""week"": ""teenth"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-10-13""}, {""description"": ""first Monday of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""first"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-03-04""}, {""description"": ""first Monday of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""first"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-04-01""}, {""description"": ""first Tuesday of May 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 5, ""week"": ""first"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-05-07""}, {""description"": ""first Tuesday of June 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 6, ""week"": ""first"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-06-04""}, {""description"": ""first Wednesday of July 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 7, ""week"": ""first"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-07-03""}, {""description"": ""first Wednesday of August 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 8, ""week"": ""first"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-08-07""}, {""description"": ""first Thursday of September 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 9, ""week"": ""first"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-09-05""}, {""description"": ""first Thursday of October 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 10, ""week"": ""first"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-10-03""}, {""description"": ""first Friday of November 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 11, ""week"": ""first"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-11-01""}, {""description"": ""first Friday of December 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 12, ""week"": ""first"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-12-06""}, {""description"": ""first Saturday of January 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 1, ""week"": ""first"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-01-05""}, {""description"": ""first Saturday of February 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 2, ""week"": ""first"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-02-02""}, {""description"": ""first Sunday of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""first"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-03-03""}, {""description"": ""first Sunday of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""first"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-04-07""}, {""description"": ""second Monday of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""second"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-03-11""}, {""description"": ""second Monday of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""second"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-04-08""}, {""description"": ""second Tuesday of May 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 5, ""week"": ""second"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-05-14""}, {""description"": ""second Tuesday of June 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 6, ""week"": ""second"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-06-11""}, {""description"": ""second Wednesday of July 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 7, ""week"": ""second"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-07-10""}, {""description"": ""second Wednesday of August 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 8, ""week"": ""second"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-08-14""}, {""description"": ""second Thursday of September 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 9, ""week"": ""second"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-09-12""}, {""description"": ""second Thursday of October 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 10, ""week"": ""second"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-10-10""}, {""description"": ""second Friday of November 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 11, ""week"": ""second"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-11-08""}, {""description"": ""second Friday of December 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 12, ""week"": ""second"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-12-13""}, {""description"": ""second Saturday of January 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 1, ""week"": ""second"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-01-12""}, {""description"": ""second Saturday of February 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 2, ""week"": ""second"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-02-09""}, {""description"": ""second Sunday of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""second"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-03-10""}, {""description"": ""second Sunday of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""second"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-04-14""}, {""description"": ""third Monday of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""third"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-03-18""}, {""description"": ""third Monday of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""third"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-04-15""}, {""description"": ""third Tuesday of May 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 5, ""week"": ""third"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-05-21""}, {""description"": ""third Tuesday of June 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 6, ""week"": ""third"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-06-18""}, {""description"": ""third Wednesday of July 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 7, ""week"": ""third"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-07-17""}, {""description"": ""third Wednesday of August 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 8, ""week"": ""third"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-08-21""}, {""description"": ""third Thursday of September 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 9, ""week"": ""third"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-09-19""}, {""description"": ""third Thursday of October 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 10, ""week"": ""third"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-10-17""}, {""description"": ""third Friday of November 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 11, ""week"": ""third"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-11-15""}, {""description"": ""third Friday of December 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 12, ""week"": ""third"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-12-20""}, {""description"": ""third Saturday of January 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 1, ""week"": ""third"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-01-19""}, {""description"": ""third Saturday of February 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 2, ""week"": ""third"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-02-16""}, {""description"": ""third Sunday of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""third"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-03-17""}, {""description"": ""third Sunday of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""third"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-04-21""}, {""description"": ""fourth Monday of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""fourth"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-03-25""}, {""description"": ""fourth Monday of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""fourth"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-04-22""}, {""description"": ""fourth Tuesday of May 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 5, ""week"": ""fourth"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-05-28""}, {""description"": ""fourth Tuesday of June 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 6, ""week"": ""fourth"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-06-25""}, {""description"": ""fourth Wednesday of July 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 7, ""week"": ""fourth"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-07-24""}, {""description"": ""fourth Wednesday of August 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 8, ""week"": ""fourth"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-08-28""}, {""description"": ""fourth Thursday of September 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 9, ""week"": ""fourth"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-09-26""}, {""description"": ""fourth Thursday of October 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 10, ""week"": ""fourth"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-10-24""}, {""description"": ""fourth Friday of November 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 11, ""week"": ""fourth"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-11-22""}, {""description"": ""fourth Friday of December 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 12, ""week"": ""fourth"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-12-27""}, {""description"": ""fourth Saturday of January 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 1, ""week"": ""fourth"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-01-26""}, {""description"": ""fourth Saturday of February 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 2, ""week"": ""fourth"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-02-23""}, {""description"": ""fourth Sunday of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""fourth"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-03-24""}, {""description"": ""fourth Sunday of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""fourth"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-04-28""}, {""description"": ""last Monday of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""last"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-03-25""}, {""description"": ""last Monday of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""last"", ""dayofweek"": ""Monday""}, ""expected"": ""2013-04-29""}, {""description"": ""last Tuesday of May 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 5, ""week"": ""last"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-05-28""}, {""description"": ""last Tuesday of June 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 6, ""week"": ""last"", ""dayofweek"": ""Tuesday""}, ""expected"": ""2013-06-25""}, {""description"": ""last Wednesday of July 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 7, ""week"": ""last"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-07-31""}, {""description"": ""last Wednesday of August 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 8, ""week"": ""last"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2013-08-28""}, {""description"": ""last Thursday of September 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 9, ""week"": ""last"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-09-26""}, {""description"": ""last Thursday of October 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 10, ""week"": ""last"", ""dayofweek"": ""Thursday""}, ""expected"": ""2013-10-31""}, {""description"": ""last Friday of November 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 11, ""week"": ""last"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-11-29""}, {""description"": ""last Friday of December 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 12, ""week"": ""last"", ""dayofweek"": ""Friday""}, ""expected"": ""2013-12-27""}, {""description"": ""last Saturday of January 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 1, ""week"": ""last"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-01-26""}, {""description"": ""last Saturday of February 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 2, ""week"": ""last"", ""dayofweek"": ""Saturday""}, ""expected"": ""2013-02-23""}, {""description"": ""last Sunday of March 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 3, ""week"": ""last"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-03-31""}, {""description"": ""last Sunday of April 2013"", ""property"": ""meetup"", ""input"": {""year"": 2013, ""month"": 4, ""week"": ""last"", ""dayofweek"": ""Sunday""}, ""expected"": ""2013-04-28""}, {""description"": ""last Wednesday of February 2012"", ""property"": ""meetup"", ""input"": {""year"": 2012, ""month"": 2, ""week"": ""last"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2012-02-29""}, {""description"": ""last Wednesday of December 2014"", ""property"": ""meetup"", ""input"": {""year"": 2014, ""month"": 12, ""week"": ""last"", ""dayofweek"": ""Wednesday""}, ""expected"": ""2014-12-31""}, {""description"": ""last Sunday of February 2015"", ""property"": ""meetup"", ""input"": {""year"": 2015, ""month"": 2, ""week"": ""last"", ""dayofweek"": ""Sunday""}, ""expected"": ""2015-02-22""}, {""description"": ""first Friday of December 2012"", ""property"": ""meetup"", ""input"": {""year"": 2012, ""month"": 12, ""week"": ""first"", ""dayofweek"": ""Friday""}, ""expected"": ""2012-12-07""}]}","Calculate the date of meetups.

Typically meetups happen on the same day of the week.  In this exercise, you
will take a description of a meetup date, and return the actual meetup date.

Examples of general descriptions are:

- The first Monday of January 2017
- The third Tuesday of January 2017
- The wednesteenth of January 2017
- The last Thursday of January 2017

The descriptors you are expected to parse are:
first, second, third, fourth, fifth, last, monteenth, tuesteenth, wednesteenth,
thursteenth, friteenth, saturteenth, sunteenth

Note that ""monteenth"", ""tuesteenth"", etc are all made up words. There was a
meetup whose members realized that there are exactly 7 numbered days in a month
that end in '-teenth'. Therefore, one is guaranteed that each day of the week
(Monday, Tuesday, ...) will have exactly one date that is named with '-teenth'
in every month.

Given examples of a meetup dates, each containing a month, day, year, and
descriptor calculate the date of the actual meetup.  For example, if given
""The first Monday of January 2017"", the correct meetup date is 2017/1/2.
"
minesweeper,"{""exercise"": ""minesweeper"", ""version"": ""1.1.0"", ""comments"": ["" The expected outputs are represented as arrays of strings to   "", "" improve readability in this JSON file.                         "", "" Your track may choose whether to present the input as a single "", "" string (concatenating all the lines) or as the list.           ""], ""cases"": [{""description"": ""no rows"", ""property"": ""annotate"", ""input"": {""minefield"": []}, ""expected"": []}, {""description"": ""no columns"", ""property"": ""annotate"", ""input"": {""minefield"": [""""]}, ""expected"": [""""]}, {""description"": ""no mines"", ""property"": ""annotate"", ""input"": {""minefield"": [""   "", ""   "", ""   ""]}, ""expected"": [""   "", ""   "", ""   ""]}, {""description"": ""minefield with only mines"", ""property"": ""annotate"", ""input"": {""minefield"": [""***"", ""***"", ""***""]}, ""expected"": [""***"", ""***"", ""***""]}, {""description"": ""mine surrounded by spaces"", ""property"": ""annotate"", ""input"": {""minefield"": [""   "", "" * "", ""   ""]}, ""expected"": [""111"", ""1*1"", ""111""]}, {""description"": ""space surrounded by mines"", ""property"": ""annotate"", ""input"": {""minefield"": [""***"", ""* *"", ""***""]}, ""expected"": [""***"", ""*8*"", ""***""]}, {""description"": ""horizontal line"", ""property"": ""annotate"", ""input"": {""minefield"": ["" * * ""]}, ""expected"": [""1*2*1""]}, {""description"": ""horizontal line, mines at edges"", ""property"": ""annotate"", ""input"": {""minefield"": [""*   *""]}, ""expected"": [""*1 1*""]}, {""description"": ""vertical line"", ""property"": ""annotate"", ""input"": {""minefield"": ["" "", ""*"", "" "", ""*"", "" ""]}, ""expected"": [""1"", ""*"", ""2"", ""*"", ""1""]}, {""description"": ""vertical line, mines at edges"", ""property"": ""annotate"", ""input"": {""minefield"": [""*"", "" "", "" "", "" "", ""*""]}, ""expected"": [""*"", ""1"", "" "", ""1"", ""*""]}, {""description"": ""cross"", ""property"": ""annotate"", ""input"": {""minefield"": [""  *  "", ""  *  "", ""*****"", ""  *  "", ""  *  ""]}, ""expected"": ["" 2*2 "", ""25*52"", ""*****"", ""25*52"", "" 2*2 ""]}, {""description"": ""large minefield"", ""property"": ""annotate"", ""input"": {""minefield"": ["" *  * "", ""  *   "", ""    * "", ""   * *"", "" *  * "", ""      ""]}, ""expected"": [""1*22*1"", ""12*322"", "" 123*2"", ""112*4*"", ""1*22*2"", ""111111""]}]}","Add the numbers to a minesweeper board.

Minesweeper is a popular game where the user has to find the mines using
numeric hints that indicate how many mines are directly adjacent
(horizontally, vertically, diagonally) to a square.

In this exercise you have to create some code that counts the number of
mines adjacent to a square and transforms boards like this (where `*`
indicates a mine):

    +-----+
    | * * |
    |  *  |
    |  *  |
    |     |
    +-----+

into this:

    +-----+
    |1*3*1|
    |13*31|
    | 2*2 |
    | 111 |
    +-----+
"
nth-prime,"{""exercise"": ""nth-prime"", ""version"": ""2.1.0"", ""cases"": [{""description"": ""first prime"", ""property"": ""prime"", ""input"": {""number"": 1}, ""expected"": 2}, {""description"": ""second prime"", ""property"": ""prime"", ""input"": {""number"": 2}, ""expected"": 3}, {""description"": ""sixth prime"", ""property"": ""prime"", ""input"": {""number"": 6}, ""expected"": 13}, {""description"": ""big prime"", ""property"": ""prime"", ""input"": {""number"": 10001}, ""expected"": 104743}, {""description"": ""there is no zeroth prime"", ""property"": ""prime"", ""input"": {""number"": 0}, ""expected"": {""error"": ""there is no zeroth prime""}}]}","Given a number n, determine what the nth prime is.

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that
the 6th prime is 13.

If your language provides methods in the standard library to deal with prime
numbers, pretend they don't exist and implement them yourself.
"
nucleotide-codons,{},"Write a function that returns the name of an amino acid a particular codon,
possibly using shorthand, encodes for.

In DNA sequences of 3 nucleotides, called codons, encode for amino acids. Often
several codons encode for the same amino acid. The International Union of Pure
and Applied Chemistry developed a shorthand system for designating groups of
codons that encode for the same amino acid.

Simply put they've expanded the four letters A, C, G and T with a bunch of
letters that stand for different possibilities. For example R means A and G.
So TAR stands for TAA and TAG (think of ""TAR"" as ""TA[AG]"" in regex notation).

Write some code that given a codon, which may use shorthand, returns the
name of the amino acid that that codon encodes for. You will be given
a list of non-shorthand-codon/name pairs to base your computation on.

See: [wikipedia](https://en.wikipedia.org/wiki/DNA_codon_table).
"
nucleotide-count,"{""exercise"": ""nucleotide-count"", ""version"": ""1.3.0"", ""cases"": [{""description"": ""count all nucleotides in a strand"", ""cases"": [{""description"": ""empty strand"", ""property"": ""nucleotideCounts"", ""input"": {""strand"": """"}, ""expected"": {""A"": 0, ""C"": 0, ""G"": 0, ""T"": 0}}, {""description"": ""can count one nucleotide in single-character input"", ""property"": ""nucleotideCounts"", ""input"": {""strand"": ""G""}, ""expected"": {""A"": 0, ""C"": 0, ""G"": 1, ""T"": 0}}, {""description"": ""strand with repeated nucleotide"", ""property"": ""nucleotideCounts"", ""input"": {""strand"": ""GGGGGGG""}, ""expected"": {""A"": 0, ""C"": 0, ""G"": 7, ""T"": 0}}, {""description"": ""strand with multiple nucleotides"", ""property"": ""nucleotideCounts"", ""input"": {""strand"": ""AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC""}, ""expected"": {""A"": 20, ""C"": 12, ""G"": 17, ""T"": 21}}, {""description"": ""strand with invalid nucleotides"", ""property"": ""nucleotideCounts"", ""input"": {""strand"": ""AGXXACT""}, ""expected"": {""error"": ""Invalid nucleotide in strand""}}]}]}","Given a single stranded DNA string, compute how many times each nucleotide occurs in the string.

The genetic language of every living thing on the planet is DNA.
DNA is a large molecule that is built from an extremely long sequence of individual elements called nucleotides.
4 types exist in DNA and these differ only slightly and can be represented as the following symbols: 'A' for adenine, 'C' for cytosine, 'G' for guanine, and 'T' thymine.

Here is an analogy:
- twigs are to birds nests as
- nucleotides are to DNA as
- legos are to lego houses as
- words are to sentences as...
"
ocr-numbers,"{""exercise"": ""ocr-numbers"", ""version"": ""1.1.0"", ""comments"": [""An expectation of  -1 indicates that a failure should be raised""], ""cases"": [{""description"": ""Converts lines of OCR Numbers to a string of integers"", ""cases"": [{""description"": ""Recognizes 0"", ""property"": ""convert"", ""input"": {""rows"": ["" _ "", ""| |"", ""|_|"", ""   ""]}, ""expected"": ""0""}, {""description"": ""Recognizes 1"", ""property"": ""convert"", ""input"": {""rows"": [""   "", ""  |"", ""  |"", ""   ""]}, ""expected"": ""1""}, {""description"": ""Unreadable but correctly sized inputs return ?"", ""property"": ""convert"", ""input"": {""rows"": [""   "", ""  _"", ""  |"", ""   ""]}, ""expected"": ""?""}, {""description"": ""Input with a number of lines that is not a multiple of four raises an error"", ""property"": ""convert"", ""input"": {""rows"": ["" _ "", ""| |"", ""   ""]}, ""expected"": -1}, {""description"": ""Input with a number of columns that is not a multiple of three raises an error"", ""property"": ""convert"", ""input"": {""rows"": [""    "", ""   |"", ""   |"", ""    ""]}, ""expected"": -1}, {""description"": ""Recognizes 110101100"", ""property"": ""convert"", ""input"": {""rows"": [""       _     _        _  _ "", ""  |  || |  || |  |  || || |"", ""  |  ||_|  ||_|  |  ||_||_|"", ""                           ""]}, ""expected"": ""110101100""}, {""description"": ""Garbled numbers in a string are replaced with ?"", ""property"": ""convert"", ""input"": {""rows"": [""       _     _           _ "", ""  |  || |  || |     || || |"", ""  |  | _|  ||_|  |  ||_||_|"", ""                           ""]}, ""expected"": ""11?10?1?0""}, {""description"": ""Recognizes 2"", ""property"": ""convert"", ""input"": {""rows"": ["" _ "", "" _|"", ""|_ "", ""   ""]}, ""expected"": ""2""}, {""description"": ""Recognizes 3"", ""property"": ""convert"", ""input"": {""rows"": ["" _ "", "" _|"", "" _|"", ""   ""]}, ""expected"": ""3""}, {""description"": ""Recognizes 4"", ""property"": ""convert"", ""input"": {""rows"": [""   "", ""|_|"", ""  |"", ""   ""]}, ""expected"": ""4""}, {""description"": ""Recognizes 5"", ""property"": ""convert"", ""input"": {""rows"": ["" _ "", ""|_ "", "" _|"", ""   ""]}, ""expected"": ""5""}, {""description"": ""Recognizes 6"", ""property"": ""convert"", ""input"": {""rows"": ["" _ "", ""|_ "", ""|_|"", ""   ""]}, ""expected"": ""6""}, {""description"": ""Recognizes 7"", ""property"": ""convert"", ""input"": {""rows"": ["" _ "", ""  |"", ""  |"", ""   ""]}, ""expected"": ""7""}, {""description"": ""Recognizes 8"", ""property"": ""convert"", ""input"": {""rows"": ["" _ "", ""|_|"", ""|_|"", ""   ""]}, ""expected"": ""8""}, {""description"": ""Recognizes 9"", ""property"": ""convert"", ""input"": {""rows"": ["" _ "", ""|_|"", "" _|"", ""   ""]}, ""expected"": ""9""}, {""description"": ""Recognizes string of decimal numbers"", ""property"": ""convert"", ""input"": {""rows"": [""    _  _     _  _  _  _  _  _ "", ""  | _| _||_||_ |_   ||_||_|| |"", ""  ||_  _|  | _||_|  ||_| _||_|"", ""                              ""]}, ""expected"": ""1234567890""}, {""description"": ""Numbers separated by empty lines are recognized. Lines are joined by commas."", ""property"": ""convert"", ""input"": {""rows"": [""    _  _ "", ""  | _| _|"", ""  ||_  _|"", ""         "", ""    _  _ "", ""|_||_ |_ "", ""  | _||_|"", ""         "", "" _  _  _ "", ""  ||_||_|"", ""  ||_| _|"", ""         ""]}, ""expected"": ""123,456,789""}]}]}","Given a 3 x 4 grid of pipes, underscores, and spaces, determine which number is
represented, or whether it is garbled.

# Step One

To begin with, convert a simple binary font to a string containing 0 or 1.

The binary font uses pipes and underscores, four rows high and three columns wide.

```text
     _   #
    | |  # zero.
    |_|  #
         # the fourth row is always blank
```

Is converted to ""0""

```text
         #
      |  # one.
      |  #
         # (blank fourth row)
```

Is converted to ""1""

If the input is the correct size, but not recognizable, your program should return '?'

If the input is the incorrect size, your program should return an error.

# Step Two

Update your program to recognize multi-character binary strings, replacing garbled numbers with ?

# Step Three

Update your program to recognize all numbers 0 through 9, both individually and as part of a larger string.

```text
 _ 
 _|
|_ 
   
```

Is converted to ""2""

```text
      _  _     _  _  _  _  _  _  #
    | _| _||_||_ |_   ||_||_|| | # decimal numbers.
    ||_  _|  | _||_|  ||_| _||_| #
                                 # fourth line is always blank
```

Is converted to ""1234567890""

# Step Four

Update your program to handle multiple numbers, one per line. When converting several lines, join the lines with commas.

```text
    _  _ 
  | _| _|
  ||_  _|
         
    _  _ 
|_||_ |_ 
  | _||_|
         
 _  _  _ 
  ||_||_|
  ||_| _|
         
```

Is converted to ""123,456,789""
"
octal,{},"Convert an octal number, represented as a string (e.g. '1735263'), to its
decimal equivalent using first principles (i.e. no, you may not use built-in or
external libraries to accomplish the conversion).

Implement octal to decimal conversion.  Given an octal input
string, your program should produce a decimal output.

## Note

- Implement the conversion yourself.
  Do not use something else to perform the conversion for you.
- Treat invalid input as octal 0.

## About Octal (Base-8)

Decimal is a base-10 system.

A number 233 in base 10 notation can be understood
as a linear combination of powers of 10:

- The rightmost digit gets multiplied by 10^0 = 1
- The next number gets multiplied by 10^1 = 10
- ...
- The *n*th number gets multiplied by 10^*(n-1)*.
- All these values are summed.

So:

```text
   233 # decimal
 = 2*10^2 + 3*10^1 + 3*10^0
 = 2*100  + 3*10   + 3*1
```

Octal is similar, but uses powers of 8 rather than powers of 10.

So:

```text
   233 # octal
 = 2*8^2 + 3*8^1 + 3*8^0
 = 2*64  + 3*8   + 3*1
 = 128   + 24    + 3
 = 155
```
"
paasio,{},"Report network IO statistics.

You are writing a [PaaS][], and you need a way to bill customers based
on network and filesystem usage.

Create a wrapper for network connections and files that can report IO
statistics. The wrapper must report:

- The total number of bytes read/written.
- The total number of read/write operations.

[PaaS]: http://en.wikipedia.org/wiki/Platform_as_a_service
"
palindrome-products,"{""exercise"": ""palindrome-products"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""finds the smallest palindrome from single digit factors"", ""property"": ""smallest"", ""input"": {""min"": 1, ""max"": 9}, ""expected"": {""value"": 1, ""factors"": [[1, 1]]}}, {""description"": ""finds the largest palindrome from single digit factors"", ""property"": ""largest"", ""input"": {""min"": 1, ""max"": 9}, ""expected"": {""value"": 9, ""factors"": [[1, 9], [3, 3]]}}, {""description"": ""find the smallest palindrome from double digit factors"", ""property"": ""smallest"", ""input"": {""min"": 10, ""max"": 99}, ""expected"": {""value"": 121, ""factors"": [[11, 11]]}}, {""description"": ""find the largest palindrome from double digit factors"", ""property"": ""largest"", ""input"": {""min"": 10, ""max"": 99}, ""expected"": {""value"": 9009, ""factors"": [[91, 99]]}}, {""description"": ""find smallest palindrome from triple digit factors"", ""property"": ""smallest"", ""input"": {""min"": 100, ""max"": 999}, ""expected"": {""value"": 10201, ""factors"": [[101, 101]]}}, {""description"": ""find the largest palindrome from triple digit factors"", ""property"": ""largest"", ""input"": {""min"": 100, ""max"": 999}, ""expected"": {""value"": 906609, ""factors"": [[913, 993]]}}, {""description"": ""find smallest palindrome from four digit factors"", ""property"": ""smallest"", ""input"": {""min"": 1000, ""max"": 9999}, ""expected"": {""value"": 1002001, ""factors"": [[1001, 1001]]}}, {""description"": ""find the largest palindrome from four digit factors"", ""property"": ""largest"", ""input"": {""min"": 1000, ""max"": 9999}, ""expected"": {""value"": 99000099, ""factors"": [[9901, 9999]]}}, {""description"": ""empty result for smallest if no palindrome in the range"", ""property"": ""smallest"", ""input"": {""min"": 1002, ""max"": 1003}, ""expected"": {""error"": ""no palindrome with factors in the range 1002 to 1003""}}, {""description"": ""empty result for largest if no palindrome in the range"", ""property"": ""largest"", ""input"": {""min"": 15, ""max"": 15}, ""expected"": {""error"": ""no palindrome with factors in the range 15 to 15""}}, {""description"": ""error result for smallest if min is more than max"", ""property"": ""smallest"", ""input"": {""min"": 10000, ""max"": 1}, ""expected"": {""error"": ""invalid input: min is 10000 and max is 1""}}, {""description"": ""error result for largest if min is more than max"", ""property"": ""largest"", ""input"": {""min"": 2, ""max"": 1}, ""expected"": {""error"": ""invalid input: min is 2 and max is 1""}}]}","Detect palindrome products in a given range.

A palindromic number is a number that remains the same when its digits are
reversed. For example, `121` is a palindromic number but `112` is not.

Given a range of numbers, find the largest and smallest palindromes which
are products of numbers within that range.

Your solution should return the largest and smallest palindromes, along with the
factors of each within the range. If the largest or smallest palindrome has more
than one pair of factors within the range, then return all the pairs.

## Example 1

Given the range `[1, 9]` (both inclusive)...

And given the list of all possible products within this range:
`[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 15, 21, 24, 27, 20, 28, 32, 36, 25, 30, 35, 40, 45, 42, 48, 54, 49, 56, 63, 64, 72, 81]`

The palindrome products are all single digit numbers (in this case):
`[1, 2, 3, 4, 5, 6, 7, 8, 9]`

The smallest palindrome product is `1`. Its factors are `(1, 1)`.
The largest palindrome product is `9`. Its factors are `(1, 9)` and `(3, 3)`.

## Example 2

Given the range `[10, 99]` (both inclusive)...

The smallest palindrome product is `121`. Its factors are `(11, 11)`.
The largest palindrome product is `9009`. Its factors are `(91, 99)`.
"
pangram,"{""exercise"": ""pangram"", ""comments"": [""A pangram is a sentence using every letter of the alphabet at least once.""], ""version"": ""1.4.1"", ""cases"": [{""description"": ""Check if the given string is a pangram"", ""comments"": [""Output should be a boolean denoting if the string is a pangram or not.""], ""cases"": [{""description"": ""sentence empty"", ""property"": ""isPangram"", ""input"": {""sentence"": """"}, ""expected"": false}, {""description"": ""recognizes a perfect lower case pangram"", ""property"": ""isPangram"", ""input"": {""sentence"": ""abcdefghijklmnopqrstuvwxyz""}, ""expected"": true}, {""description"": ""pangram with only lower case"", ""property"": ""isPangram"", ""input"": {""sentence"": ""the quick brown fox jumps over the lazy dog""}, ""expected"": true}, {""description"": ""missing character 'x'"", ""property"": ""isPangram"", ""input"": {""sentence"": ""a quick movement of the enemy will jeopardize five gunboats""}, ""expected"": false}, {""description"": ""another missing character, e.g. 'h'"", ""property"": ""isPangram"", ""input"": {""sentence"": ""five boxing wizards jump quickly at it""}, ""expected"": false}, {""description"": ""pangram with underscores"", ""property"": ""isPangram"", ""input"": {""sentence"": ""the_quick_brown_fox_jumps_over_the_lazy_dog""}, ""expected"": true}, {""description"": ""pangram with numbers"", ""property"": ""isPangram"", ""input"": {""sentence"": ""the 1 quick brown fox jumps over the 2 lazy dogs""}, ""expected"": true}, {""description"": ""missing letters replaced by numbers"", ""property"": ""isPangram"", ""input"": {""sentence"": ""7h3 qu1ck brown fox jumps ov3r 7h3 lazy dog""}, ""expected"": false}, {""description"": ""pangram with mixed case and punctuation"", ""property"": ""isPangram"", ""input"": {""sentence"": ""\""Five quacking Zephyrs jolt my wax bed.\""""}, ""expected"": true}, {""description"": ""upper and lower case versions of the same character should not be counted separately"", ""property"": ""isPangram"", ""input"": {""sentence"": ""the quick brown fox jumps over with lazy FX""}, ""expected"": false}]}]}","Determine if a sentence is a pangram. A pangram (Greek: παν γράμμα, pan gramma,
""every letter"") is a sentence using every letter of the alphabet at least once.
The best known English pangram is:
> The quick brown fox jumps over the lazy dog.

The alphabet used consists of ASCII letters `a` to `z`, inclusive, and is case
insensitive. Input will not contain non-ASCII symbols.
"
parallel-letter-frequency,{},"Count the frequency of letters in texts using parallel computation.

Parallelism is about doing things in parallel that can also be done
sequentially. A common example is counting the frequency of letters.
Create a function that returns the total frequency of each letter in a
list of texts and that employs parallelism.
"
pascals-triangle,"{""exercise"": ""pascals-triangle"", ""version"": ""1.3.0"", ""comments"": [""Expectations are represented here as an array of arrays."", ""How you represent this idiomatically in your language is up to you."", ""An expectation of -1 indicates some sort of failure should occur""], ""cases"": [{""description"": ""Given a count, return a collection of that many rows of pascal's triangle"", ""cases"": [{""description"": ""zero rows"", ""property"": ""rows"", ""input"": {""count"": 0}, ""expected"": []}, {""description"": ""single row"", ""property"": ""rows"", ""input"": {""count"": 1}, ""expected"": [[1]]}, {""description"": ""two rows"", ""property"": ""rows"", ""input"": {""count"": 2}, ""expected"": [[1], [1, 1]]}, {""description"": ""three rows"", ""property"": ""rows"", ""input"": {""count"": 3}, ""expected"": [[1], [1, 1], [1, 2, 1]]}, {""description"": ""four rows"", ""property"": ""rows"", ""input"": {""count"": 4}, ""expected"": [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]}, {""description"": ""five rows"", ""property"": ""rows"", ""input"": {""count"": 5}, ""expected"": [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]}, {""description"": ""six rows"", ""property"": ""rows"", ""input"": {""count"": 6}, ""expected"": [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]}, {""description"": ""ten rows"", ""property"": ""rows"", ""input"": {""count"": 10}, ""expected"": [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]]}, {""description"": ""negative rows"", ""property"": ""rows"", ""input"": {""count"": -1}, ""expected"": -1}]}]}","Compute Pascal's triangle up to a given number of rows.

In Pascal's Triangle each number is computed by adding the numbers to
the right and left of the current position in the previous row.

```text
    1
   1 1
  1 2 1
 1 3 3 1
1 4 6 4 1
# ... etc
```
"
perfect-numbers,"{""exercise"": ""perfect-numbers"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""Perfect numbers"", ""cases"": [{""description"": ""Smallest perfect number is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 6}, ""expected"": ""perfect""}, {""description"": ""Medium perfect number is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 28}, ""expected"": ""perfect""}, {""description"": ""Large perfect number is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 33550336}, ""expected"": ""perfect""}]}, {""description"": ""Abundant numbers"", ""cases"": [{""description"": ""Smallest abundant number is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 12}, ""expected"": ""abundant""}, {""description"": ""Medium abundant number is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 30}, ""expected"": ""abundant""}, {""description"": ""Large abundant number is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 33550335}, ""expected"": ""abundant""}]}, {""description"": ""Deficient numbers"", ""cases"": [{""description"": ""Smallest prime deficient number is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 2}, ""expected"": ""deficient""}, {""description"": ""Smallest non-prime deficient number is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 4}, ""expected"": ""deficient""}, {""description"": ""Medium deficient number is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 32}, ""expected"": ""deficient""}, {""description"": ""Large deficient number is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 33550337}, ""expected"": ""deficient""}, {""description"": ""Edge case (no factors other than itself) is classified correctly"", ""property"": ""classify"", ""input"": {""number"": 1}, ""expected"": ""deficient""}]}, {""description"": ""Invalid inputs"", ""cases"": [{""description"": ""Zero is rejected (not a natural number)"", ""property"": ""classify"", ""input"": {""number"": 0}, ""expected"": {""error"": ""Classification is only possible for natural numbers.""}}, {""description"": ""Negative integer is rejected (not a natural number)"", ""property"": ""classify"", ""input"": {""number"": -1}, ""expected"": {""error"": ""Classification is only possible for natural numbers.""}}]}]}","Determine if a number is perfect, abundant, or deficient based on
Nicomachus' (60 - 120 CE) classification scheme for natural numbers.

The Greek mathematician [Nicomachus](https://en.wikipedia.org/wiki/Nicomachus) devised a classification scheme for natural numbers, identifying each as belonging uniquely to the categories of **perfect**, **abundant**, or **deficient** based on their [aliquot sum](https://en.wikipedia.org/wiki/Aliquot_sum). The aliquot sum is defined as the sum of the factors of a number not including the number itself. For example, the aliquot sum of 15 is (1 + 3 + 5) = 9

- **Perfect**: aliquot sum = number
  - 6 is a perfect number because (1 + 2 + 3) = 6
  - 28 is a perfect number because (1 + 2 + 4 + 7 + 14) = 28
- **Abundant**: aliquot sum > number
  - 12 is an abundant number because (1 + 2 + 3 + 4 + 6) = 16
  - 24 is an abundant number because (1 + 2 + 3 + 4 + 6 + 8 + 12) = 36
- **Deficient**: aliquot sum < number
  - 8 is a deficient number because (1 + 2 + 4) = 7
  - Prime numbers are deficient

Implement a way to determine whether a given number is **perfect**. Depending on your language track, you may also need to implement a way to determine whether a given number is **abundant** or **deficient**.
"
phone-number,"{""exercise"": ""phone-number"", ""version"": ""1.4.0"", ""cases"": [{""description"": ""Cleanup user-entered phone numbers"", ""comments"": ["" Returns the cleaned phone number if given number is valid, "", "" else returns nil. Note that number is not formatted,       "", "" just a 10-digit number is returned.                        ""], ""cases"": [{""description"": ""cleans the number"", ""property"": ""clean"", ""input"": {""phrase"": ""(223) 456-7890""}, ""expected"": ""2234567890""}, {""description"": ""cleans numbers with dots"", ""property"": ""clean"", ""input"": {""phrase"": ""223.456.7890""}, ""expected"": ""2234567890""}, {""description"": ""cleans numbers with multiple spaces"", ""property"": ""clean"", ""input"": {""phrase"": ""223 456   7890   ""}, ""expected"": ""2234567890""}, {""description"": ""invalid when 9 digits"", ""property"": ""clean"", ""input"": {""phrase"": ""123456789""}, ""expected"": null}, {""description"": ""invalid when 11 digits does not start with a 1"", ""property"": ""clean"", ""input"": {""phrase"": ""22234567890""}, ""expected"": null}, {""description"": ""valid when 11 digits and starting with 1"", ""property"": ""clean"", ""input"": {""phrase"": ""12234567890""}, ""expected"": ""2234567890""}, {""description"": ""valid when 11 digits and starting with 1 even with punctuation"", ""property"": ""clean"", ""input"": {""phrase"": ""+1 (223) 456-7890""}, ""expected"": ""2234567890""}, {""description"": ""invalid when more than 11 digits"", ""property"": ""clean"", ""input"": {""phrase"": ""321234567890""}, ""expected"": null}, {""description"": ""invalid with letters"", ""property"": ""clean"", ""input"": {""phrase"": ""123-abc-7890""}, ""expected"": null}, {""description"": ""invalid with punctuations"", ""property"": ""clean"", ""input"": {""phrase"": ""123-@:!-7890""}, ""expected"": null}, {""description"": ""invalid if area code starts with 0"", ""property"": ""clean"", ""input"": {""phrase"": ""(023) 456-7890""}, ""expected"": null}, {""description"": ""invalid if area code starts with 1"", ""property"": ""clean"", ""input"": {""phrase"": ""(123) 456-7890""}, ""expected"": null}, {""description"": ""invalid if exchange code starts with 0"", ""property"": ""clean"", ""input"": {""phrase"": ""(223) 056-7890""}, ""expected"": null}, {""description"": ""invalid if exchange code starts with 1"", ""property"": ""clean"", ""input"": {""phrase"": ""(223) 156-7890""}, ""expected"": null}]}]}","Clean up user-entered phone numbers so that they can be sent SMS messages.

The **North American Numbering Plan (NANP)** is a telephone numbering system used by many countries in North America like the United States, Canada or Bermuda. All NANP-countries share the same international country code: `1`.

NANP numbers are ten-digit numbers consisting of a three-digit Numbering Plan Area code, commonly known as *area code*, followed by a seven-digit local number. The first three digits of the local number represent the *exchange code*, followed by the unique four-digit number which is the *subscriber number*.

The format is usually represented as

```text
(NXX)-NXX-XXXX
```

where `N` is any digit from 2 through 9 and `X` is any digit from 0 through 9.

Your task is to clean up differently formatted telephone numbers by removing punctuation and the country code (1) if present.

For example, the inputs
- `+1 (613)-995-0253`
- `613-995-0253`
- `1 613 995 0253`
- `613.995.0253`

should all produce the output

`6139950253`

**Note:** As this exercise only deals with telephone numbers used in NANP-countries, only 1 is considered a valid country code.
"
pig-latin,"{""exercise"": ""pig-latin"", ""version"": ""1.2.0"", ""cases"": [{""description"": ""ay is added to words that start with vowels"", ""cases"": [{""description"": ""word beginning with a"", ""property"": ""translate"", ""input"": {""phrase"": ""apple""}, ""expected"": ""appleay""}, {""description"": ""word beginning with e"", ""property"": ""translate"", ""input"": {""phrase"": ""ear""}, ""expected"": ""earay""}, {""description"": ""word beginning with i"", ""property"": ""translate"", ""input"": {""phrase"": ""igloo""}, ""expected"": ""iglooay""}, {""description"": ""word beginning with o"", ""property"": ""translate"", ""input"": {""phrase"": ""object""}, ""expected"": ""objectay""}, {""description"": ""word beginning with u"", ""property"": ""translate"", ""input"": {""phrase"": ""under""}, ""expected"": ""underay""}, {""description"": ""word beginning with a vowel and followed by a qu"", ""property"": ""translate"", ""input"": {""phrase"": ""equal""}, ""expected"": ""equalay""}]}, {""description"": ""first letter and ay are moved to the end of words that start with consonants"", ""cases"": [{""description"": ""word beginning with p"", ""property"": ""translate"", ""input"": {""phrase"": ""pig""}, ""expected"": ""igpay""}, {""description"": ""word beginning with k"", ""property"": ""translate"", ""input"": {""phrase"": ""koala""}, ""expected"": ""oalakay""}, {""description"": ""word beginning with x"", ""property"": ""translate"", ""input"": {""phrase"": ""xenon""}, ""expected"": ""enonxay""}, {""description"": ""word beginning with q without a following u"", ""property"": ""translate"", ""input"": {""phrase"": ""qat""}, ""expected"": ""atqay""}]}, {""description"": ""some letter clusters are treated like a single consonant"", ""cases"": [{""description"": ""word beginning with ch"", ""property"": ""translate"", ""input"": {""phrase"": ""chair""}, ""expected"": ""airchay""}, {""description"": ""word beginning with qu"", ""property"": ""translate"", ""input"": {""phrase"": ""queen""}, ""expected"": ""eenquay""}, {""description"": ""word beginning with qu and a preceding consonant"", ""property"": ""translate"", ""input"": {""phrase"": ""square""}, ""expected"": ""aresquay""}, {""description"": ""word beginning with th"", ""property"": ""translate"", ""input"": {""phrase"": ""therapy""}, ""expected"": ""erapythay""}, {""description"": ""word beginning with thr"", ""property"": ""translate"", ""input"": {""phrase"": ""thrush""}, ""expected"": ""ushthray""}, {""description"": ""word beginning with sch"", ""property"": ""translate"", ""input"": {""phrase"": ""school""}, ""expected"": ""oolschay""}]}, {""description"": ""some letter clusters are treated like a single vowel"", ""cases"": [{""description"": ""word beginning with yt"", ""property"": ""translate"", ""input"": {""phrase"": ""yttria""}, ""expected"": ""yttriaay""}, {""description"": ""word beginning with xr"", ""property"": ""translate"", ""input"": {""phrase"": ""xray""}, ""expected"": ""xrayay""}]}, {""description"": ""position of y in a word determines if it is a consonant or a vowel"", ""cases"": [{""description"": ""y is treated like a consonant at the beginning of a word"", ""property"": ""translate"", ""input"": {""phrase"": ""yellow""}, ""expected"": ""ellowyay""}, {""description"": ""y is treated like a vowel at the end of a consonant cluster"", ""property"": ""translate"", ""input"": {""phrase"": ""rhythm""}, ""expected"": ""ythmrhay""}, {""description"": ""y as second letter in two letter word"", ""property"": ""translate"", ""input"": {""phrase"": ""my""}, ""expected"": ""ymay""}]}, {""description"": ""phrases are translated"", ""cases"": [{""description"": ""a whole phrase"", ""property"": ""translate"", ""input"": {""phrase"": ""quick fast run""}, ""expected"": ""ickquay astfay unray""}]}]}","Implement a program that translates from English to Pig Latin.

Pig Latin is a made-up children's language that's intended to be
confusing. It obeys a few simple rules (below), but when it's spoken
quickly it's really difficult for non-children (and non-native speakers)
to understand.

- **Rule 1**: If a word begins with a vowel sound, add an ""ay"" sound to the end of the word. Please note that ""xr"" and ""yt"" at the beginning of a word make vowel sounds (e.g. ""xray"" -> ""xrayay"", ""yttria"" -> ""yttriaay"").
- **Rule 2**: If a word begins with a consonant sound, move it to the end of the word and then add an ""ay"" sound to the end of the word. Consonant sounds can be made up of multiple consonants, a.k.a. a consonant cluster (e.g. ""chair"" -> ""airchay"").
- **Rule 3**: If a word starts with a consonant sound followed by ""qu"", move it to the end of the word, and then add an ""ay"" sound to the end of the word (e.g. ""square"" -> ""aresquay"").
- **Rule 4**: If a word contains a ""y"" after a consonant cluster or as the second letter in a two letter word it makes a vowel sound (e.g. ""rhythm"" -> ""ythmrhay"", ""my"" -> ""ymay"").

There are a few more rules for edge cases, and there are regional
variants too.

See <http://en.wikipedia.org/wiki/Pig_latin> for more details.
"
point-mutations,{},"Calculate the Hamming difference between two DNA strands.

A mutation is simply a mistake that occurs during the creation or
copying of a nucleic acid, in particular DNA. Because nucleic acids are
vital to cellular functions, mutations tend to cause a ripple effect
throughout the cell. Although mutations are technically mistakes, a very
rare mutation may equip the cell with a beneficial attribute. In fact,
the macro effects of evolution are attributable by the accumulated
result of beneficial microscopic mutations over many generations.

The simplest and most common type of nucleic acid mutation is a point
mutation, which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands
taken from different genomes with a common ancestor, we get a measure of
the minimum number of point mutations that could have occurred on the
evolutionary path between the two strands.

This is called the 'Hamming distance'

    GAGCCTACTAACGGGAT
    CATCGTAATGACGGCCT
    ^ ^ ^  ^ ^    ^^

The Hamming distance between these two DNA strands is 7.

# Implementation notes

The Hamming distance is only defined for sequences of equal length. Hence you
may assume that only sequences of equal length will be passed to your hamming
distance function.

**Note: This problem is deprecated, replaced by the one called `hamming`.**
"
poker,"{""exercise"": ""poker"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""single hand always wins"", ""property"": ""bestHands"", ""input"": {""hands"": [""4S 5S 7H 8D JC""]}, ""expected"": [""4S 5S 7H 8D JC""]}, {""description"": ""highest card out of all hands wins"", ""property"": ""bestHands"", ""input"": {""hands"": [""4D 5S 6S 8D 3C"", ""2S 4C 7S 9H 10H"", ""3S 4S 5D 6H JH""]}, ""expected"": [""3S 4S 5D 6H JH""]}, {""description"": ""a tie has multiple winners"", ""property"": ""bestHands"", ""input"": {""hands"": [""4D 5S 6S 8D 3C"", ""2S 4C 7S 9H 10H"", ""3S 4S 5D 6H JH"", ""3H 4H 5C 6C JD""]}, ""expected"": [""3S 4S 5D 6H JH"", ""3H 4H 5C 6C JD""]}, {""description"": ""multiple hands with the same high cards, tie compares next highest ranked, down to last card"", ""property"": ""bestHands"", ""input"": {""hands"": [""3S 5H 6S 8D 7H"", ""2S 5D 6D 8C 7S""]}, ""expected"": [""3S 5H 6S 8D 7H""]}, {""description"": ""one pair beats high card"", ""property"": ""bestHands"", ""input"": {""hands"": [""4S 5H 6C 8D KH"", ""2S 4H 6S 4D JH""]}, ""expected"": [""2S 4H 6S 4D JH""]}, {""description"": ""highest pair wins"", ""property"": ""bestHands"", ""input"": {""hands"": [""4S 2H 6S 2D JH"", ""2S 4H 6C 4D JD""]}, ""expected"": [""2S 4H 6C 4D JD""]}, {""description"": ""two pairs beats one pair"", ""property"": ""bestHands"", ""input"": {""hands"": [""2S 8H 6S 8D JH"", ""4S 5H 4C 8C 5C""]}, ""expected"": [""4S 5H 4C 8C 5C""]}, {""description"": ""both hands have two pairs, highest ranked pair wins"", ""property"": ""bestHands"", ""input"": {""hands"": [""2S 8H 2D 8D 3H"", ""4S 5H 4C 8S 5D""]}, ""expected"": [""2S 8H 2D 8D 3H""]}, {""description"": ""both hands have two pairs, with the same highest ranked pair, tie goes to low pair"", ""property"": ""bestHands"", ""input"": {""hands"": [""2S QS 2C QD JH"", ""JD QH JS 8D QC""]}, ""expected"": [""JD QH JS 8D QC""]}, {""description"": ""both hands have two identically ranked pairs, tie goes to remaining card (kicker)"", ""property"": ""bestHands"", ""input"": {""hands"": [""JD QH JS 8D QC"", ""JS QS JC 2D QD""]}, ""expected"": [""JD QH JS 8D QC""]}, {""description"": ""three of a kind beats two pair"", ""property"": ""bestHands"", ""input"": {""hands"": [""2S 8H 2H 8D JH"", ""4S 5H 4C 8S 4H""]}, ""expected"": [""4S 5H 4C 8S 4H""]}, {""description"": ""both hands have three of a kind, tie goes to highest ranked triplet"", ""property"": ""bestHands"", ""input"": {""hands"": [""2S 2H 2C 8D JH"", ""4S AH AS 8C AD""]}, ""expected"": [""4S AH AS 8C AD""]}, {""description"": ""with multiple decks, two players can have same three of a kind, ties go to highest remaining cards"", ""property"": ""bestHands"", ""input"": {""hands"": [""4S AH AS 7C AD"", ""4S AH AS 8C AD""]}, ""expected"": [""4S AH AS 8C AD""]}, {""description"": ""a straight beats three of a kind"", ""property"": ""bestHands"", ""input"": {""hands"": [""4S 5H 4C 8D 4H"", ""3S 4D 2S 6D 5C""]}, ""expected"": [""3S 4D 2S 6D 5C""]}, {""description"": ""aces can end a straight (10 J Q K A)"", ""property"": ""bestHands"", ""input"": {""hands"": [""4S 5H 4C 8D 4H"", ""10D JH QS KD AC""]}, ""expected"": [""10D JH QS KD AC""]}, {""description"": ""aces can start a straight (A 2 3 4 5)"", ""property"": ""bestHands"", ""input"": {""hands"": [""4S 5H 4C 8D 4H"", ""4D AH 3S 2D 5C""]}, ""expected"": [""4D AH 3S 2D 5C""]}, {""description"": ""both hands with a straight, tie goes to highest ranked card"", ""property"": ""bestHands"", ""input"": {""hands"": [""4S 6C 7S 8D 5H"", ""5S 7H 8S 9D 6H""]}, ""expected"": [""5S 7H 8S 9D 6H""]}, {""description"": ""even though an ace is usually high, a 5-high straight is the lowest-scoring straight"", ""property"": ""bestHands"", ""input"": {""hands"": [""2H 3C 4D 5D 6H"", ""4S AH 3S 2D 5H""]}, ""expected"": [""2H 3C 4D 5D 6H""]}, {""description"": ""flush beats a straight"", ""property"": ""bestHands"", ""input"": {""hands"": [""4C 6H 7D 8D 5H"", ""2S 4S 5S 6S 7S""]}, ""expected"": [""2S 4S 5S 6S 7S""]}, {""description"": ""both hands have a flush, tie goes to high card, down to the last one if necessary"", ""property"": ""bestHands"", ""input"": {""hands"": [""4H 7H 8H 9H 6H"", ""2S 4S 5S 6S 7S""]}, ""expected"": [""4H 7H 8H 9H 6H""]}, {""description"": ""full house beats a flush"", ""property"": ""bestHands"", ""input"": {""hands"": [""3H 6H 7H 8H 5H"", ""4S 5H 4C 5D 4H""]}, ""expected"": [""4S 5H 4C 5D 4H""]}, {""description"": ""both hands have a full house, tie goes to highest-ranked triplet"", ""property"": ""bestHands"", ""input"": {""hands"": [""4H 4S 4D 9S 9D"", ""5H 5S 5D 8S 8D""]}, ""expected"": [""5H 5S 5D 8S 8D""]}, {""description"": ""with multiple decks, both hands have a full house with the same triplet, tie goes to the pair"", ""property"": ""bestHands"", ""input"": {""hands"": [""5H 5S 5D 9S 9D"", ""5H 5S 5D 8S 8D""]}, ""expected"": [""5H 5S 5D 9S 9D""]}, {""description"": ""four of a kind beats a full house"", ""property"": ""bestHands"", ""input"": {""hands"": [""4S 5H 4D 5D 4H"", ""3S 3H 2S 3D 3C""]}, ""expected"": [""3S 3H 2S 3D 3C""]}, {""description"": ""both hands have four of a kind, tie goes to high quad"", ""property"": ""bestHands"", ""input"": {""hands"": [""2S 2H 2C 8D 2D"", ""4S 5H 5S 5D 5C""]}, ""expected"": [""4S 5H 5S 5D 5C""]}, {""description"": ""with multiple decks, both hands with identical four of a kind, tie determined by kicker"", ""property"": ""bestHands"", ""input"": {""hands"": [""3S 3H 2S 3D 3C"", ""3S 3H 4S 3D 3C""]}, ""expected"": [""3S 3H 4S 3D 3C""]}, {""description"": ""straight flush beats four of a kind"", ""property"": ""bestHands"", ""input"": {""hands"": [""4S 5H 5S 5D 5C"", ""7S 8S 9S 6S 10S""]}, ""expected"": [""7S 8S 9S 6S 10S""]}, {""description"": ""both hands have straight flush, tie goes to highest-ranked card"", ""property"": ""bestHands"", ""input"": {""hands"": [""4H 6H 7H 8H 5H"", ""5S 7S 8S 9S 6S""]}, ""expected"": [""5S 7S 8S 9S 6S""]}]}","Pick the best hand(s) from a list of poker hands.

See [wikipedia](https://en.wikipedia.org/wiki/List_of_poker_hands) for an
overview of poker hands.
"
pov,"{""exercise"": ""pov"", ""version"": ""1.3.0"", ""cases"": [{""description"": ""Reroot a tree so that its root is the specified node."", ""comments"": [""In this way, the tree is presented from the point of view of the specified node."", """", ""If appropriate for your track, you may test that the input tree is not modified."", """", ""Note that when rerooting upon a target node that has both parents and children,"", ""it does not matter whether the former parent comes before or after the former children."", ""Please account for this when checking correctness of the resulting trees."", ""One suggested method is to only check two things:"", ""1) The root of the returned tree is the root that was passed in to from_pov."", ""2) The sorted edge list of the returned tree is the same as the sorted edge list of the expected tree.""], ""cases"": [{""description"": ""Results in the same tree if the input tree is a singleton"", ""property"": ""fromPov"", ""input"": {""tree"": {""label"": ""x""}, ""from"": ""x""}, ""expected"": {""label"": ""x""}}, {""description"": ""Can reroot a tree with a parent and one sibling"", ""property"": ""fromPov"", ""input"": {""tree"": {""label"": ""parent"", ""children"": [{""label"": ""x""}, {""label"": ""sibling""}]}, ""from"": ""x""}, ""expected"": {""label"": ""x"", ""children"": [{""label"": ""parent"", ""children"": [{""label"": ""sibling""}]}]}}, {""description"": ""Can reroot a tree with a parent and many siblings"", ""property"": ""fromPov"", ""input"": {""tree"": {""label"": ""parent"", ""children"": [{""label"": ""a""}, {""label"": ""x""}, {""label"": ""b""}, {""label"": ""c""}]}, ""from"": ""x""}, ""expected"": {""label"": ""x"", ""children"": [{""label"": ""parent"", ""children"": [{""label"": ""a""}, {""label"": ""b""}, {""label"": ""c""}]}]}}, {""description"": ""Can reroot a tree with new root deeply nested in tree"", ""property"": ""fromPov"", ""input"": {""tree"": {""label"": ""level-0"", ""children"": [{""label"": ""level-1"", ""children"": [{""label"": ""level-2"", ""children"": [{""label"": ""level-3"", ""children"": [{""label"": ""x""}]}]}]}]}, ""from"": ""x""}, ""expected"": {""label"": ""x"", ""children"": [{""label"": ""level-3"", ""children"": [{""label"": ""level-2"", ""children"": [{""label"": ""level-1"", ""children"": [{""label"": ""level-0""}]}]}]}]}}, {""description"": ""Moves children of the new root to same level as former parent"", ""property"": ""fromPov"", ""input"": {""tree"": {""label"": ""parent"", ""children"": [{""label"": ""x"", ""children"": [{""label"": ""kid-0""}, {""label"": ""kid-1""}]}]}, ""from"": ""x""}, ""expected"": {""label"": ""x"", ""children"": [{""label"": ""kid-0""}, {""label"": ""kid-1""}, {""label"": ""parent""}]}}, {""description"": ""Can reroot a complex tree with cousins"", ""property"": ""fromPov"", ""input"": {""tree"": {""label"": ""grandparent"", ""children"": [{""label"": ""parent"", ""children"": [{""label"": ""x"", ""children"": [{""label"": ""kid-0""}, {""label"": ""kid-1""}]}, {""label"": ""sibling-0""}, {""label"": ""sibling-1""}]}, {""label"": ""uncle"", ""children"": [{""label"": ""cousin-0""}, {""label"": ""cousin-1""}]}]}, ""from"": ""x""}, ""expected"": {""label"": ""x"", ""children"": [{""label"": ""kid-1""}, {""label"": ""kid-0""}, {""label"": ""parent"", ""children"": [{""label"": ""sibling-0""}, {""label"": ""sibling-1""}, {""label"": ""grandparent"", ""children"": [{""label"": ""uncle"", ""children"": [{""label"": ""cousin-0""}, {""label"": ""cousin-1""}]}]}]}]}}, {""description"": ""Errors if target does not exist in a singleton tree"", ""property"": ""fromPov"", ""input"": {""tree"": {""label"": ""x""}, ""from"": ""nonexistent""}, ""expected"": null}, {""description"": ""Errors if target does not exist in a large tree"", ""property"": ""fromPov"", ""input"": {""tree"": {""label"": ""parent"", ""children"": [{""label"": ""x"", ""children"": [{""label"": ""kid-0""}, {""label"": ""kid-1""}]}, {""label"": ""sibling-0""}, {""label"": ""sibling-1""}]}, ""from"": ""nonexistent""}, ""expected"": null}]}, {""description"": ""Given two nodes, find the path between them"", ""comments"": [""A typical implementation would first reroot the tree on one of the two nodes."", """", ""If appropriate for your track, you may test that the input tree is not modified.""], ""cases"": [{""description"": ""Can find path to parent"", ""property"": ""pathTo"", ""input"": {""from"": ""x"", ""to"": ""parent"", ""tree"": {""label"": ""parent"", ""children"": [{""label"": ""x""}, {""label"": ""sibling""}]}}, ""expected"": [""x"", ""parent""]}, {""description"": ""Can find path to sibling"", ""property"": ""pathTo"", ""input"": {""from"": ""x"", ""to"": ""b"", ""tree"": {""label"": ""parent"", ""children"": [{""label"": ""a""}, {""label"": ""x""}, {""label"": ""b""}, {""label"": ""c""}]}}, ""expected"": [""x"", ""parent"", ""b""]}, {""description"": ""Can find path to cousin"", ""property"": ""pathTo"", ""input"": {""from"": ""x"", ""to"": ""cousin-1"", ""tree"": {""label"": ""grandparent"", ""children"": [{""label"": ""parent"", ""children"": [{""label"": ""x"", ""children"": [{""label"": ""kid-0""}, {""label"": ""kid-1""}]}, {""label"": ""sibling-0""}, {""label"": ""sibling-1""}]}, {""label"": ""uncle"", ""children"": [{""label"": ""cousin-0""}, {""label"": ""cousin-1""}]}]}}, ""expected"": [""x"", ""parent"", ""grandparent"", ""uncle"", ""cousin-1""]}, {""description"": ""Can find path not involving root"", ""property"": ""pathTo"", ""input"": {""from"": ""x"", ""to"": ""sibling-1"", ""tree"": {""label"": ""grandparent"", ""children"": [{""label"": ""parent"", ""children"": [{""label"": ""x""}, {""label"": ""sibling-0""}, {""label"": ""sibling-1""}]}]}}, ""expected"": [""x"", ""parent"", ""sibling-1""]}, {""description"": ""Can find path from nodes other than x"", ""property"": ""pathTo"", ""input"": {""from"": ""a"", ""to"": ""c"", ""tree"": {""label"": ""parent"", ""children"": [{""label"": ""a""}, {""label"": ""x""}, {""label"": ""b""}, {""label"": ""c""}]}}, ""expected"": [""a"", ""parent"", ""c""]}, {""description"": ""Errors if destination does not exist"", ""property"": ""pathTo"", ""input"": {""from"": ""x"", ""to"": ""nonexistent"", ""tree"": {""label"": ""parent"", ""children"": [{""label"": ""x"", ""children"": [{""label"": ""kid-0""}, {""label"": ""kid-1""}]}, {""label"": ""sibling-0""}, {""label"": ""sibling-1""}]}}, ""expected"": null}, {""description"": ""Errors if source does not exist"", ""property"": ""pathTo"", ""input"": {""from"": ""nonexistent"", ""to"": ""x"", ""tree"": {""label"": ""parent"", ""children"": [{""label"": ""x"", ""children"": [{""label"": ""kid-0""}, {""label"": ""kid-1""}]}, {""label"": ""sibling-0""}, {""label"": ""sibling-1""}]}}, ""expected"": null}]}]}","Reparent a graph on a selected node.

This exercise is all about re-orientating a graph to see things from a different
point of view. For example family trees are usually presented from the
ancestor's perspective:

```text
    +------0------+
    |      |      |
  +-1-+  +-2-+  +-3-+
  |   |  |   |  |   |
  4   5  6   7  8   9
```

But the same information can be presented from the perspective of any other node
in the graph, by pulling it up to the root and dragging its relationships along
with it. So the same graph from 6's perspective would look like:

```text
        6
        |
  +-----2-----+
  |           |
  7     +-----0-----+
        |           |
      +-1-+       +-3-+
      |   |       |   |
      4   5       8   9
```

This lets us more simply describe the paths between two nodes. So for example
the path from 6-9 (which in the first graph goes up to the root and then down to
a different leaf node) can be seen to follow the path 6-2-0-3-9

This exercise involves taking an input graph and re-orientating it from the point
of view of one of the nodes.
"
prime-factors,"{""exercise"": ""prime-factors"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""returns prime factors for the given input number"", ""cases"": [{""description"": ""no factors"", ""property"": ""factors"", ""input"": {""value"": 1}, ""expected"": []}, {""description"": ""prime number"", ""property"": ""factors"", ""input"": {""value"": 2}, ""expected"": [2]}, {""description"": ""square of a prime"", ""property"": ""factors"", ""input"": {""value"": 9}, ""expected"": [3, 3]}, {""description"": ""cube of a prime"", ""property"": ""factors"", ""input"": {""value"": 8}, ""expected"": [2, 2, 2]}, {""description"": ""product of primes and non-primes"", ""property"": ""factors"", ""input"": {""value"": 12}, ""expected"": [2, 2, 3]}, {""description"": ""product of primes"", ""property"": ""factors"", ""input"": {""value"": 901255}, ""expected"": [5, 17, 23, 461]}, {""description"": ""factors include a large prime"", ""property"": ""factors"", ""input"": {""value"": 93819012551}, ""expected"": [11, 9539, 894119]}]}]}","Compute the prime factors of a given natural number.

A prime number is only evenly divisible by itself and 1.

Note that 1 is not a prime number.

## Example

What are the prime factors of 60?

- Our first divisor is 2. 2 goes into 60, leaving 30.
- 2 goes into 30, leaving 15.
  - 2 doesn't go cleanly into 15. So let's move on to our next divisor, 3.
- 3 goes cleanly into 15, leaving 5.
  - 3 does not go cleanly into 5. The next possible factor is 4.
  - 4 does not go cleanly into 5. The next possible factor is 5.
- 5 does go cleanly into 5.
- We're left only with 1, so now, we're done.

Our successful divisors in that computation represent the list of prime
factors of 60: 2, 2, 3, and 5.

You can check this yourself:

- 2 * 2 * 3 * 5
- = 4 * 15
- = 60
- Success!
"
protein-translation,"{""exercise"": ""protein-translation"", ""version"": ""1.1.1"", ""cases"": [{""description"": ""Translate input RNA sequences into proteins"", ""cases"": [{""description"": ""Methionine RNA sequence"", ""property"": ""proteins"", ""input"": {""strand"": ""AUG""}, ""expected"": [""Methionine""]}, {""description"": ""Phenylalanine RNA sequence 1"", ""property"": ""proteins"", ""input"": {""strand"": ""UUU""}, ""expected"": [""Phenylalanine""]}, {""description"": ""Phenylalanine RNA sequence 2"", ""property"": ""proteins"", ""input"": {""strand"": ""UUC""}, ""expected"": [""Phenylalanine""]}, {""description"": ""Leucine RNA sequence 1"", ""property"": ""proteins"", ""input"": {""strand"": ""UUA""}, ""expected"": [""Leucine""]}, {""description"": ""Leucine RNA sequence 2"", ""property"": ""proteins"", ""input"": {""strand"": ""UUG""}, ""expected"": [""Leucine""]}, {""description"": ""Serine RNA sequence 1"", ""property"": ""proteins"", ""input"": {""strand"": ""UCU""}, ""expected"": [""Serine""]}, {""description"": ""Serine RNA sequence 2"", ""property"": ""proteins"", ""input"": {""strand"": ""UCC""}, ""expected"": [""Serine""]}, {""description"": ""Serine RNA sequence 3"", ""property"": ""proteins"", ""input"": {""strand"": ""UCA""}, ""expected"": [""Serine""]}, {""description"": ""Serine RNA sequence 4"", ""property"": ""proteins"", ""input"": {""strand"": ""UCG""}, ""expected"": [""Serine""]}, {""description"": ""Tyrosine RNA sequence 1"", ""property"": ""proteins"", ""input"": {""strand"": ""UAU""}, ""expected"": [""Tyrosine""]}, {""description"": ""Tyrosine RNA sequence 2"", ""property"": ""proteins"", ""input"": {""strand"": ""UAC""}, ""expected"": [""Tyrosine""]}, {""description"": ""Cysteine RNA sequence 1"", ""property"": ""proteins"", ""input"": {""strand"": ""UGU""}, ""expected"": [""Cysteine""]}, {""description"": ""Cysteine RNA sequence 2"", ""property"": ""proteins"", ""input"": {""strand"": ""UGC""}, ""expected"": [""Cysteine""]}, {""description"": ""Tryptophan RNA sequence"", ""property"": ""proteins"", ""input"": {""strand"": ""UGG""}, ""expected"": [""Tryptophan""]}, {""description"": ""STOP codon RNA sequence 1"", ""property"": ""proteins"", ""input"": {""strand"": ""UAA""}, ""expected"": []}, {""description"": ""STOP codon RNA sequence 2"", ""property"": ""proteins"", ""input"": {""strand"": ""UAG""}, ""expected"": []}, {""description"": ""STOP codon RNA sequence 3"", ""property"": ""proteins"", ""input"": {""strand"": ""UGA""}, ""expected"": []}, {""description"": ""Translate RNA strand into correct protein list"", ""property"": ""proteins"", ""input"": {""strand"": ""AUGUUUUGG""}, ""expected"": [""Methionine"", ""Phenylalanine"", ""Tryptophan""]}, {""description"": ""Translation stops if STOP codon at beginning of sequence"", ""property"": ""proteins"", ""input"": {""strand"": ""UAGUGG""}, ""expected"": []}, {""description"": ""Translation stops if STOP codon at end of two-codon sequence"", ""property"": ""proteins"", ""input"": {""strand"": ""UGGUAG""}, ""expected"": [""Tryptophan""]}, {""description"": ""Translation stops if STOP codon at end of three-codon sequence"", ""property"": ""proteins"", ""input"": {""strand"": ""AUGUUUUAA""}, ""expected"": [""Methionine"", ""Phenylalanine""]}, {""description"": ""Translation stops if STOP codon in middle of three-codon sequence"", ""property"": ""proteins"", ""input"": {""strand"": ""UGGUAGUGG""}, ""expected"": [""Tryptophan""]}, {""description"": ""Translation stops if STOP codon in middle of six-codon sequence"", ""property"": ""proteins"", ""input"": {""strand"": ""UGGUGUUAUUAAUGGUUU""}, ""expected"": [""Tryptophan"", ""Cysteine"", ""Tyrosine""]}]}]}","Translate RNA sequences into proteins.

RNA can be broken into three nucleotide sequences called codons, and then translated to a polypeptide like so:

RNA: `""AUGUUUUCU""` => translates to

Codons: `""AUG"", ""UUU"", ""UCU""`
=> which become a polypeptide with the following sequence =>

Protein: `""Methionine"", ""Phenylalanine"", ""Serine""`

There are 64 codons which in turn correspond to 20 amino acids; however, all of the codon sequences and resulting amino acids are not important in this exercise.  If it works for one codon, the program should work for all of them.
However, feel free to expand the list in the test suite to include them all.

There are also three terminating codons (also known as 'STOP' codons); if any of these codons are encountered (by the ribosome), all translation ends and the protein is terminated.

All subsequent codons after are ignored, like this:

RNA: `""AUGUUUUCUUAAAUG""` =>

Codons: `""AUG"", ""UUU"", ""UCU"", ""UAA"", ""AUG""` =>

Protein: `""Methionine"", ""Phenylalanine"", ""Serine""`

Note the stop codon `""UAA""` terminates the translation and the final methionine is not translated into the protein sequence.

Below are the codons and resulting Amino Acids needed for the exercise.

Codon                 | Protein
:---                  | :---
AUG                   | Methionine
UUU, UUC              | Phenylalanine
UUA, UUG              | Leucine
UCU, UCC, UCA, UCG    | Serine
UAU, UAC              | Tyrosine
UGU, UGC              | Cysteine
UGG                   | Tryptophan
UAA, UAG, UGA         | STOP

Learn more about [protein translation on Wikipedia](http://en.wikipedia.org/wiki/Translation_(biology))
"
proverb,"{""exercise"": ""proverb"", ""version"": ""1.1.0"", ""comments"": [""JSON doesn't allow for multi-line strings, so all expected outputs are presented "", ""here as arrays of strings. It's up to the test generator to join the "", ""lines together with line breaks. ""], ""cases"": [{""description"": ""zero pieces"", ""property"": ""recite"", ""input"": {""strings"": []}, ""expected"": []}, {""description"": ""one piece"", ""property"": ""recite"", ""input"": {""strings"": [""nail""]}, ""expected"": [""And all for the want of a nail.""]}, {""description"": ""two pieces"", ""property"": ""recite"", ""input"": {""strings"": [""nail"", ""shoe""]}, ""expected"": [""For want of a nail the shoe was lost."", ""And all for the want of a nail.""]}, {""description"": ""three pieces"", ""property"": ""recite"", ""input"": {""strings"": [""nail"", ""shoe"", ""horse""]}, ""expected"": [""For want of a nail the shoe was lost."", ""For want of a shoe the horse was lost."", ""And all for the want of a nail.""]}, {""description"": ""full proverb"", ""property"": ""recite"", ""input"": {""strings"": [""nail"", ""shoe"", ""horse"", ""rider"", ""message"", ""battle"", ""kingdom""]}, ""expected"": [""For want of a nail the shoe was lost."", ""For want of a shoe the horse was lost."", ""For want of a horse the rider was lost."", ""For want of a rider the message was lost."", ""For want of a message the battle was lost."", ""For want of a battle the kingdom was lost."", ""And all for the want of a nail.""]}, {""description"": ""four pieces modernized"", ""property"": ""recite"", ""input"": {""strings"": [""pin"", ""gun"", ""soldier"", ""battle""]}, ""expected"": [""For want of a pin the gun was lost."", ""For want of a gun the soldier was lost."", ""For want of a soldier the battle was lost."", ""And all for the want of a pin.""]}]}","For want of a horseshoe nail, a kingdom was lost, or so the saying goes.

Given a list of inputs, generate the relevant proverb. For example, given the list `[""nail"", ""shoe"", ""horse"", ""rider"", ""message"", ""battle"", ""kingdom""]`, you will output the full text of this proverbial rhyme:

```text
For want of a nail the shoe was lost.
For want of a shoe the horse was lost.
For want of a horse the rider was lost.
For want of a rider the message was lost.
For want of a message the battle was lost.
For want of a battle the kingdom was lost.
And all for the want of a nail.
```

Note that the list of inputs may vary; your solution should be able to handle lists of arbitrary length and content. No line of the output text should be a static, unchanging string; all should vary according to the input given.
"
pythagorean-triplet,{},"A Pythagorean triplet is a set of three natural numbers, {a, b, c}, for
which,

```text
a**2 + b**2 = c**2
```

For example,

```text
3**2 + 4**2 = 9 + 16 = 25 = 5**2.
```

There exists exactly one Pythagorean triplet for which a + b + c = 1000.

Find the product a * b * c.
"
queen-attack,"{""exercise"": ""queen-attack"", ""version"": ""2.1.0"", ""comments"": [""Testing invalid positions will vary by language. The expected"", ""value of -1 is there to indicate some sort of failure should"", ""occur, while a 0 means no failure."", ""Some languages implement tests beyond this set, such as checking"", ""for two pieces being placed on the same position, representing"", ""the board graphically, or using standard chess notation. Those"", ""tests can be offered as extra credit""], ""cases"": [{""description"": ""Test creation of Queens with valid and invalid positions"", ""cases"": [{""description"": ""queen with a valid position"", ""property"": ""create"", ""input"": {""queen"": {""position"": {""row"": 2, ""column"": 2}}}, ""expected"": 0}, {""description"": ""queen must have positive row"", ""property"": ""create"", ""input"": {""queen"": {""position"": {""row"": -2, ""column"": 2}}}, ""expected"": -1}, {""description"": ""queen must have row on board"", ""property"": ""create"", ""input"": {""queen"": {""position"": {""row"": 8, ""column"": 4}}}, ""expected"": -1}, {""description"": ""queen must have positive column"", ""property"": ""create"", ""input"": {""queen"": {""position"": {""row"": 2, ""column"": -2}}}, ""expected"": -1}, {""description"": ""queen must have column on board"", ""property"": ""create"", ""input"": {""queen"": {""position"": {""row"": 4, ""column"": 8}}}, ""expected"": -1}]}, {""description"": ""Test the ability of one queen to attack another"", ""cases"": [{""description"": ""can not attack"", ""property"": ""canAttack"", ""input"": {""white_queen"": {""position"": {""row"": 2, ""column"": 4}}, ""black_queen"": {""position"": {""row"": 6, ""column"": 6}}}, ""expected"": false}, {""description"": ""can attack on same row"", ""property"": ""canAttack"", ""input"": {""white_queen"": {""position"": {""row"": 2, ""column"": 4}}, ""black_queen"": {""position"": {""row"": 2, ""column"": 6}}}, ""expected"": true}, {""description"": ""can attack on same column"", ""property"": ""canAttack"", ""input"": {""white_queen"": {""position"": {""row"": 4, ""column"": 5}}, ""black_queen"": {""position"": {""row"": 2, ""column"": 5}}}, ""expected"": true}, {""description"": ""can attack on first diagonal"", ""property"": ""canAttack"", ""input"": {""white_queen"": {""position"": {""row"": 2, ""column"": 2}}, ""black_queen"": {""position"": {""row"": 0, ""column"": 4}}}, ""expected"": true}, {""description"": ""can attack on second diagonal"", ""property"": ""canAttack"", ""input"": {""white_queen"": {""position"": {""row"": 2, ""column"": 2}}, ""black_queen"": {""position"": {""row"": 3, ""column"": 1}}}, ""expected"": true}, {""description"": ""can attack on third diagonal"", ""property"": ""canAttack"", ""input"": {""white_queen"": {""position"": {""row"": 2, ""column"": 2}}, ""black_queen"": {""position"": {""row"": 1, ""column"": 1}}}, ""expected"": true}, {""description"": ""can attack on fourth diagonal"", ""property"": ""canAttack"", ""input"": {""white_queen"": {""position"": {""row"": 2, ""column"": 2}}, ""black_queen"": {""position"": {""row"": 5, ""column"": 5}}}, ""expected"": true}]}]}","Given the position of two queens on a chess board, indicate whether or not they
are positioned so that they can attack each other.

In the game of chess, a queen can attack pieces which are on the same
row, column, or diagonal.

A chessboard can be represented by an 8 by 8 array.

So if you're told the white queen is at (2, 3) and the black queen at
(5, 6), then you'd know you've got a set-up like so:

```text
_ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _
_ _ _ W _ _ _ _
_ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _
_ _ _ _ _ _ B _
_ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _
```

You'd also be able to answer whether the queens can attack each other.
In this case, that answer would be yes, they can, because both pieces
share a diagonal.
"
rail-fence-cipher,"{""exercise"": ""rail-fence-cipher"", ""version"": ""1.1.0"", ""comments"": [""The tests do not expect any normalization or cleaning."", ""That trade is tested in enough other exercises.""], ""cases"": [{""description"": ""encode"", ""cases"": [{""description"": ""encode with two rails"", ""property"": ""encode"", ""input"": {""msg"": ""XOXOXOXOXOXOXOXOXO"", ""rails"": 2}, ""expected"": ""XXXXXXXXXOOOOOOOOO""}, {""description"": ""encode with three rails"", ""property"": ""encode"", ""input"": {""msg"": ""WEAREDISCOVEREDFLEEATONCE"", ""rails"": 3}, ""expected"": ""WECRLTEERDSOEEFEAOCAIVDEN""}, {""description"": ""encode with ending in the middle"", ""property"": ""encode"", ""input"": {""msg"": ""EXERCISES"", ""rails"": 4}, ""expected"": ""ESXIEECSR""}]}, {""description"": ""decode"", ""cases"": [{""description"": ""decode with three rails"", ""property"": ""decode"", ""input"": {""msg"": ""TEITELHDVLSNHDTISEIIEA"", ""rails"": 3}, ""expected"": ""THEDEVILISINTHEDETAILS""}, {""description"": ""decode with five rails"", ""property"": ""decode"", ""input"": {""msg"": ""EIEXMSMESAORIWSCE"", ""rails"": 5}, ""expected"": ""EXERCISMISAWESOME""}, {""description"": ""decode with six rails"", ""property"": ""decode"", ""input"": {""msg"": ""133714114238148966225439541018335470986172518171757571896261"", ""rails"": 6}, ""expected"": ""112358132134558914423337761098715972584418167651094617711286""}]}]}","Implement encoding and decoding for the rail fence cipher.

The Rail Fence cipher is a form of transposition cipher that gets its name from
the way in which it's encoded. It was already used by the ancient Greeks.

In the Rail Fence cipher, the message is written downwards on successive ""rails""
of an imaginary fence, then moving up when we get to the bottom (like a zig-zag).
Finally the message is then read off in rows.

For example, using three ""rails"" and the message ""WE ARE DISCOVERED FLEE AT ONCE"",
the cipherer writes out:

```text
W . . . E . . . C . . . R . . . L . . . T . . . E
. E . R . D . S . O . E . E . F . E . A . O . C .
. . A . . . I . . . V . . . D . . . E . . . N . .
```

Then reads off:

```text
WECRLTEERDSOEEFEAOCAIVDEN
```

To decrypt a message you take the zig-zag shape and fill the ciphertext along the rows.

```text
? . . . ? . . . ? . . . ? . . . ? . . . ? . . . ?
. ? . ? . ? . ? . ? . ? . ? . ? . ? . ? . ? . ? .
. . ? . . . ? . . . ? . . . ? . . . ? . . . ? . .
```

The first row has seven spots that can be filled with ""WECRLTE"".

```text
W . . . E . . . C . . . R . . . L . . . T . . . E
. ? . ? . ? . ? . ? . ? . ? . ? . ? . ? . ? . ? .
. . ? . . . ? . . . ? . . . ? . . . ? . . . ? . .
```

Now the 2nd row takes ""ERDSOEEFEAOC"".

```text
W . . . E . . . C . . . R . . . L . . . T . . . E
. E . R . D . S . O . E . E . F . E . A . O . C .
. . ? . . . ? . . . ? . . . ? . . . ? . . . ? . .
```

Leaving ""AIVDEN"" for the last row.

```text
W . . . E . . . C . . . R . . . L . . . T . . . E
. E . R . D . S . O . E . E . F . E . A . O . C .
. . A . . . I . . . V . . . D . . . E . . . N . .
```

If you now read along the zig-zag shape you can read the original message.
"
raindrops,"{""exercise"": ""raindrops"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""the sound for 1 is 1"", ""property"": ""convert"", ""input"": {""number"": 1}, ""expected"": ""1""}, {""description"": ""the sound for 3 is Pling"", ""property"": ""convert"", ""input"": {""number"": 3}, ""expected"": ""Pling""}, {""description"": ""the sound for 5 is Plang"", ""property"": ""convert"", ""input"": {""number"": 5}, ""expected"": ""Plang""}, {""description"": ""the sound for 7 is Plong"", ""property"": ""convert"", ""input"": {""number"": 7}, ""expected"": ""Plong""}, {""description"": ""the sound for 6 is Pling as it has a factor 3"", ""property"": ""convert"", ""input"": {""number"": 6}, ""expected"": ""Pling""}, {""description"": ""2 to the power 3 does not make a raindrop sound as 3 is the exponent not the base"", ""property"": ""convert"", ""input"": {""number"": 8}, ""expected"": ""8""}, {""description"": ""the sound for 9 is Pling as it has a factor 3"", ""property"": ""convert"", ""input"": {""number"": 9}, ""expected"": ""Pling""}, {""description"": ""the sound for 10 is Plang as it has a factor 5"", ""property"": ""convert"", ""input"": {""number"": 10}, ""expected"": ""Plang""}, {""description"": ""the sound for 14 is Plong as it has a factor of 7"", ""property"": ""convert"", ""input"": {""number"": 14}, ""expected"": ""Plong""}, {""description"": ""the sound for 15 is PlingPlang as it has factors 3 and 5"", ""property"": ""convert"", ""input"": {""number"": 15}, ""expected"": ""PlingPlang""}, {""description"": ""the sound for 21 is PlingPlong as it has factors 3 and 7"", ""property"": ""convert"", ""input"": {""number"": 21}, ""expected"": ""PlingPlong""}, {""description"": ""the sound for 25 is Plang as it has a factor 5"", ""property"": ""convert"", ""input"": {""number"": 25}, ""expected"": ""Plang""}, {""description"": ""the sound for 27 is Pling as it has a factor 3"", ""property"": ""convert"", ""input"": {""number"": 27}, ""expected"": ""Pling""}, {""description"": ""the sound for 35 is PlangPlong as it has factors 5 and 7"", ""property"": ""convert"", ""input"": {""number"": 35}, ""expected"": ""PlangPlong""}, {""description"": ""the sound for 49 is Plong as it has a factor 7"", ""property"": ""convert"", ""input"": {""number"": 49}, ""expected"": ""Plong""}, {""description"": ""the sound for 52 is 52"", ""property"": ""convert"", ""input"": {""number"": 52}, ""expected"": ""52""}, {""description"": ""the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7"", ""property"": ""convert"", ""input"": {""number"": 105}, ""expected"": ""PlingPlangPlong""}, {""description"": ""the sound for 3125 is Plang as it has a factor 5"", ""property"": ""convert"", ""input"": {""number"": 3125}, ""expected"": ""Plang""}]}","Convert a number to a string, the contents of which depend on the number's factors.

- If the number has 3 as a factor, output 'Pling'.
- If the number has 5 as a factor, output 'Plang'.
- If the number has 7 as a factor, output 'Plong'.
- If the number does not have 3, 5, or 7 as a factor,
  just pass the number's digits straight through.

## Examples

- 28's factors are 1, 2, 4, **7**, 14, 28.
  - In raindrop-speak, this would be a simple ""Plong"".
- 30's factors are 1, 2, **3**, **5**, 6, 10, 15, 30.
  - In raindrop-speak, this would be a ""PlingPlang"".
- 34 has four factors: 1, 2, 17, and 34.
  - In raindrop-speak, this would be ""34"".
"
rational-numbers,"{""exercise"": ""rational-numbers"", ""version"": ""1.0.0"", ""comments"": ["" The canonical data assumes mathematically correct real   "", "" numbers. The testsuites should consider rounding errors  "", "" instead of testing for exact values for any non-integer  "", "" tests.                                                   "", "" Rational numbers r are represented as arrays [a, b] so   "", "" that r = a/b.                                            ""], ""cases"": [{""description"": ""Arithmetic"", ""cases"": [{""description"": ""Addition"", ""cases"": [{""description"": ""Add two positive rational numbers"", ""property"": ""add"", ""input"": {""r1"": [1, 2], ""r2"": [2, 3]}, ""expected"": [7, 6]}, {""description"": ""Add a positive rational number and a negative rational number"", ""property"": ""add"", ""input"": {""r1"": [1, 2], ""r2"": [-2, 3]}, ""expected"": [-1, 6]}, {""description"": ""Add two negative rational numbers"", ""property"": ""add"", ""input"": {""r1"": [-1, 2], ""r2"": [-2, 3]}, ""expected"": [-7, 6]}, {""description"": ""Add a rational number to its additive inverse"", ""property"": ""add"", ""input"": {""r1"": [1, 2], ""r2"": [-1, 2]}, ""expected"": [0, 1]}]}, {""description"": ""Subtraction"", ""cases"": [{""description"": ""Subtract two positive rational numbers"", ""property"": ""sub"", ""input"": {""r1"": [1, 2], ""r2"": [2, 3]}, ""expected"": [-1, 6]}, {""description"": ""Subtract a positive rational number and a negative rational number"", ""property"": ""sub"", ""input"": {""r1"": [1, 2], ""r2"": [-2, 3]}, ""expected"": [7, 6]}, {""description"": ""Subtract two negative rational numbers"", ""property"": ""sub"", ""input"": {""r1"": [-1, 2], ""r2"": [-2, 3]}, ""expected"": [1, 6]}, {""description"": ""Subtract a rational number from itself"", ""property"": ""sub"", ""input"": {""r1"": [1, 2], ""r2"": [1, 2]}, ""expected"": [0, 1]}]}, {""description"": ""Multiplication"", ""cases"": [{""description"": ""Multiply two positive rational numbers"", ""property"": ""mul"", ""input"": {""r1"": [1, 2], ""r2"": [2, 3]}, ""expected"": [1, 3]}, {""description"": ""Multiply a negative rational number by a positive rational number"", ""property"": ""mul"", ""input"": {""r1"": [-1, 2], ""r2"": [2, 3]}, ""expected"": [-1, 3]}, {""description"": ""Multiply two negative rational numbers"", ""property"": ""mul"", ""input"": {""r1"": [-1, 2], ""r2"": [-2, 3]}, ""expected"": [1, 3]}, {""description"": ""Multiply a rational number by its reciprocal"", ""property"": ""mul"", ""input"": {""r1"": [1, 2], ""r2"": [2, 1]}, ""expected"": [1, 1]}, {""description"": ""Multiply a rational number by 1"", ""property"": ""mul"", ""input"": {""r1"": [1, 2], ""r2"": [1, 1]}, ""expected"": [1, 2]}, {""description"": ""Multiply a rational number by 0"", ""property"": ""mul"", ""input"": {""r1"": [1, 2], ""r2"": [0, 1]}, ""expected"": [0, 1]}]}, {""description"": ""Division"", ""cases"": [{""description"": ""Divide two positive rational numbers"", ""property"": ""div"", ""input"": {""r1"": [1, 2], ""r2"": [2, 3]}, ""expected"": [3, 4]}, {""description"": ""Divide a positive rational number by a negative rational number"", ""property"": ""div"", ""input"": {""r1"": [1, 2], ""r2"": [-2, 3]}, ""expected"": [-3, 4]}, {""description"": ""Divide two negative rational numbers"", ""property"": ""div"", ""input"": {""r1"": [-1, 2], ""r2"": [-2, 3]}, ""expected"": [3, 4]}, {""description"": ""Divide a rational number by 1"", ""property"": ""div"", ""input"": {""r1"": [1, 2], ""r2"": [1, 1]}, ""expected"": [1, 2]}]}]}, {""description"": ""Absolute value"", ""cases"": [{""description"": ""Absolute value of a positive rational number"", ""property"": ""abs"", ""input"": {""r"": [1, 2]}, ""expected"": [1, 2]}, {""description"": ""Absolute value of a negative rational number"", ""property"": ""abs"", ""input"": {""r"": [-1, 2]}, ""expected"": [1, 2]}, {""description"": ""Absolute value of zero"", ""property"": ""abs"", ""input"": {""r"": [0, 1]}, ""expected"": [0, 1]}]}, {""description"": ""Exponentiation of a rational number"", ""cases"": [{""description"": ""Raise a positive rational number to a positive integer power"", ""property"": ""exprational"", ""input"": {""r"": [1, 2], ""n"": 3}, ""expected"": [1, 8]}, {""description"": ""Raise a negative rational number to a positive integer power"", ""property"": ""exprational"", ""input"": {""r"": [-1, 2], ""n"": 3}, ""expected"": [-1, 8]}, {""description"": ""Raise zero to an integer power"", ""property"": ""exprational"", ""input"": {""r"": [0, 1], ""n"": 5}, ""expected"": [0, 1]}, {""description"": ""Raise one to an integer power"", ""property"": ""exprational"", ""input"": {""r"": [1, 1], ""n"": 4}, ""expected"": [1, 1]}, {""description"": ""Raise a positive rational number to the power of zero"", ""property"": ""exprational"", ""input"": {""r"": [1, 2], ""n"": 0}, ""expected"": [1, 1]}, {""description"": ""Raise a negative rational number to the power of zero"", ""property"": ""exprational"", ""input"": {""r"": [-1, 2], ""n"": 0}, ""expected"": [1, 1]}]}, {""description"": ""Exponentiation of a real number to a rational number"", ""cases"": [{""description"": ""Raise a real number to a positive rational number"", ""property"": ""expreal"", ""input"": {""x"": 8, ""r"": [4, 3]}, ""expected"": 16.0}, {""description"": ""Raise a real number to a negative rational number"", ""property"": ""expreal"", ""input"": {""x"": 9, ""r"": [-1, 2]}, ""expected"": 0.3333333333333333}, {""description"": ""Raise a real number to a zero rational number"", ""property"": ""expreal"", ""input"": {""x"": 2, ""r"": [0, 1]}, ""expected"": 1.0}]}, {""description"": ""Reduction to lowest terms"", ""cases"": [{""description"": ""Reduce a positive rational number to lowest terms"", ""property"": ""reduce"", ""input"": {""r"": [2, 4]}, ""expected"": [1, 2]}, {""description"": ""Reduce a negative rational number to lowest terms"", ""property"": ""reduce"", ""input"": {""r"": [-4, 6]}, ""expected"": [-2, 3]}, {""description"": ""Reduce a rational number with a negative denominator to lowest terms"", ""property"": ""reduce"", ""input"": {""r"": [3, -9]}, ""expected"": [-1, 3]}, {""description"": ""Reduce zero to lowest terms"", ""property"": ""reduce"", ""input"": {""r"": [0, 6]}, ""expected"": [0, 1]}, {""description"": ""Reduce an integer to lowest terms"", ""property"": ""reduce"", ""input"": {""r"": [-14, 7]}, ""expected"": [-2, 1]}, {""description"": ""Reduce one to lowest terms"", ""property"": ""reduce"", ""input"": {""r"": [13, 13]}, ""expected"": [1, 1]}]}]}","A rational number is defined as the quotient of two integers `a` and `b`, called the numerator and denominator, respectively, where `b != 0`.

The absolute value `|r|` of the rational number `r = a/b` is equal to `|a|/|b|`.

The sum of two rational numbers `r1 = a1/b1` and `r2 = a2/b2` is `r1 + r2 = a1/b1 + a2/b2 = (a1 * b2 + a2 * b1) / (b1 * b2)`.

The difference of two rational numbers `r1 = a1/b1` and `r2 = a2/b2` is `r1 - r2 = a1/b1 - a2/b2 = (a1 * b2 - a2 * b1) / (b1 * b2)`.

The product (multiplication) of two rational numbers `r1 = a1/b1` and `r2 = a2/b2` is `r1 * r2 = (a1 * a2) / (b1 * b2)`.

Dividing a rational number `r1 = a1/b1` by another `r2 = a2/b2` is `r1 / r2 = (a1 * b2) / (a2 * b1)` if `a2 * b1` is not zero.

Exponentiation of a rational number `r = a/b` to a non-negative integer power `n` is `r^n = (a^n)/(b^n)`.

Exponentiation of a rational number `r = a/b` to a negative integer power `n` is `r^n = (b^m)/(a^m)`, where `m = |n|`.

Exponentiation of a rational number `r = a/b` to a real (floating-point) number `x` is the quotient `(a^x)/(b^x)`, which is a real number.

Exponentiation of a real number `x` to a rational number `r = a/b` is `x^(a/b) = root(x^a, b)`, where `root(p, q)` is the `q`th root of `p`.

Implement the following operations:
 - addition, subtraction, multiplication and division of two rational numbers,
 - absolute value, exponentiation of a given rational number to an integer power, exponentiation of a given rational number to a real (floating-point) power, exponentiation of a real number to a rational number.

Your implementation of rational numbers should always be reduced to lowest terms. For example, `4/4` should reduce to `1/1`, `30/60` should reduce to `1/2`, `12/8` should reduce to `3/2`, etc. To reduce a rational number `r = a/b`, divide `a` and `b` by the greatest common divisor (gcd) of `a` and `b`. So, for example, `gcd(12, 8) = 4`, so `r = 12/8` can be reduced to `(12/4)/(8/4) = 3/2`.

Assume that the programming language you are using does not have an implementation of rational numbers.
"
react,"{""exercise"": ""react"", ""version"": ""2.0.0"", ""comments"": [""Note that, due to the nature of this exercise,"", ""the tests are specified using their cells and a series of operations to perform on the cells."", """", ""Each object in the `cells` array has a `name` and `type` (`input` or `output`)."", ""input cells have an `initial_value`, and compute cells have `inputs` and `compute_function`"", """", ""Each object in the `operations` array has a `type`."", ""Depending on the type, it also has additional fields."", ""The possible types and semantics of their fields are as follows:"", """", ""* expect_cell_value (`cell`, `value`): Expect that cell `cell` has value `value`."", ""* set_value (`cell`, `value`, optionally `expect_callbacks`, `expect_callbacks_not_to_be_called`): Sets input cell `cell` to value `value`."", ""  Expect that, as a result, all callbacks in `expect_callbacks` (if present) were called exactly once with the designated value"", ""  Expect that no callbacks in `expect_callbacks_not_to_be_called` (if present) were called as a result."", ""* add_callback (`cell`, `name`): Adds a callback to cell `cell`. Store the callback ID in a variable named `name`."", ""  all callbacks are assumed to simply store the values they're called with in some array."", ""* remove_callback (`cell`, `name`): Removes the callback `name` from cell `cell`."", """", ""Additional notes:"", """", ""These tests only describe compute cells with up to two inputs."", ""Some languages may choose to have two functions: create_compute1 and create_compute2."", ""The compiler can then ensure that you never pass a two-input function to a one-input compute cell."", ""(This benefit only exists for statically typed languages)."", ""If your track does this, you should test that all combinations of"", ""(compute1, compute2) can depend on (input, compute1, compute2) are tested."", ""Other languages simply have a single create_compute function, taking a list of input cells."", ""Of the languages in this category, there are two subcategories:"", ""- In some languages, the compute function might take as many inputs as there are input cells."", ""  (it might be very difficult to write the type signature for create_compute in statically typed languages!)"", ""- In other languages, the compute function might always take a single input (the list of values)"", ""  (again this gives up the ability to check that the arities match)"", ""Both subcategories using create_compute have the benefit of more flexibility in arity,"", ""fewer repetitive tests (only need to test that compute cells can depend on compute cells and input cells),"", ""and likely less repetitive code."", """", ""Finally, note that all values are integers."", ""If your language supports generics, you may consider allowing reactors to act on other types."", ""Tests for that are not included here."", """"], ""cases"": [{""description"": ""input cells have a value"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 10}], ""operations"": [{""type"": ""expect_cell_value"", ""cell"": ""input"", ""value"": 10}]}, ""expected"": {}}, {""description"": ""an input cell's value can be set"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 4}], ""operations"": [{""type"": ""set_value"", ""cell"": ""input"", ""value"": 20}, {""type"": ""expect_cell_value"", ""cell"": ""input"", ""value"": 20}]}, ""expected"": {}}, {""description"": ""compute cells calculate initial value"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""output"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] + 1""}], ""operations"": [{""type"": ""expect_cell_value"", ""cell"": ""output"", ""value"": 2}]}, ""expected"": {}}, {""description"": ""compute cells take inputs in the right order"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""one"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""two"", ""type"": ""input"", ""initial_value"": 2}, {""name"": ""output"", ""type"": ""compute"", ""inputs"": [""one"", ""two""], ""compute_function"": ""inputs[0] + inputs[1] * 10""}], ""operations"": [{""type"": ""expect_cell_value"", ""cell"": ""output"", ""value"": 21}]}, ""expected"": {}}, {""description"": ""compute cells update value when dependencies are changed"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""output"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] + 1""}], ""operations"": [{""type"": ""set_value"", ""cell"": ""input"", ""value"": 3}, {""type"": ""expect_cell_value"", ""cell"": ""output"", ""value"": 4}]}, ""expected"": {}}, {""description"": ""compute cells can depend on other compute cells"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""times_two"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] * 2""}, {""name"": ""times_thirty"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] * 30""}, {""name"": ""output"", ""type"": ""compute"", ""inputs"": [""times_two"", ""times_thirty""], ""compute_function"": ""inputs[0] + inputs[1]""}], ""operations"": [{""type"": ""expect_cell_value"", ""cell"": ""output"", ""value"": 32}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 3}, {""type"": ""expect_cell_value"", ""cell"": ""output"", ""value"": 96}]}, ""expected"": {}}, {""description"": ""compute cells fire callbacks"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""output"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] + 1""}], ""operations"": [{""type"": ""add_callback"", ""cell"": ""output"", ""name"": ""callback1""}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 3, ""expect_callbacks"": {""callback1"": 4}}]}, ""expected"": {}}, {""description"": ""callback cells only fire on change"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""output"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""if inputs[0] < 3 then 111 else 222""}], ""operations"": [{""type"": ""add_callback"", ""cell"": ""output"", ""name"": ""callback1""}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 2, ""expect_callbacks_not_to_be_called"": [""callback1""]}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 4, ""expect_callbacks"": {""callback1"": 222}}]}, ""expected"": {}}, {""description"": ""callbacks do not report already reported values"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""output"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] + 1""}], ""operations"": [{""type"": ""add_callback"", ""cell"": ""output"", ""name"": ""callback1""}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 2, ""expect_callbacks"": {""callback1"": 3}}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 3, ""expect_callbacks"": {""callback1"": 4}}]}, ""expected"": {}}, {""description"": ""callbacks can fire from multiple cells"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""plus_one"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] + 1""}, {""name"": ""minus_one"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] - 1""}], ""operations"": [{""type"": ""add_callback"", ""cell"": ""plus_one"", ""name"": ""callback1""}, {""type"": ""add_callback"", ""cell"": ""minus_one"", ""name"": ""callback2""}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 10, ""expect_callbacks"": {""callback1"": 11, ""callback2"": 9}}]}, ""expected"": {}}, {""description"": ""callbacks can be added and removed"", ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 11}, {""name"": ""output"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] + 1""}], ""operations"": [{""type"": ""add_callback"", ""cell"": ""output"", ""name"": ""callback1""}, {""type"": ""add_callback"", ""cell"": ""output"", ""name"": ""callback2""}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 31, ""expect_callbacks"": {""callback1"": 32, ""callback2"": 32}}, {""type"": ""remove_callback"", ""cell"": ""output"", ""name"": ""callback1""}, {""type"": ""add_callback"", ""cell"": ""output"", ""name"": ""callback3""}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 41, ""expect_callbacks"": {""callback2"": 42, ""callback3"": 42}, ""expect_callbacks_not_to_be_called"": [""callback1""]}]}, ""expected"": {}}, {""description"": ""removing a callback multiple times doesn't interfere with other callbacks"", ""comments"": [""Some incorrect implementations store their callbacks in an array"", ""and removing a callback repeatedly either removes an unrelated callback"", ""or causes an out of bounds access.""], ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""output"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] + 1""}], ""operations"": [{""type"": ""add_callback"", ""cell"": ""output"", ""name"": ""callback1""}, {""type"": ""add_callback"", ""cell"": ""output"", ""name"": ""callback2""}, {""type"": ""remove_callback"", ""cell"": ""output"", ""name"": ""callback1""}, {""type"": ""remove_callback"", ""cell"": ""output"", ""name"": ""callback1""}, {""type"": ""remove_callback"", ""cell"": ""output"", ""name"": ""callback1""}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 2, ""expect_callbacks"": {""callback2"": 3}, ""expect_callbacks_not_to_be_called"": [""callback1""]}]}, ""expected"": {}}, {""description"": ""callbacks should only be called once even if multiple dependencies change"", ""comments"": [""Some incorrect implementations call a callback function too early,"", ""when not all of the inputs of a compute cell have propagated new values.""], ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""plus_one"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] + 1""}, {""name"": ""minus_one1"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] - 1""}, {""name"": ""minus_one2"", ""type"": ""compute"", ""inputs"": [""minus_one1""], ""compute_function"": ""inputs[0] - 1""}, {""name"": ""output"", ""type"": ""compute"", ""inputs"": [""plus_one"", ""minus_one2""], ""compute_function"": ""inputs[0] * inputs[1]""}], ""operations"": [{""type"": ""add_callback"", ""cell"": ""output"", ""name"": ""callback1""}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 4, ""expect_callbacks"": {""callback1"": 10}}]}, ""expected"": {}}, {""description"": ""callbacks should not be called if dependencies change but output value doesn't change"", ""comments"": [""Some incorrect implementations simply mark a compute cell as dirty when a dependency changes,"", ""then call callbacks on all dirty cells."", ""This is incorrect since the specification indicates only to call callbacks on change.""], ""property"": ""react"", ""input"": {""cells"": [{""name"": ""input"", ""type"": ""input"", ""initial_value"": 1}, {""name"": ""plus_one"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] + 1""}, {""name"": ""minus_one"", ""type"": ""compute"", ""inputs"": [""input""], ""compute_function"": ""inputs[0] - 1""}, {""name"": ""always_two"", ""type"": ""compute"", ""inputs"": [""plus_one"", ""minus_one""], ""compute_function"": ""inputs[0] - inputs[1]""}], ""operations"": [{""type"": ""add_callback"", ""cell"": ""always_two"", ""name"": ""callback1""}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 2, ""expect_callbacks_not_to_be_called"": [""callback1""]}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 3, ""expect_callbacks_not_to_be_called"": [""callback1""]}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 4, ""expect_callbacks_not_to_be_called"": [""callback1""]}, {""type"": ""set_value"", ""cell"": ""input"", ""value"": 5, ""expect_callbacks_not_to_be_called"": [""callback1""]}]}, ""expected"": {}}]}","Implement a basic reactive system.

Reactive programming is a programming paradigm that focuses on how values
are computed in terms of each other to allow a change to one value to
automatically propagate to other values, like in a spreadsheet.

Implement a basic reactive system with cells with settable values (""input""
cells) and cells with values computed in terms of other cells (""compute""
cells). Implement updates so that when an input value is changed, values
propagate to reach a new stable system state.

In addition, compute cells should allow for registering change notification
callbacks.  Call a cell’s callbacks when the cell’s value in a new stable
state has changed from the previous stable state.
"
rectangles,"{""exercise"": ""rectangles"", ""version"": ""1.1.0"", ""comments"": [""The inputs are represented as arrays of strings to improve readability in this JSON file."", ""Your track may choose whether to present the input as a single string (concatenating all the lines) or as the list.""], ""cases"": [{""description"": ""no rows"", ""property"": ""rectangles"", ""input"": {""strings"": []}, ""expected"": 0}, {""description"": ""no columns"", ""property"": ""rectangles"", ""input"": {""strings"": [""""]}, ""expected"": 0}, {""description"": ""no rectangles"", ""property"": ""rectangles"", ""input"": {""strings"": ["" ""]}, ""expected"": 0}, {""description"": ""one rectangle"", ""property"": ""rectangles"", ""input"": {""strings"": [""+-+"", ""| |"", ""+-+""]}, ""expected"": 1}, {""description"": ""two rectangles without shared parts"", ""property"": ""rectangles"", ""input"": {""strings"": [""  +-+"", ""  | |"", ""+-+-+"", ""| |  "", ""+-+  ""]}, ""expected"": 2}, {""description"": ""five rectangles with shared parts"", ""property"": ""rectangles"", ""input"": {""strings"": [""  +-+"", ""  | |"", ""+-+-+"", ""| | |"", ""+-+-+""]}, ""expected"": 5}, {""description"": ""rectangle of height 1 is counted"", ""property"": ""rectangles"", ""input"": {""strings"": [""+--+"", ""+--+""]}, ""expected"": 1}, {""description"": ""rectangle of width 1 is counted"", ""property"": ""rectangles"", ""input"": {""strings"": [""++"", ""||"", ""++""]}, ""expected"": 1}, {""description"": ""1x1 square is counted"", ""property"": ""rectangles"", ""input"": {""strings"": [""++"", ""++""]}, ""expected"": 1}, {""description"": ""only complete rectangles are counted"", ""property"": ""rectangles"", ""input"": {""strings"": [""  +-+"", ""    |"", ""+-+-+"", ""| | -"", ""+-+-+""]}, ""expected"": 1}, {""description"": ""rectangles can be of different sizes"", ""property"": ""rectangles"", ""input"": {""strings"": [""+------+----+"", ""|      |    |"", ""+---+--+    |"", ""|   |       |"", ""+---+-------+""]}, ""expected"": 3}, {""description"": ""corner is required for a rectangle to be complete"", ""property"": ""rectangles"", ""input"": {""strings"": [""+------+----+"", ""|      |    |"", ""+------+    |"", ""|   |       |"", ""+---+-------+""]}, ""expected"": 2}, {""description"": ""large input with many rectangles"", ""property"": ""rectangles"", ""input"": {""strings"": [""+---+--+----+"", ""|   +--+----+"", ""+---+--+    |"", ""|   +--+----+"", ""+---+--+--+-+"", ""+---+--+--+-+"", ""+------+  | |"", ""          +-+""]}, ""expected"": 60}]}","Count the rectangles in an ASCII diagram like the one below.

```text
   +--+
  ++  |
+-++--+
|  |  |
+--+--+
```

The above diagram contains 6 rectangles:

```text


+-----+
|     |
+-----+
```

```text
   +--+
   |  |
   |  |
   |  |
   +--+
```

```text
   +--+
   |  |
   +--+


```

```text


   +--+
   |  |
   +--+
```

```text


+--+
|  |
+--+
```

```text

  ++
  ++


```

You may assume that the input is always a proper rectangle (i.e. the length of
every line equals the length of the first line).
"
rest-api,"{""exercise"": ""rest-api"", ""version"": ""1.0.0"", ""comments"": [""The state of the API database before the request is represented"", ""by the input->database object. Your track may determine how this"", ""initial state is set."", ""The input->payload and expected objects should be marshalled as"", ""strings in track implementation, as parsing and validating text"", ""payloads is an integral part of implementing a REST API.""], ""cases"": [{""description"": ""user management"", ""cases"": [{""description"": ""no users"", ""property"": ""get"", ""input"": {""database"": {""users"": []}, ""url"": ""/users""}, ""expected"": {""users"": []}}, {""description"": ""add user"", ""property"": ""post"", ""input"": {""database"": {""users"": []}, ""url"": ""/add"", ""payload"": {""user"": ""Adam""}}, ""expected"": {""name"": ""Adam"", ""owes"": {}, ""owed_by"": {}, ""balance"": 0.0}}, {""description"": ""get single user"", ""property"": ""get"", ""input"": {""database"": {""users"": [{""name"": ""Adam"", ""owes"": {}, ""owed_by"": {}, ""balance"": 0.0}, {""name"": ""Bob"", ""owes"": {}, ""owed_by"": {}, ""balance"": 0.0}]}, ""url"": ""/users"", ""payload"": {""users"": [""Bob""]}}, ""expected"": {""users"": [{""name"": ""Bob"", ""owes"": {}, ""owed_by"": {}, ""balance"": 0.0}]}}]}, {""description"": ""iou"", ""cases"": [{""description"": ""both users have 0 balance"", ""property"": ""post"", ""input"": {""database"": {""users"": [{""name"": ""Adam"", ""owes"": {}, ""owed_by"": {}, ""balance"": 0.0}, {""name"": ""Bob"", ""owes"": {}, ""owed_by"": {}, ""balance"": 0.0}]}, ""url"": ""/iou"", ""payload"": {""lender"": ""Adam"", ""borrower"": ""Bob"", ""amount"": 3.0}}, ""expected"": {""users"": [{""name"": ""Adam"", ""owes"": {}, ""owed_by"": {""Bob"": 3.0}, ""balance"": 3.0}, {""name"": ""Bob"", ""owes"": {""Adam"": 3.0}, ""owed_by"": {}, ""balance"": -3.0}]}}, {""description"": ""borrower has negative balance"", ""property"": ""post"", ""input"": {""database"": {""users"": [{""name"": ""Adam"", ""owes"": {}, ""owed_by"": {}, ""balance"": 0.0}, {""name"": ""Bob"", ""owes"": {""Chuck"": 3.0}, ""owed_by"": {}, ""balance"": -3.0}, {""name"": ""Chuck"", ""owes"": {}, ""owed_by"": {""Bob"": 3.0}, ""balance"": 3.0}]}, ""url"": ""/iou"", ""payload"": {""lender"": ""Adam"", ""borrower"": ""Bob"", ""amount"": 3.0}}, ""expected"": {""users"": [{""name"": ""Adam"", ""owes"": {}, ""owed_by"": {""Bob"": 3.0}, ""balance"": 3.0}, {""name"": ""Bob"", ""owes"": {""Adam"": 3.0, ""Chuck"": 3.0}, ""owed_by"": {}, ""balance"": -6}]}}, {""description"": ""lender has negative balance"", ""property"": ""post"", ""input"": {""database"": {""users"": [{""name"": ""Adam"", ""owes"": {}, ""owed_by"": {}, ""balance"": 0.0}, {""name"": ""Bob"", ""owes"": {""Chuck"": 3.0}, ""owed_by"": {}, ""balance"": -3.0}, {""name"": ""Chuck"", ""owes"": {}, ""owed_by"": {""Bob"": 3.0}, ""balance"": 3.0}]}, ""url"": ""/iou"", ""payload"": {""lender"": ""Bob"", ""borrower"": ""Adam"", ""amount"": 3.0}}, ""expected"": {""users"": [{""name"": ""Adam"", ""owes"": {""Bob"": 3.0}, ""owed_by"": {}, ""balance"": -3.0}, {""name"": ""Bob"", ""owes"": {""Chuck"": 3.0}, ""owed_by"": {""Adam"": 3.0}, ""balance"": 0.0}]}}, {""description"": ""lender owes borrower"", ""property"": ""post"", ""input"": {""database"": {""users"": [{""name"": ""Adam"", ""owes"": {""Bob"": 3.0}, ""owed_by"": {}, ""balance"": -3.0}, {""name"": ""Bob"", ""owes"": {}, ""owed_by"": {""Adam"": 3.0}, ""balance"": 3.0}]}, ""url"": ""/iou"", ""payload"": {""lender"": ""Adam"", ""borrower"": ""Bob"", ""amount"": 2.0}}, ""expected"": {""users"": [{""name"": ""Adam"", ""owes"": {""Bob"": 1.0}, ""owed_by"": {}, ""balance"": -1.0}, {""name"": ""Bob"", ""owes"": {}, ""owed_by"": {""Adam"": 1.0}, ""balance"": 1.0}]}}, {""description"": ""lender owes borrower less than new loan"", ""property"": ""post"", ""input"": {""database"": {""users"": [{""name"": ""Adam"", ""owes"": {""Bob"": 3.0}, ""owed_by"": {}, ""balance"": -3.0}, {""name"": ""Bob"", ""owes"": {}, ""owed_by"": {""Adam"": 3.0}, ""balance"": 3.0}]}, ""url"": ""/iou"", ""payload"": {""lender"": ""Adam"", ""borrower"": ""Bob"", ""amount"": 4.0}}, ""expected"": {""users"": [{""name"": ""Adam"", ""owes"": {}, ""owed_by"": {""Bob"": 1.0}, ""balance"": 1.0}, {""name"": ""Bob"", ""owes"": {""Adam"": 1.0}, ""owed_by"": {}, ""balance"": -1.0}]}}]}]}","Implement a RESTful API for tracking IOUs.

Four roommates have a habit of borrowing money from each other frequently, and have trouble remembering who owes whom, and how much.

Your task is to implement a simple [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer) that receives [IOU](https://en.wikipedia.org/wiki/IOU)s as POST requests, and can deliver specified summary information via GET requests.

### API Specification

#### User object
```json
{
  ""name"": ""Adam"",
  ""owes"": {
    ""Bob"": 12.0,
    ""Chuck"": 4.0,
    ""Dan"": 9.5
  },
  ""owed_by"": {
    ""Bob"": 6.5,
    ""Dan"": 2.75,
  },
  ""balance"": ""<(total owed by other users) - (total owed to other users)>""
}
```

#### Methods

| Description | HTTP Method | URL | Payload Format | Response w/o Payload | Response w/ Payload |
| --- | --- | --- | --- | --- | --- |
| List of user information | GET | /users | `{""users"":[""Adam"",""Bob""]}` | `{""users"":<List of all User objects>}` | {""users"":\<List of User objects for \<users\>\>} |
| Create user | POST | /add | {""user"":\<name of new user (unique)} | N/A | \<User object for new user\> |
| Create IOU | POST | /iou | {""lender"":\<name of lender\>,""borrower"":\<name of borrower>,""amount"":5.25} | N/A | {""users"":\<updated User objects for \<lender\> and \<borrower\>\>} |

### Other Resources:
- https://restfulapi.net/
- Example RESTful APIs
  - [GitHub](https://developer.github.com/v3/)
  - [Reddit](https://www.reddit.com/dev/api/)"
reverse-string,"{""exercise"": ""reverse-string"", ""version"": ""1.1.0"", ""comments"": [""If property based testing tools are available, a good property to test is reversing a string twice: reverse(reverse(string)) == string""], ""cases"": [{""description"": ""an empty string"", ""property"": ""reverse"", ""input"": {""value"": """"}, ""expected"": """"}, {""description"": ""a word"", ""property"": ""reverse"", ""input"": {""value"": ""robot""}, ""expected"": ""tobor""}, {""description"": ""a capitalized word"", ""property"": ""reverse"", ""input"": {""value"": ""Ramen""}, ""expected"": ""nemaR""}, {""description"": ""a sentence with punctuation"", ""property"": ""reverse"", ""input"": {""value"": ""I'm hungry!""}, ""expected"": ""!yrgnuh m'I""}, {""description"": ""a palindrome"", ""property"": ""reverse"", ""input"": {""value"": ""racecar""}, ""expected"": ""racecar""}]}","Reverse a string

For example:
input: ""cool""
output: ""looc""
"
rna-transcription,"{""exercise"": ""rna-transcription"", ""version"": ""1.3.0"", ""cases"": [{""description"": ""Empty RNA sequence"", ""property"": ""toRna"", ""input"": {""dna"": """"}, ""expected"": """"}, {""description"": ""RNA complement of cytosine is guanine"", ""property"": ""toRna"", ""input"": {""dna"": ""C""}, ""expected"": ""G""}, {""description"": ""RNA complement of guanine is cytosine"", ""property"": ""toRna"", ""input"": {""dna"": ""G""}, ""expected"": ""C""}, {""description"": ""RNA complement of thymine is adenine"", ""property"": ""toRna"", ""input"": {""dna"": ""T""}, ""expected"": ""A""}, {""description"": ""RNA complement of adenine is uracil"", ""property"": ""toRna"", ""input"": {""dna"": ""A""}, ""expected"": ""U""}, {""description"": ""RNA complement"", ""property"": ""toRna"", ""input"": {""dna"": ""ACGTGGTCTTAA""}, ""expected"": ""UGCACCAGAAUU""}]}","Given a DNA strand, return its RNA complement (per RNA transcription).

Both DNA and RNA strands are a sequence of nucleotides.

The four nucleotides found in DNA are adenine (**A**), cytosine (**C**),
guanine (**G**) and thymine (**T**).

The four nucleotides found in RNA are adenine (**A**), cytosine (**C**),
guanine (**G**) and uracil (**U**).

Given a DNA strand, its transcribed RNA strand is formed by replacing
each nucleotide with its complement:

* `G` -> `C`
* `C` -> `G`
* `T` -> `A`
* `A` -> `U`
"
robot-name,{},"Manage robot factory settings.

When robots come off the factory floor, they have no name.

The first time you boot them up, a random name is generated in the format
of two uppercase letters followed by three digits, such as RX837 or BC811.

Every once in a while we need to reset a robot to its factory settings,
which means that their name gets wiped. The next time you ask, it will
respond with a new random name.

The names must be random: they should not follow a predictable sequence.
Random names means a risk of collisions. Your solution must ensure that
every existing robot has a unique name.
"
robot-simulator,"{""exercise"": ""robot-simulator"", ""version"": ""2.2.0"", ""comments"": [""Some tests have two expectations: one for the position, one for the direction"", ""Optionally, you can also test"", "" - An invalid direction throws an error"", "" - An invalid instruction throws an error"", "" - Default starting position and direction if none are provided""], ""cases"": [{""description"": ""A robot is created with a position and a direction"", ""cases"": [{""description"": ""Robots are created with a position and direction"", ""property"": ""create"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""north""}, ""expected"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""north""}}, {""description"": ""Negative positions are allowed"", ""property"": ""create"", ""input"": {""position"": {""x"": -1, ""y"": -1}, ""direction"": ""south""}, ""expected"": {""position"": {""x"": -1, ""y"": -1}, ""direction"": ""south""}}]}, {""description"": ""rotates the robot's direction 90 degrees clockwise"", ""cases"": [{""description"": ""does not change the position"", ""property"": ""turnRight"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""north""}, ""expected"": {""position"": {""x"": 0, ""y"": 0}}}, {""description"": ""changes the direction from north to east"", ""property"": ""turnRight"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""north""}, ""expected"": {""direction"": ""east""}}, {""description"": ""changes the direction from east to south"", ""property"": ""turnRight"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""east""}, ""expected"": {""direction"": ""south""}}, {""description"": ""changes the direction from south to west"", ""property"": ""turnRight"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""south""}, ""expected"": {""direction"": ""west""}}, {""description"": ""changes the direction from west to north"", ""property"": ""turnRight"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""west""}, ""expected"": {""direction"": ""north""}}]}, {""description"": ""rotates the robot's direction 90 degrees counter-clockwise"", ""cases"": [{""description"": ""does not change the position"", ""property"": ""turnLeft"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""north""}, ""expected"": {""position"": {""x"": 0, ""y"": 0}}}, {""description"": ""changes the direction from north to west"", ""property"": ""turnLeft"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""north""}, ""expected"": {""direction"": ""west""}}, {""description"": ""changes the direction from west to south"", ""property"": ""turnLeft"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""west""}, ""expected"": {""direction"": ""south""}}, {""description"": ""changes the direction from south to east"", ""property"": ""turnLeft"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""south""}, ""expected"": {""direction"": ""east""}}, {""description"": ""changes the direction from east to north"", ""property"": ""turnLeft"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""east""}, ""expected"": {""direction"": ""north""}}]}, {""description"": ""moves the robot forward 1 space in the direction it is pointing"", ""cases"": [{""description"": ""does not change the direction"", ""property"": ""advance"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""north""}, ""expected"": {""direction"": ""north""}}, {""description"": ""increases the y coordinate one when facing north"", ""property"": ""advance"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""north""}, ""expected"": {""position"": {""x"": 0, ""y"": 1}}}, {""description"": ""decreases the y coordinate by one when facing south"", ""property"": ""advance"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""south""}, ""expected"": {""position"": {""x"": 0, ""y"": -1}}}, {""description"": ""increases the x coordinate by one when facing east"", ""property"": ""advance"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""east""}, ""expected"": {""position"": {""x"": 1, ""y"": 0}}}, {""description"": ""decreases the x coordinate by one when facing west"", ""property"": ""advance"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""west""}, ""expected"": {""position"": {""x"": -1, ""y"": 0}}}]}, {""description"": ""Where R = Turn Right, L = Turn Left and A = Advance, the robot can follow a series of instructions and end up with the correct position and direction"", ""cases"": [{""description"": ""instructions to move west and north"", ""property"": ""instructions"", ""input"": {""position"": {""x"": 0, ""y"": 0}, ""direction"": ""north"", ""instructions"": ""LAAARALA""}, ""expected"": {""position"": {""x"": -4, ""y"": 1}, ""direction"": ""west""}}, {""description"": ""instructions to move west and south"", ""property"": ""instructions"", ""input"": {""position"": {""x"": 2, ""y"": -7}, ""direction"": ""east"", ""instructions"": ""RRAAAAALA""}, ""expected"": {""position"": {""x"": -3, ""y"": -8}, ""direction"": ""south""}}, {""description"": ""instructions to move east and north"", ""property"": ""instructions"", ""input"": {""position"": {""x"": 8, ""y"": 4}, ""direction"": ""south"", ""instructions"": ""LAAARRRALLLL""}, ""expected"": {""position"": {""x"": 11, ""y"": 5}, ""direction"": ""north""}}]}]}","Write a robot simulator.

A robot factory's test facility needs a program to verify robot movements.

The robots have three possible movements:

- turn right
- turn left
- advance

Robots are placed on a hypothetical infinite grid, facing a particular
direction (north, east, south, or west) at a set of {x,y} coordinates,
e.g., {3,8}, with coordinates increasing to the north and east.

The robot then receives a number of instructions, at which point the
testing facility verifies the robot's new position, and in which
direction it is pointing.

- The letter-string ""RAALAL"" means:
  - Turn right
  - Advance twice
  - Turn left
  - Advance once
  - Turn left yet again
- Say a robot starts at {7, 3} facing north. Then running this stream
  of instructions should leave it at {9, 4} facing west.
"
roman-numerals,"{""exercise"": ""roman-numerals"", ""version"": ""1.2.0"", ""cases"": [{""description"": ""1 is a single I"", ""property"": ""roman"", ""input"": {""number"": 1}, ""expected"": ""I""}, {""description"": ""2 is two I's"", ""property"": ""roman"", ""input"": {""number"": 2}, ""expected"": ""II""}, {""description"": ""3 is three I's"", ""property"": ""roman"", ""input"": {""number"": 3}, ""expected"": ""III""}, {""description"": ""4, being 5 - 1, is IV"", ""property"": ""roman"", ""input"": {""number"": 4}, ""expected"": ""IV""}, {""description"": ""5 is a single V"", ""property"": ""roman"", ""input"": {""number"": 5}, ""expected"": ""V""}, {""description"": ""6, being 5 + 1, is VI"", ""property"": ""roman"", ""input"": {""number"": 6}, ""expected"": ""VI""}, {""description"": ""9, being 10 - 1, is IX"", ""property"": ""roman"", ""input"": {""number"": 9}, ""expected"": ""IX""}, {""description"": ""20 is two X's"", ""property"": ""roman"", ""input"": {""number"": 27}, ""expected"": ""XXVII""}, {""description"": ""48 is not 50 - 2 but rather 40 + 8"", ""property"": ""roman"", ""input"": {""number"": 48}, ""expected"": ""XLVIII""}, {""description"": ""49 is not 40 + 5 + 4 but rather 50 - 10 + 10 - 1"", ""property"": ""roman"", ""input"": {""number"": 49}, ""expected"": ""XLIX""}, {""description"": ""50 is a single L"", ""property"": ""roman"", ""input"": {""number"": 59}, ""expected"": ""LIX""}, {""description"": ""90, being 100 - 10, is XC"", ""property"": ""roman"", ""input"": {""number"": 93}, ""expected"": ""XCIII""}, {""description"": ""100 is a single C"", ""property"": ""roman"", ""input"": {""number"": 141}, ""expected"": ""CXLI""}, {""description"": ""60, being 50 + 10, is LX"", ""property"": ""roman"", ""input"": {""number"": 163}, ""expected"": ""CLXIII""}, {""description"": ""400, being 500 - 100, is CD"", ""property"": ""roman"", ""input"": {""number"": 402}, ""expected"": ""CDII""}, {""description"": ""500 is a single D"", ""property"": ""roman"", ""input"": {""number"": 575}, ""expected"": ""DLXXV""}, {""description"": ""900, being 1000 - 100, is CM"", ""property"": ""roman"", ""input"": {""number"": 911}, ""expected"": ""CMXI""}, {""description"": ""1000 is a single M"", ""property"": ""roman"", ""input"": {""number"": 1024}, ""expected"": ""MXXIV""}, {""description"": ""3000 is three M's"", ""property"": ""roman"", ""input"": {""number"": 3000}, ""expected"": ""MMM""}]}","Write a function to convert from normal numbers to Roman Numerals.

The Romans were a clever bunch. They conquered most of Europe and ruled
it for hundreds of years. They invented concrete and straight roads and
even bikinis. One thing they never discovered though was the number
zero. This made writing and dating extensive histories of their exploits
slightly more challenging, but the system of numbers they came up with
is still in use today. For example the BBC uses Roman numerals to date
their programmes.

The Romans wrote numbers using letters - I, V, X, L, C, D, M. (notice
these letters have lots of straight lines and are hence easy to hack
into stone tablets).

```text
 1  => I
10  => X
 7  => VII
```

There is no need to be able to convert numbers larger than about 3000.
(The Romans themselves didn't tend to go any higher)

Wikipedia says: Modern Roman numerals ... are written by expressing each
digit separately starting with the left most digit and skipping any
digit with a value of zero.

To see this in practice, consider the example of 1990.

In Roman numerals 1990 is MCMXC:

1000=M
900=CM
90=XC

2008 is written as MMVIII:

2000=MM
8=VIII

See also: http://www.novaroma.org/via_romana/numbers.html
"
rotational-cipher,"{""exercise"": ""rotational-cipher"", ""version"": ""1.2.0"", ""comments"": [""The tests are a series of rotation tests: ""], ""cases"": [{""description"": ""Test rotation from English to ROTn"", ""cases"": [{""description"": ""rotate a by 0, same output as input"", ""property"": ""rotate"", ""input"": {""text"": ""a"", ""shiftKey"": 0}, ""expected"": ""a""}, {""description"": ""rotate a by 1"", ""property"": ""rotate"", ""input"": {""text"": ""a"", ""shiftKey"": 1}, ""expected"": ""b""}, {""description"": ""rotate a by 26, same output as input"", ""property"": ""rotate"", ""input"": {""text"": ""a"", ""shiftKey"": 26}, ""expected"": ""a""}, {""description"": ""rotate m by 13"", ""property"": ""rotate"", ""input"": {""text"": ""m"", ""shiftKey"": 13}, ""expected"": ""z""}, {""description"": ""rotate n by 13 with wrap around alphabet"", ""property"": ""rotate"", ""input"": {""text"": ""n"", ""shiftKey"": 13}, ""expected"": ""a""}, {""description"": ""rotate capital letters"", ""property"": ""rotate"", ""input"": {""text"": ""OMG"", ""shiftKey"": 5}, ""expected"": ""TRL""}, {""description"": ""rotate spaces"", ""property"": ""rotate"", ""input"": {""text"": ""O M G"", ""shiftKey"": 5}, ""expected"": ""T R L""}, {""description"": ""rotate numbers"", ""property"": ""rotate"", ""input"": {""text"": ""Testing 1 2 3 testing"", ""shiftKey"": 4}, ""expected"": ""Xiwxmrk 1 2 3 xiwxmrk""}, {""description"": ""rotate punctuation"", ""property"": ""rotate"", ""input"": {""text"": ""Let's eat, Grandma!"", ""shiftKey"": 21}, ""expected"": ""Gzo'n zvo, Bmviyhv!""}, {""description"": ""rotate all letters"", ""property"": ""rotate"", ""input"": {""text"": ""The quick brown fox jumps over the lazy dog."", ""shiftKey"": 13}, ""expected"": ""Gur dhvpx oebja sbk whzcf bire gur ynml qbt.""}]}]}","Create an implementation of the rotational cipher, also sometimes called the Caesar cipher.

The Caesar cipher is a simple shift cipher that relies on
transposing all the letters in the alphabet using an integer key
between `0` and `26`. Using a key of `0` or `26` will always yield
the same output due to modular arithmetic. The letter is shifted
for as many values as the value of the key.

The general notation for rotational ciphers is `ROT + <key>`.
The most commonly used rotational cipher is `ROT13`.

A `ROT13` on the Latin alphabet would be as follows:

```text
Plain:  abcdefghijklmnopqrstuvwxyz
Cipher: nopqrstuvwxyzabcdefghijklm
```

It is stronger than the Atbash cipher because it has 27 possible keys, and 25 usable keys.

Ciphertext is written out in the same formatting as the input including spaces and punctuation.

## Examples

- ROT5  `omg` gives `trl`
- ROT0  `c` gives `c`
- ROT26 `Cool` gives `Cool`
- ROT13 `The quick brown fox jumps over the lazy dog.` gives `Gur dhvpx oebja sbk whzcf bire gur ynml qbt.`
- ROT13 `Gur dhvpx oebja sbk whzcf bire gur ynml qbt.` gives `The quick brown fox jumps over the lazy dog.`
"
run-length-encoding,"{""exercise"": ""run-length-encoding"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""run-length encode a string"", ""cases"": [{""description"": ""empty string"", ""property"": ""encode"", ""input"": {""string"": """"}, ""expected"": """"}, {""description"": ""single characters only are encoded without count"", ""property"": ""encode"", ""input"": {""string"": ""XYZ""}, ""expected"": ""XYZ""}, {""description"": ""string with no single characters"", ""property"": ""encode"", ""input"": {""string"": ""AABBBCCCC""}, ""expected"": ""2A3B4C""}, {""description"": ""single characters mixed with repeated characters"", ""property"": ""encode"", ""input"": {""string"": ""WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB""}, ""expected"": ""12WB12W3B24WB""}, {""description"": ""multiple whitespace mixed in string"", ""property"": ""encode"", ""input"": {""string"": ""  hsqq qww  ""}, ""expected"": ""2 hs2q q2w2 ""}, {""description"": ""lowercase characters"", ""property"": ""encode"", ""input"": {""string"": ""aabbbcccc""}, ""expected"": ""2a3b4c""}]}, {""description"": ""run-length decode a string"", ""cases"": [{""description"": ""empty string"", ""property"": ""decode"", ""input"": {""string"": """"}, ""expected"": """"}, {""description"": ""single characters only"", ""property"": ""decode"", ""input"": {""string"": ""XYZ""}, ""expected"": ""XYZ""}, {""description"": ""string with no single characters"", ""property"": ""decode"", ""input"": {""string"": ""2A3B4C""}, ""expected"": ""AABBBCCCC""}, {""description"": ""single characters with repeated characters"", ""property"": ""decode"", ""input"": {""string"": ""12WB12W3B24WB""}, ""expected"": ""WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB""}, {""description"": ""multiple whitespace mixed in string"", ""property"": ""decode"", ""input"": {""string"": ""2 hs2q q2w2 ""}, ""expected"": ""  hsqq qww  ""}, {""description"": ""lower case string"", ""property"": ""decode"", ""input"": {""string"": ""2a3b4c""}, ""expected"": ""aabbbcccc""}]}, {""description"": ""encode and then decode"", ""cases"": [{""description"": ""encode followed by decode gives original string"", ""property"": ""consistency"", ""input"": {""string"": ""zzz ZZ  zZ""}, ""expected"": ""zzz ZZ  zZ""}]}]}","Implement run-length encoding and decoding.

Run-length encoding (RLE) is a simple form of data compression, where runs
(consecutive data elements) are replaced by just one data value and count.

For example we can represent the original 53 characters with only 13.

```text
""WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB""  ->  ""12WB12W3B24WB""
```

RLE allows the original data to be perfectly reconstructed from
the compressed data, which makes it a lossless data compression.

```text
""AABCCCDEEEE""  ->  ""2AB3CD4E""  ->  ""AABCCCDEEEE""
```

For simplicity, you can assume that the unencoded string will only contain
the letters A through Z (either lower or upper case) and whitespace. This way
data to be encoded will never contain any numbers and numbers inside data to
be decoded always represent the count for the following character.
"
saddle-points,"{""exercise"": ""saddle-points"", ""version"": ""1.3.0"", ""comments"": [""Matrix rows and columns are 0-indexed.""], ""cases"": [{""description"": ""Can identify single saddle point"", ""comments"": [""This is the README example.""], ""property"": ""saddlePoints"", ""input"": {""matrix"": [[9, 8, 7], [5, 3, 2], [6, 6, 7]]}, ""expected"": [{""row"": 1, ""column"": 0}]}, {""description"": ""Can identify that empty matrix has no saddle points"", ""property"": ""saddlePoints"", ""input"": {""matrix"": [[]]}, ""expected"": []}, {""description"": ""Can identify lack of saddle points when there are none"", ""property"": ""saddlePoints"", ""input"": {""matrix"": [[1, 2, 3], [3, 1, 2], [2, 3, 1]]}, ""expected"": []}, {""description"": ""Can identify multiple saddle points in a column"", ""property"": ""saddlePoints"", ""input"": {""matrix"": [[4, 5, 4], [3, 5, 5], [1, 5, 4]]}, ""expected"": [{""row"": 0, ""column"": 1}, {""row"": 1, ""column"": 1}, {""row"": 2, ""column"": 1}]}, {""description"": ""Can identify multiple saddle points in a row"", ""property"": ""saddlePoints"", ""input"": {""matrix"": [[6, 7, 8], [5, 5, 5], [7, 5, 6]]}, ""expected"": [{""row"": 1, ""column"": 0}, {""row"": 1, ""column"": 1}, {""row"": 1, ""column"": 2}]}, {""description"": ""Can identify saddle point in bottom right corner"", ""comments"": [""This is a permutation of the README matrix designed to test"", ""off-by-one errors.""], ""property"": ""saddlePoints"", ""input"": {""matrix"": [[8, 7, 9], [6, 7, 6], [3, 2, 5]]}, ""expected"": [{""row"": 2, ""column"": 2}]}, {""description"": ""Can identify saddle points in a non square matrix"", ""property"": ""saddlePoints"", ""input"": {""matrix"": [[3, 1, 3], [3, 2, 4]]}, ""expected"": [{""row"": 0, ""column"": 2}, {""row"": 0, ""column"": 0}]}, {""description"": ""Can identify that saddle points in a single column matrix are those with the minimum value"", ""property"": ""saddlePoints"", ""input"": {""matrix"": [[2], [1], [4], [1]]}, ""expected"": [{""row"": 1, ""column"": 0}, {""row"": 3, ""column"": 0}]}, {""description"": ""Can identify that saddle points in a single row matrix are those with the maximum value"", ""property"": ""saddlePoints"", ""input"": {""matrix"": [[2, 5, 3, 5]]}, ""expected"": [{""row"": 0, ""column"": 1}, {""row"": 0, ""column"": 3}]}]}","Detect saddle points in a matrix.

So say you have a matrix like so:

```text
    0  1  2
  |---------
0 | 9  8  7
1 | 5  3  2     <--- saddle point at (1,0)
2 | 6  6  7
```

It has a saddle point at (1, 0).

It's called a ""saddle point"" because it is greater than or equal to
every element in its row and less than or equal to every element in
its column.

A matrix may have zero or more saddle points.

Your code should be able to provide the (possibly empty) list of all the
saddle points for any given matrix.

The matrix can have a different number of rows and columns (Non square).

Note that you may find other definitions of matrix saddle points online,
but the tests for this exercise follow the above unambiguous definition.
"
say,"{""exercise"": ""say"", ""version"": ""1.1.0"", ""comments"": [""Here -1 is used as expected value to indicate that the"", ""input value is out of the range described in the exercise.""], ""cases"": [{""description"": ""zero"", ""property"": ""say"", ""input"": {""number"": 0}, ""expected"": ""zero""}, {""description"": ""one"", ""property"": ""say"", ""input"": {""number"": 1}, ""expected"": ""one""}, {""description"": ""fourteen"", ""property"": ""say"", ""input"": {""number"": 14}, ""expected"": ""fourteen""}, {""description"": ""twenty"", ""property"": ""say"", ""input"": {""number"": 20}, ""expected"": ""twenty""}, {""description"": ""twenty-two"", ""property"": ""say"", ""input"": {""number"": 22}, ""expected"": ""twenty-two""}, {""description"": ""one hundred"", ""property"": ""say"", ""input"": {""number"": 100}, ""expected"": ""one hundred""}, {""description"": ""one hundred twenty-three"", ""property"": ""say"", ""input"": {""number"": 123}, ""expected"": ""one hundred twenty-three""}, {""description"": ""one thousand"", ""property"": ""say"", ""input"": {""number"": 1000}, ""expected"": ""one thousand""}, {""description"": ""one thousand two hundred thirty-four"", ""property"": ""say"", ""input"": {""number"": 1234}, ""expected"": ""one thousand two hundred thirty-four""}, {""description"": ""one million"", ""property"": ""say"", ""input"": {""number"": 1000000}, ""expected"": ""one million""}, {""description"": ""one million two thousand three hundred forty-five"", ""property"": ""say"", ""input"": {""number"": 1002345}, ""expected"": ""one million two thousand three hundred forty-five""}, {""description"": ""one billion"", ""property"": ""say"", ""input"": {""number"": 1000000000}, ""expected"": ""one billion""}, {""description"": ""a big number"", ""property"": ""say"", ""input"": {""number"": 987654321123}, ""expected"": ""nine hundred eighty-seven billion six hundred fifty-four million three hundred twenty-one thousand one hundred twenty-three""}, {""description"": ""numbers below zero are out of range"", ""property"": ""say"", ""input"": {""number"": -1}, ""expected"": -1}, {""description"": ""numbers above 999,999,999,999 are out of range"", ""property"": ""say"", ""input"": {""number"": 1000000000000}, ""expected"": -1}]}","Given a number from 0 to 999,999,999,999, spell out that number in English.

## Step 1

Handle the basic case of 0 through 99.

If the input to the program is `22`, then the output should be
`'twenty-two'`.

Your program should complain loudly if given a number outside the
blessed range.

Some good test cases for this program are:

- 0
- 14
- 50
- 98
- -1
- 100

### Extension

If you're on a Mac, shell out to Mac OS X's `say` program to talk out
loud. If you're on Linux or Windows, eSpeakNG may be available with the command `espeak`.

## Step 2

Implement breaking a number up into chunks of thousands.

So `1234567890` should yield a list like 1, 234, 567, and 890, while the
far simpler `1000` should yield just 1 and 0.

The program must also report any values that are out of range.

## Step 3

Now handle inserting the appropriate scale word between those chunks.

So `1234567890` should yield `'1 billion 234 million 567 thousand 890'`

The program must also report any values that are out of range.  It's
fine to stop at ""trillion"".

## Step 4

Put it all together to get nothing but plain English.

`12345` should give `twelve thousand three hundred forty-five`.

The program must also report any values that are out of range.

### Extensions

Use _and_ (correctly) when spelling out the number in English:

- 14 becomes ""fourteen"".
- 100 becomes ""one hundred"".
- 120 becomes ""one hundred and twenty"".
- 1002 becomes ""one thousand and two"".
- 1323 becomes ""one thousand three hundred and twenty-three"".
"
scale-generator,"{""exercise"": ""scale-generator"", ""version"": ""1.0.0"", ""cases"": [{""comments"": [""These tests have no interval."", ""The chromatic scale is considered the default scale""], ""description"": ""Chromatic scales"", ""cases"": [{""description"": ""Chromatic scale with sharps"", ""property"": ""pitches"", ""input"": {""tonic"": ""C""}, ""expected"": [""C"", ""C#"", ""D"", ""D#"", ""E"", ""F"", ""F#"", ""G"", ""G#"", ""A"", ""A#"", ""B""]}, {""description"": ""Chromatic scale with flats"", ""property"": ""pitches"", ""input"": {""tonic"": ""F""}, ""expected"": [""F"", ""Gb"", ""G"", ""Ab"", ""A"", ""Bb"", ""B"", ""C"", ""Db"", ""D"", ""Eb"", ""E""]}]}, {""comments"": [""These tests all have intervals and are explorations of different"", ""traversals of the scale.""], ""description"": ""Scales with specified intervals"", ""cases"": [{""description"": ""Simple major scale"", ""comments"": [""The simplest major scale, with no sharps or flats.""], ""property"": ""pitches"", ""input"": {""tonic"": ""C"", ""intervals"": ""MMmMMMm""}, ""expected"": [""C"", ""D"", ""E"", ""F"", ""G"", ""A"", ""B""]}, {""description"": ""Major scale with sharps"", ""property"": ""pitches"", ""input"": {""tonic"": ""G"", ""intervals"": ""MMmMMMm""}, ""expected"": [""G"", ""A"", ""B"", ""C"", ""D"", ""E"", ""F#""]}, {""description"": ""Major scale with flats"", ""property"": ""pitches"", ""input"": {""tonic"": ""F"", ""intervals"": ""MMmMMMm""}, ""expected"": [""F"", ""G"", ""A"", ""Bb"", ""C"", ""D"", ""E""]}, {""description"": ""Minor scale with sharps"", ""property"": ""pitches"", ""input"": {""tonic"": ""f#"", ""intervals"": ""MmMMmMM""}, ""expected"": [""F#"", ""G#"", ""A"", ""B"", ""C#"", ""D"", ""E""]}, {""description"": ""Minor scale with flats"", ""property"": ""pitches"", ""input"": {""tonic"": ""bb"", ""intervals"": ""MmMMmMM""}, ""expected"": [""Bb"", ""C"", ""Db"", ""Eb"", ""F"", ""Gb"", ""Ab""]}, {""description"": ""Dorian mode"", ""property"": ""pitches"", ""input"": {""tonic"": ""d"", ""intervals"": ""MmMMMmM""}, ""expected"": [""D"", ""E"", ""F"", ""G"", ""A"", ""B"", ""C""]}, {""description"": ""Mixolydian mode"", ""property"": ""pitches"", ""input"": {""tonic"": ""Eb"", ""intervals"": ""MMmMMmM""}, ""expected"": [""Eb"", ""F"", ""G"", ""Ab"", ""Bb"", ""C"", ""Db""]}, {""description"": ""Lydian mode"", ""property"": ""pitches"", ""input"": {""tonic"": ""a"", ""intervals"": ""MMMmMMm""}, ""expected"": [""A"", ""B"", ""C#"", ""D#"", ""E"", ""F#"", ""G#""]}, {""description"": ""Phrygian mode"", ""property"": ""pitches"", ""input"": {""tonic"": ""e"", ""intervals"": ""mMMMmMM""}, ""expected"": [""E"", ""F"", ""G"", ""A"", ""B"", ""C"", ""D""]}, {""description"": ""Locrian mode"", ""property"": ""pitches"", ""input"": {""tonic"": ""g"", ""intervals"": ""mMMmMMM""}, ""expected"": [""G"", ""Ab"", ""Bb"", ""C"", ""Db"", ""Eb"", ""F""]}, {""comments"": [""Note that this case introduces the accidental interval (A)""], ""description"": ""Harmonic minor"", ""property"": ""pitches"", ""input"": {""tonic"": ""d"", ""intervals"": ""MmMMmAm""}, ""expected"": [""D"", ""E"", ""F"", ""G"", ""A"", ""Bb"", ""Db""]}, {""description"": ""Octatonic"", ""property"": ""pitches"", ""input"": {""tonic"": ""C"", ""intervals"": ""MmMmMmMm""}, ""expected"": [""C"", ""D"", ""D#"", ""F"", ""F#"", ""G#"", ""A"", ""B""]}, {""description"": ""Hexatonic"", ""property"": ""pitches"", ""input"": {""tonic"": ""Db"", ""intervals"": ""MMMMMM""}, ""expected"": [""Db"", ""Eb"", ""F"", ""G"", ""A"", ""B""]}, {""description"": ""Pentatonic"", ""property"": ""pitches"", ""input"": {""tonic"": ""A"", ""intervals"": ""MMAMA""}, ""expected"": [""A"", ""B"", ""C#"", ""E"", ""F#""]}, {""description"": ""Enigmatic"", ""property"": ""pitches"", ""input"": {""tonic"": ""G"", ""intervals"": ""mAMMMmm""}, ""expected"": [""G"", ""G#"", ""B"", ""C#"", ""D#"", ""F"", ""F#""]}]}]}","Given a tonic, or starting note, and a set of intervals, generate
the musical scale starting with the tonic and following the
specified interval pattern.

Scales in Western music are based on the chromatic (12-note) scale. This
scale can be expressed as the following group of pitches:

A, A#, B, C, C#, D, D#, E, F, F#, G, G#

A given sharp note (indicated by a #) can also be expressed as the flat
of the note above it (indicated by a b) so the chromatic scale can also be
written like this:

A, Bb, B, C, Db, D, Eb, E, F, Gb, G, Ab

The major and minor scale and modes are subsets of this twelve-pitch
collection. They have seven pitches, and are called diatonic scales.
The collection of notes in these scales is written with either sharps or
flats, depending on the tonic. Here is a list of which are which:

No Sharps or Flats:
C major
a minor

Use Sharps:
G, D, A, E, B, F# major
e, b, f#, c#, g#, d# minor

Use Flats:
F, Bb, Eb, Ab, Db, Gb major
d, g, c, f, bb, eb minor

The diatonic scales, and all other scales that derive from the
chromatic scale, are built upon intervals. An interval is the space
between two pitches.

The simplest interval is between two adjacent notes, and is called a
""half step"", or ""minor second"" (sometimes written as a lower-case ""m"").
The interval between two notes that have an interceding note is called
a ""whole step"" or ""major second"" (written as an upper-case ""M""). The
diatonic scales are built using only these two intervals between
adjacent notes.

Non-diatonic scales can contain other intervals.  An ""augmented first""
interval, written ""A"", has two interceding notes (e.g., from A to C or
Db to E). There are also smaller and larger intervals, but they will not
figure into this exercise.
"
scrabble-score,"{""exercise"": ""scrabble-score"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""lowercase letter"", ""property"": ""score"", ""input"": {""word"": ""a""}, ""expected"": 1}, {""description"": ""uppercase letter"", ""property"": ""score"", ""input"": {""word"": ""A""}, ""expected"": 1}, {""description"": ""valuable letter"", ""property"": ""score"", ""input"": {""word"": ""f""}, ""expected"": 4}, {""description"": ""short word"", ""property"": ""score"", ""input"": {""word"": ""at""}, ""expected"": 2}, {""description"": ""short, valuable word"", ""property"": ""score"", ""input"": {""word"": ""zoo""}, ""expected"": 12}, {""description"": ""medium word"", ""property"": ""score"", ""input"": {""word"": ""street""}, ""expected"": 6}, {""description"": ""medium, valuable word"", ""property"": ""score"", ""input"": {""word"": ""quirky""}, ""expected"": 22}, {""description"": ""long, mixed-case word"", ""property"": ""score"", ""input"": {""word"": ""OxyphenButazone""}, ""expected"": 41}, {""description"": ""english-like word"", ""property"": ""score"", ""input"": {""word"": ""pinata""}, ""expected"": 8}, {""description"": ""empty input"", ""property"": ""score"", ""input"": {""word"": """"}, ""expected"": 0}, {""description"": ""entire alphabet available"", ""property"": ""score"", ""input"": {""word"": ""abcdefghijklmnopqrstuvwxyz""}, ""expected"": 87}]}","Given a word, compute the scrabble score for that word.

## Letter Values

You'll need these:

```text
Letter                           Value
A, E, I, O, U, L, N, R, S, T       1
D, G                               2
B, C, M, P                         3
F, H, V, W, Y                      4
K                                  5
J, X                               8
Q, Z                               10
```

## Examples

""cabbage"" should be scored as worth 14 points:

- 3 points for C
- 1 point for A, twice
- 3 points for B, twice
- 2 points for G
- 1 point for E

And to total:

- `3 + 2*1 + 2*3 + 2 + 1`
- = `3 + 2 + 6 + 3`
- = `5 + 9`
- = 14

## Extensions

- You can play a double or a triple letter.
- You can play a double or a triple word.
"
secret-handshake,"{""exercise"": ""secret-handshake"", ""version"": ""1.2.0"", ""comments"": ["" In a discussion in https://github.com/exercism/problem-specifications/pull/794 and    "", "" https://github.com/exercism/problem-specifications/issues/335 it has been decided to  "", "" only include numbers between 0 and 31 (00000 to 11111) in the canonical "", "" test data.                                                              "", ""                                                                         "", "" This is to allow for different implementations in different tracks and  "", "" not restrict solutions to bitwise or modulo-based algorithms.           "", ""                                                                         "", "" Tracks may include additional tests for numbers > 31 in their test      "", "" suites. In this case, 32 (100000) should yield the same result as 0,    "", "" 33 (100001) should yield the same result as 1, and so on.               ""], ""cases"": [{""description"": ""Create a handshake for a number"", ""cases"": [{""description"": ""wink for 1"", ""property"": ""commands"", ""input"": {""number"": 1}, ""expected"": [""wink""]}, {""description"": ""double blink for 10"", ""property"": ""commands"", ""input"": {""number"": 2}, ""expected"": [""double blink""]}, {""description"": ""close your eyes for 100"", ""property"": ""commands"", ""input"": {""number"": 4}, ""expected"": [""close your eyes""]}, {""description"": ""jump for 1000"", ""property"": ""commands"", ""input"": {""number"": 8}, ""expected"": [""jump""]}, {""description"": ""combine two actions"", ""property"": ""commands"", ""input"": {""number"": 3}, ""expected"": [""wink"", ""double blink""]}, {""description"": ""reverse two actions"", ""property"": ""commands"", ""input"": {""number"": 19}, ""expected"": [""double blink"", ""wink""]}, {""description"": ""reversing one action gives the same action"", ""property"": ""commands"", ""input"": {""number"": 24}, ""expected"": [""jump""]}, {""description"": ""reversing no actions still gives no actions"", ""property"": ""commands"", ""input"": {""number"": 16}, ""expected"": []}, {""description"": ""all possible actions"", ""property"": ""commands"", ""input"": {""number"": 15}, ""expected"": [""wink"", ""double blink"", ""close your eyes"", ""jump""]}, {""description"": ""reverse all possible actions"", ""property"": ""commands"", ""input"": {""number"": 31}, ""expected"": [""jump"", ""close your eyes"", ""double blink"", ""wink""]}, {""description"": ""do nothing for zero"", ""property"": ""commands"", ""input"": {""number"": 0}, ""expected"": []}]}]}","> There are 10 types of people in the world: Those who understand
> binary, and those who don't.

You and your fellow cohort of those in the ""know"" when it comes to
binary decide to come up with a secret ""handshake"".

```text
1 = wink
10 = double blink
100 = close your eyes
1000 = jump


10000 = Reverse the order of the operations in the secret handshake.
```

Given a decimal number, convert it to the appropriate sequence of events for a secret handshake.

Here's a couple of examples:

Given the input 3, the function would return the array
[""wink"", ""double blink""] because 3 is 11 in binary.

Given the input 19, the function would return the array
[""double blink"", ""wink""] because 19 is 10011 in binary.
Notice that the addition of 16 (10000 in binary)
has caused the array to be reversed.
"
series,"{""exercise"": ""series"", ""version"": ""1.0.0"", ""cases"": [{""description"": ""slices of one from one"", ""property"": ""slices"", ""input"": {""series"": ""1"", ""sliceLength"": 1}, ""expected"": [""1""]}, {""description"": ""slices of one from two"", ""property"": ""slices"", ""input"": {""series"": ""12"", ""sliceLength"": 1}, ""expected"": [""1"", ""2""]}, {""description"": ""slices of two"", ""property"": ""slices"", ""input"": {""series"": ""35"", ""sliceLength"": 2}, ""expected"": [""35""]}, {""description"": ""slices of two overlap"", ""property"": ""slices"", ""input"": {""series"": ""9142"", ""sliceLength"": 2}, ""expected"": [""91"", ""14"", ""42""]}, {""description"": ""slices can include duplicates"", ""property"": ""slices"", ""input"": {""series"": ""777777"", ""sliceLength"": 3}, ""expected"": [""777"", ""777"", ""777"", ""777""]}, {""description"": ""slices of a long series"", ""property"": ""slices"", ""input"": {""series"": ""918493904243"", ""sliceLength"": 5}, ""expected"": [""91849"", ""18493"", ""84939"", ""49390"", ""93904"", ""39042"", ""90424"", ""04243""]}, {""description"": ""slice length is too large"", ""property"": ""slices"", ""input"": {""series"": ""12345"", ""sliceLength"": 6}, ""expected"": {""error"": ""slice length cannot be greater than series length""}}, {""description"": ""slice length cannot be zero"", ""property"": ""slices"", ""input"": {""series"": ""12345"", ""sliceLength"": 0}, ""expected"": {""error"": ""slice length cannot be zero""}}, {""description"": ""slice length cannot be negative"", ""property"": ""slices"", ""input"": {""series"": ""123"", ""sliceLength"": -1}, ""expected"": {""error"": ""slice length cannot be negative""}}, {""description"": ""empty series is invalid"", ""property"": ""slices"", ""input"": {""series"": """", ""sliceLength"": 1}, ""expected"": {""error"": ""series cannot be empty""}}]}","Given a string of digits, output all the contiguous substrings of length `n` in
that string in the order that they appear.

For example, the string ""49142"" has the following 3-digit series:

- ""491""
- ""914""
- ""142""

And the following 4-digit series:

- ""4914""
- ""9142""

And if you ask for a 6-digit series from a 5-digit string, you deserve
whatever you get.

Note that these series are only required to occupy *adjacent positions*
in the input; the digits need not be *numerically consecutive*.
"
sgf-parsing,"{""exercise"": ""sgf-parsing"", ""version"": ""1.0.0"", ""cases"": [{""description"": ""empty input"", ""property"": ""parse"", ""input"": {""encoded"": """"}, ""expected"": {""error"": ""tree missing""}}, {""description"": ""tree with no nodes"", ""property"": ""parse"", ""input"": {""encoded"": ""()""}, ""expected"": {""error"": ""tree with no nodes""}}, {""description"": ""node without tree"", ""property"": ""parse"", ""input"": {""encoded"": "";""}, ""expected"": {""error"": ""tree missing""}}, {""description"": ""node without properties"", ""property"": ""parse"", ""input"": {""encoded"": ""(;)""}, ""expected"": {""properties"": {}}}, {""description"": ""single node tree"", ""property"": ""parse"", ""input"": {""encoded"": ""(;A[B])""}, ""expected"": {""properties"": {""A"": [""B""]}, ""children"": []}}, {""description"": ""properties without delimiter"", ""property"": ""parse"", ""input"": {""encoded"": ""(;A)""}, ""expected"": {""error"": ""properties without delimiter""}}, {""description"": ""all lowercase property"", ""property"": ""parse"", ""input"": {""encoded"": ""(;a[b])""}, ""expected"": {""error"": ""property must be in uppercase""}}, {""description"": ""upper and lowercase property"", ""property"": ""parse"", ""input"": {""encoded"": ""(;Aa[b])""}, ""expected"": {""error"": ""property must be in uppercase""}}, {""description"": ""two nodes"", ""property"": ""parse"", ""input"": {""encoded"": ""(;A[B];B[C])""}, ""expected"": {""properties"": {""A"": [""B""]}, ""children"": [{""properties"": {""B"": [""C""]}, ""children"": []}]}}, {""description"": ""two child trees"", ""property"": ""parse"", ""input"": {""encoded"": ""(;A[B](;B[C])(;C[D]))""}, ""expected"": {""properties"": {""A"": [""B""]}, ""children"": [{""properties"": {""B"": [""C""]}, ""children"": []}, {""properties"": {""C"": [""D""]}, ""children"": []}]}}, {""description"": ""multiple property values"", ""property"": ""parse"", ""input"": {""encoded"": ""(;A[b][c][d])""}, ""expected"": {""properties"": {""A"": [""b"", ""c"", ""d""]}, ""children"": []}}, {""description"": ""escaped property"", ""property"": ""parse"", ""input"": {""encoded"": ""(;A[\\]b\\nc\\nd\\t\\te \\n\\]])""}, ""expected"": {""properties"": {""A"": [""]b\\nc\\nd  e \\n]""]}, ""children"": []}}]}","Parsing a Smart Game Format string.

[SGF](https://en.wikipedia.org/wiki/Smart_Game_Format) is a standard format for
storing board game files, in particular go.

SGF is a fairly simple format. An SGF file usually contains a single
tree of nodes where each node is a property list. The property list
contains key value pairs, each key can only occur once but may have
multiple values.

An SGF file may look like this:

```text
(;FF[4]C[root]SZ[19];B[aa];W[ab])
```

This is a tree with three nodes:

- The top level node has two properties: FF\[4\] (key = ""FF"", value =
  ""4"") and C\[root\](key = ""C"", value = ""root""). (FF indicates the
  version of SGF and C is a comment.)
  - The top level node has a single child which has a single property:
    B\[aa\].  (Black plays on the point encoded as ""aa"", which is the
    1-1 point (which is a stupid place to play)).
    - The B\[aa\] node has a single child which has a single property:
      W\[ab\].

As you can imagine an SGF file contains a lot of nodes with a single
child, which is why there's a shorthand for it.

SGF can encode variations of play. Go players do a lot of backtracking
in their reviews (let's try this, doesn't work, let's try that) and SGF
supports variations of play sequences. For example:

```text
(;FF[4](;B[aa];W[ab])(;B[dd];W[ee]))
```

Here the root node has two variations. The first (which by convention
indicates what's actually played) is where black plays on 1-1. Black was
sent this file by his teacher who pointed out a more sensible play in
the second child of the root node: `B[dd]` (4-4 point, a very standard
opening to take the corner).

A key can have multiple values associated with it. For example:

```text
(;FF[4];AB[aa][ab][ba])
```

Here `AB` (add black) is used to add three black stones to the board.

There are a few more complexities to SGF (and parsing in general), which
you can mostly ignore. You should assume that the input is encoded in
UTF-8, the tests won't contain a charset property, so don't worry about
that. Furthermore you may assume that all newlines are unix style (`\n`,
no `\r` or `\r\n` will be in the tests) and that no optional whitespace
between properties, nodes, etc will be in the tests.

The exercise will have you parse an SGF string and return a tree
structure of properties. You do not need to encode knowledge about the
data types of properties, just use the rules for the
[text](http://www.red-bean.com/sgf/sgf4.html#text) type everywhere.
"
sieve,"{""exercise"": ""sieve"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""no primes under two"", ""property"": ""primes"", ""input"": {""limit"": 1}, ""expected"": []}, {""description"": ""find first prime"", ""property"": ""primes"", ""input"": {""limit"": 2}, ""expected"": [2]}, {""description"": ""find primes up to 10"", ""property"": ""primes"", ""input"": {""limit"": 10}, ""expected"": [2, 3, 5, 7]}, {""description"": ""limit is prime"", ""property"": ""primes"", ""input"": {""limit"": 13}, ""expected"": [2, 3, 5, 7, 11, 13]}, {""description"": ""find primes up to 1000"", ""property"": ""primes"", ""input"": {""limit"": 1000}, ""expected"": [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]}]}","Use the Sieve of Eratosthenes to find all the primes from 2 up to a given
number.

The Sieve of Eratosthenes is a simple, ancient algorithm for finding all
prime numbers up to any given limit. It does so by iteratively marking as
composite (i.e. not prime) the multiples of each prime, starting with the
multiples of 2. It does not use any division or remainder operation.

Create your range, starting at two and continuing up to and including the given limit. (i.e. [2, limit])

The algorithm consists of repeating the following over and over:

- take the next available unmarked number in your list (it is prime)
- mark all the multiples of that number (they are not prime)

Repeat until you have processed each number in your range.

When the algorithm terminates, all the numbers in the list that have not
been marked are prime.

The wikipedia article has a useful graphic that explains the algorithm:
https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes

Notice that this is a very specific algorithm, and the tests don't check
that you've implemented the algorithm, only that you've come up with the
correct list of primes. A good first test is to check that you do not use
division or remainder operations (div, /, mod or % depending on the
language).
"
simple-cipher,"{""exercise"": ""simple-cipher"", ""version"": ""1.1.0"", ""comments"": [""Some of the strings used in this file are symbolic and do not represent their literal value. They are:"", ""cipher.key - Represents the Cipher key"", ""cipher.encode - Represents the output of the Cipher encode method"", ""new - Represents the Cipher initialization"", ""string.substring(start, length) - Represents a substring of 'string' that begins at index 'start' and is 'length' characters long""], ""cases"": [{""description"": ""Random key cipher"", ""cases"": [{""description"": ""Can encode"", ""property"": ""encode"", ""input"": {""plaintext"": ""aaaaaaaaaa""}, ""expected"": ""cipher.key.substring(0, plaintext.length)""}, {""description"": ""Can decode"", ""property"": ""decode"", ""input"": {""ciphertext"": ""cipher.key.substring(0, expected.length)""}, ""expected"": ""aaaaaaaaaa""}, {""description"": ""Is reversible. I.e., if you apply decode in a encoded result, you must see the same plaintext encode parameter as a result of the decode method"", ""property"": ""decode"", ""input"": {""plaintext"": ""abcdefghij"", ""ciphertext"": ""cipher.encode""}, ""expected"": ""abcdefghij""}, {""description"": ""Key is made only of lowercase letters"", ""property"": ""key"", ""input"": {}, ""expected"": {""match"": ""^[a-z]+$""}}]}, {""description"": ""Substitution cipher"", ""cases"": [{""description"": ""Can encode"", ""property"": ""encode"", ""input"": {""key"": ""abcdefghij"", ""plaintext"": ""aaaaaaaaaa""}, ""expected"": ""abcdefghij""}, {""description"": ""Can decode"", ""property"": ""decode"", ""input"": {""key"": ""abcdefghij"", ""ciphertext"": ""abcdefghij""}, ""expected"": ""aaaaaaaaaa""}, {""description"": ""Is reversible. I.e., if you apply decode in a encoded result, you must see the same plaintext encode parameter as a result of the decode method"", ""property"": ""decode"", ""input"": {""key"": ""abcdefghij"", ""plaintext"": ""abcdefghij"", ""ciphertext"": ""cipher.encode""}, ""expected"": ""abcdefghij""}, {""description"": ""Can double shift encode"", ""property"": ""encode"", ""input"": {""key"": ""iamapandabear"", ""plaintext"": ""iamapandabear""}, ""expected"": ""qayaeaagaciai""}, {""description"": ""Can wrap on encode"", ""property"": ""encode"", ""input"": {""key"": ""abcdefghij"", ""plaintext"": ""zzzzzzzzzz""}, ""expected"": ""zabcdefghi""}, {""description"": ""Can wrap on decode"", ""property"": ""decode"", ""input"": {""key"": ""abcdefghij"", ""ciphertext"": ""zabcdefghi""}, ""expected"": ""zzzzzzzzzz""}, {""description"": ""Can handle messages longer than the key"", ""property"": ""encode"", ""input"": {""key"": ""abc"", ""plaintext"": ""iamapandabear""}, ""expected"": ""iboaqcnecbfcr""}]}, {""description"": ""Incorrect key cipher"", ""cases"": [{""description"": ""Throws an error with an all uppercase key"", ""property"": ""new"", ""input"": {""key"": ""ABCDEF""}, ""expected"": {""error"": ""Bad key""}}, {""description"": ""Throws an error with a numeric key"", ""property"": ""new"", ""input"": {""key"": ""12345""}, ""expected"": {""error"": ""Bad key""}}, {""description"": ""Throws an error with empty key"", ""property"": ""new"", ""input"": {""key"": """"}, ""expected"": {""error"": ""Bad key""}}]}]}","Implement a simple shift cipher like Caesar and a more secure substitution cipher.

## Step 1

""If he had anything confidential to say, he wrote it in cipher, that is,
by so changing the order of the letters of the alphabet, that not a word
could be made out. If anyone wishes to decipher these, and get at their
meaning, he must substitute the fourth letter of the alphabet, namely D,
for A, and so with the others.""
—Suetonius, Life of Julius Caesar

Ciphers are very straight-forward algorithms that allow us to render
text less readable while still allowing easy deciphering. They are
vulnerable to many forms of cryptoanalysis, but we are lucky that
generally our little sisters are not cryptoanalysts.

The Caesar Cipher was used for some messages from Julius Caesar that
were sent afield. Now Caesar knew that the cipher wasn't very good, but
he had one ally in that respect: almost nobody could read well. So even
being a couple letters off was sufficient so that people couldn't
recognize the few words that they did know.

Your task is to create a simple shift cipher like the Caesar Cipher.
This image is a great example of the Caesar Cipher:

![Caesar Cipher][1]

For example:

Giving ""iamapandabear"" as input to the encode function returns the cipher ""ldpdsdqgdehdu"". Obscure enough to keep our message secret in transit.

When ""ldpdsdqgdehdu"" is put into the decode function it would return
the original ""iamapandabear"" letting your friend read your original
message.

## Step 2

Shift ciphers are no fun though when your kid sister figures it out. Try
amending the code to allow us to specify a key and use that for the
shift distance. This is called a substitution cipher.

Here's an example:

Given the key ""aaaaaaaaaaaaaaaaaa"", encoding the string ""iamapandabear""
would return the original ""iamapandabear"".

Given the key ""ddddddddddddddddd"", encoding our string ""iamapandabear""
would return the obscured ""ldpdsdqgdehdu""

In the example above, we've set a = 0 for the key value. So when the
plaintext is added to the key, we end up with the same message coming
out. So ""aaaa"" is not an ideal key. But if we set the key to ""dddd"", we
would get the same thing as the Caesar Cipher.

## Step 3

The weakest link in any cipher is the human being. Let's make your
substitution cipher a little more fault tolerant by providing a source
of randomness and ensuring that the key contains only lowercase letters.

If someone doesn't submit a key at all, generate a truly random key of
at least 100 characters in length.

If the key submitted is not composed only of lowercase letters, your
solution should handle the error in a language-appropriate way.

## Extensions

Shift ciphers work by making the text slightly odd, but are vulnerable
to frequency analysis. Substitution ciphers help that, but are still
very vulnerable when the key is short or if spaces are preserved. Later
on you'll see one solution to this problem in the exercise
""crypto-square"".

If you want to go farther in this field, the questions begin to be about
how we can exchange keys in a secure way. Take a look at [Diffie-Hellman
on Wikipedia][dh] for one of the first implementations of this scheme.

[1]: https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Caesar_cipher_left_shift_of_3.svg/320px-Caesar_cipher_left_shift_of_3.svg.png
[dh]: http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
"
simple-linked-list,{},"Write a simple linked list implementation that uses Elements and a List.

The linked list is a fundamental data structure in computer science,
often used in the implementation of other data structures. They're
pervasive in functional programming languages, such as Clojure, Erlang,
or Haskell, but far less common in imperative languages such as Ruby or
Python.

The simplest kind of linked list is a singly linked list. Each element in the
list contains data and a ""next"" field pointing to the next element in the list
of elements.

This variant of linked lists is often used to represent sequences or
push-down stacks (also called a LIFO stack; Last In, First Out).

As a first take, lets create a singly linked list to contain the range (1..10),
and provide functions to reverse a linked list and convert to and from arrays.

When implementing this in a language with built-in linked lists,
implement your own abstract data type.
"
space-age,"{""exercise"": ""space-age"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""age on Earth"", ""property"": ""age"", ""input"": {""planet"": ""Earth"", ""seconds"": 1000000000}, ""expected"": 31.69}, {""description"": ""age on Mercury"", ""property"": ""age"", ""input"": {""planet"": ""Mercury"", ""seconds"": 2134835688}, ""expected"": 280.88}, {""description"": ""age on Venus"", ""property"": ""age"", ""input"": {""planet"": ""Venus"", ""seconds"": 189839836}, ""expected"": 9.78}, {""description"": ""age on Mars"", ""property"": ""age"", ""input"": {""planet"": ""Mars"", ""seconds"": 2329871239}, ""expected"": 39.25}, {""description"": ""age on Jupiter"", ""property"": ""age"", ""input"": {""planet"": ""Jupiter"", ""seconds"": 901876382}, ""expected"": 2.41}, {""description"": ""age on Saturn"", ""property"": ""age"", ""input"": {""planet"": ""Saturn"", ""seconds"": 3000000000}, ""expected"": 3.23}, {""description"": ""age on Uranus"", ""property"": ""age"", ""input"": {""planet"": ""Uranus"", ""seconds"": 3210123456}, ""expected"": 1.21}, {""description"": ""age on Neptune"", ""property"": ""age"", ""input"": {""planet"": ""Neptune"", ""seconds"": 8210123456}, ""expected"": 1.58}]}","Given an age in seconds, calculate how old someone would be on:

   - Earth: orbital period 365.25 Earth days, or 31557600 seconds
   - Mercury: orbital period 0.2408467 Earth years
   - Venus: orbital period 0.61519726 Earth years
   - Mars: orbital period 1.8808158 Earth years
   - Jupiter: orbital period 11.862615 Earth years
   - Saturn: orbital period 29.447498 Earth years
   - Uranus: orbital period 84.016846 Earth years
   - Neptune: orbital period 164.79132 Earth years

So if you were told someone were 1,000,000,000 seconds old, you should
be able to say that they're 31.69 Earth-years old.

If you're wondering why Pluto didn't make the cut, go watch [this
youtube video](http://www.youtube.com/watch?v=Z_2gbGXzFbs).
"
spiral-matrix,"{""exercise"": ""spiral-matrix"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""empty spiral"", ""property"": ""spiralMatrix"", ""input"": {""size"": 0}, ""expected"": []}, {""description"": ""trivial spiral"", ""property"": ""spiralMatrix"", ""input"": {""size"": 1}, ""expected"": [[1]]}, {""description"": ""spiral of size 2"", ""property"": ""spiralMatrix"", ""input"": {""size"": 2}, ""expected"": [[1, 2], [4, 3]]}, {""description"": ""spiral of size 3"", ""property"": ""spiralMatrix"", ""input"": {""size"": 3}, ""expected"": [[1, 2, 3], [8, 9, 4], [7, 6, 5]]}, {""description"": ""spiral of size 4"", ""property"": ""spiralMatrix"", ""input"": {""size"": 4}, ""expected"": [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]]}, {""description"": ""spiral of size 5"", ""property"": ""spiralMatrix"", ""input"": {""size"": 5}, ""expected"": [[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]]}]}","Given the size, return a square matrix of numbers in spiral order.

The matrix should be filled with natural numbers, starting from 1
in the top-left corner, increasing in an inward, clockwise spiral order,
like these examples:

###### Spiral matrix of size 3

```text
1 2 3
8 9 4
7 6 5
```

###### Spiral matrix of size 4

```text
 1  2  3 4
12 13 14 5
11 16 15 6
10  9  8 7
```
"
strain,{},"Implement the `keep` and `discard` operation on collections. Given a collection
and a predicate on the collection's elements, `keep` returns a new collection
containing those elements where the predicate is true, while `discard` returns
a new collection containing those elements where the predicate is false.

For example, given the collection of numbers:

- 1, 2, 3, 4, 5

And the predicate:

- is the number even?

Then your keep operation should produce:

- 2, 4

While your discard operation should produce:

- 1, 3, 5

Note that the union of keep and discard is all the elements.

The functions may be called `keep` and `discard`, or they may need different
names in order to not clash with existing functions or concepts in your
language.

## Restrictions

Keep your hands off that filter/reject/whatchamacallit functionality
provided by your standard library!  Solve this one yourself using other
basic tools instead.
"
sublist,"{""exercise"": ""sublist"", ""version"": ""1.1.0"", ""comments"": [""Lists are ordered and sequential."", ""https://en.wikipedia.org/wiki/List_%28abstract_data_type%29"", """", ""Depending on your language, there may need to be some translation"", ""to go from the JSON array to the list representation."", ""The expectation can be used to generate an expected value"", ""based on your implementation (such as a constant 'EQUAL', 'SUBLIST', etc.)."", """", ""If appropriate for your track, you'll need to ensure that no pair of expected values are equal."", ""Otherwise, an implementation that always returns a constant value may falsely pass the tests."", ""See https://github.com/exercism/xpython/issues/342""], ""cases"": [{""description"": ""empty lists"", ""property"": ""sublist"", ""input"": {""listOne"": [], ""listTwo"": []}, ""expected"": ""equal""}, {""description"": ""empty list within non empty list"", ""property"": ""sublist"", ""input"": {""listOne"": [], ""listTwo"": [1, 2, 3]}, ""expected"": ""sublist""}, {""description"": ""non empty list contains empty list"", ""property"": ""sublist"", ""input"": {""listOne"": [1, 2, 3], ""listTwo"": []}, ""expected"": ""superlist""}, {""description"": ""list equals itself"", ""property"": ""sublist"", ""input"": {""listOne"": [1, 2, 3], ""listTwo"": [1, 2, 3]}, ""expected"": ""equal""}, {""description"": ""different lists"", ""property"": ""sublist"", ""input"": {""listOne"": [1, 2, 3], ""listTwo"": [2, 3, 4]}, ""expected"": ""unequal""}, {""description"": ""false start"", ""property"": ""sublist"", ""input"": {""listOne"": [1, 2, 5], ""listTwo"": [0, 1, 2, 3, 1, 2, 5, 6]}, ""expected"": ""sublist""}, {""description"": ""consecutive"", ""property"": ""sublist"", ""input"": {""listOne"": [1, 1, 2], ""listTwo"": [0, 1, 1, 1, 2, 1, 2]}, ""expected"": ""sublist""}, {""description"": ""sublist at start"", ""property"": ""sublist"", ""input"": {""listOne"": [0, 1, 2], ""listTwo"": [0, 1, 2, 3, 4, 5]}, ""expected"": ""sublist""}, {""description"": ""sublist in middle"", ""property"": ""sublist"", ""input"": {""listOne"": [2, 3, 4], ""listTwo"": [0, 1, 2, 3, 4, 5]}, ""expected"": ""sublist""}, {""description"": ""sublist at end"", ""property"": ""sublist"", ""input"": {""listOne"": [3, 4, 5], ""listTwo"": [0, 1, 2, 3, 4, 5]}, ""expected"": ""sublist""}, {""description"": ""at start of superlist"", ""property"": ""sublist"", ""input"": {""listOne"": [0, 1, 2, 3, 4, 5], ""listTwo"": [0, 1, 2]}, ""expected"": ""superlist""}, {""description"": ""in middle of superlist"", ""property"": ""sublist"", ""input"": {""listOne"": [0, 1, 2, 3, 4, 5], ""listTwo"": [2, 3]}, ""expected"": ""superlist""}, {""description"": ""at end of superlist"", ""property"": ""sublist"", ""input"": {""listOne"": [0, 1, 2, 3, 4, 5], ""listTwo"": [3, 4, 5]}, ""expected"": ""superlist""}, {""description"": ""first list missing element from second list"", ""property"": ""sublist"", ""input"": {""listOne"": [1, 3], ""listTwo"": [1, 2, 3]}, ""expected"": ""unequal""}, {""description"": ""second list missing element from first list"", ""property"": ""sublist"", ""input"": {""listOne"": [1, 2, 3], ""listTwo"": [1, 3]}, ""expected"": ""unequal""}, {""description"": ""order matters to a list"", ""property"": ""sublist"", ""input"": {""listOne"": [1, 2, 3], ""listTwo"": [3, 2, 1]}, ""expected"": ""unequal""}, {""description"": ""same digits but different numbers"", ""property"": ""sublist"", ""input"": {""listOne"": [1, 0, 1], ""listTwo"": [10, 1]}, ""expected"": ""unequal""}]}","Given two lists determine if the first list is contained within the second
list, if the second list is contained within the first list, if both lists are
contained within each other or if none of these are true.

Specifically, a list A is a sublist of list B if by dropping 0 or more elements
from the front of B and 0 or more elements from the back of B you get a list
that's completely equal to A.

Examples:

 * A = [1, 2, 3], B = [1, 2, 3, 4, 5], A is a sublist of B
 * A = [3, 4, 5], B = [1, 2, 3, 4, 5], A is a sublist of B
 * A = [3, 4], B = [1, 2, 3, 4, 5], A is a sublist of B
 * A = [1, 2, 3], B = [1, 2, 3], A is equal to B
 * A = [1, 2, 3, 4, 5], B = [2, 3, 4], A is a superlist of B
 * A = [1, 2, 4], B = [1, 2, 3, 4, 5], A is not a superlist of, sublist of or equal to B
"
sum-of-multiples,"{""exercise"": ""sum-of-multiples"", ""version"": ""1.2.0"", ""cases"": [{""description"": ""multiples of 3 or 5 up to 1"", ""property"": ""sum"", ""input"": {""factors"": [3, 5], ""limit"": 1}, ""expected"": 0}, {""description"": ""multiples of 3 or 5 up to 4"", ""property"": ""sum"", ""input"": {""factors"": [3, 5], ""limit"": 4}, ""expected"": 3}, {""description"": ""multiples of 3 up to 7"", ""property"": ""sum"", ""input"": {""factors"": [3], ""limit"": 7}, ""expected"": 9}, {""description"": ""multiples of 3 or 5 up to 10"", ""property"": ""sum"", ""input"": {""factors"": [3, 5], ""limit"": 10}, ""expected"": 23}, {""description"": ""multiples of 3 or 5 up to 100"", ""property"": ""sum"", ""input"": {""factors"": [3, 5], ""limit"": 100}, ""expected"": 2318}, {""description"": ""multiples of 3 or 5 up to 1000"", ""property"": ""sum"", ""input"": {""factors"": [3, 5], ""limit"": 1000}, ""expected"": 233168}, {""description"": ""multiples of 7, 13 or 17 up to 20"", ""property"": ""sum"", ""input"": {""factors"": [7, 13, 17], ""limit"": 20}, ""expected"": 51}, {""description"": ""multiples of 4 or 6 up to 15"", ""property"": ""sum"", ""input"": {""factors"": [4, 6], ""limit"": 15}, ""expected"": 30}, {""description"": ""multiples of 5, 6 or 8 up to 150"", ""property"": ""sum"", ""input"": {""factors"": [5, 6, 8], ""limit"": 150}, ""expected"": 4419}, {""description"": ""multiples of 5 or 25 up to 51"", ""property"": ""sum"", ""input"": {""factors"": [5, 25], ""limit"": 51}, ""expected"": 275}, {""description"": ""multiples of 43 or 47 up to 10000"", ""property"": ""sum"", ""input"": {""factors"": [43, 47], ""limit"": 10000}, ""expected"": 2203160}, {""description"": ""multiples of 1 up to 100"", ""property"": ""sum"", ""input"": {""factors"": [1], ""limit"": 100}, ""expected"": 4950}, {""description"": ""multiples of an empty list up to 10000"", ""property"": ""sum"", ""input"": {""factors"": [], ""limit"": 10000}, ""expected"": 0}]}","Given a number, find the sum of all the unique multiples of particular numbers up to
but not including that number.

If we list all the natural numbers below 20 that are multiples of 3 or 5,
we get 3, 5, 6, 9, 10, 12, 15, and 18.

The sum of these multiples is 78.
"
tournament,"{""exercise"": ""tournament"", ""version"": ""1.4.0"", ""comments"": [""The inputs and outputs are represented as arrays of strings to"", ""improve readability in this JSON file."", ""Your track may choose whether to present the input as a single"", ""string (concatenating all the lines) or as the list."", ""In most cases, it seems to make sense to expect the output as"", ""a single string.""], ""cases"": [{""description"": ""just the header if no input"", ""property"": ""tally"", ""input"": {""rows"": []}, ""expected"": [""Team                           | MP |  W |  D |  L |  P""]}, {""description"": ""a win is three points, a loss is zero points"", ""property"": ""tally"", ""input"": {""rows"": [""Allegoric Alaskans;Blithering Badgers;win""]}, ""expected"": [""Team                           | MP |  W |  D |  L |  P"", ""Allegoric Alaskans             |  1 |  1 |  0 |  0 |  3"", ""Blithering Badgers             |  1 |  0 |  0 |  1 |  0""]}, {""description"": ""a win can also be expressed as a loss"", ""property"": ""tally"", ""input"": {""rows"": [""Blithering Badgers;Allegoric Alaskans;loss""]}, ""expected"": [""Team                           | MP |  W |  D |  L |  P"", ""Allegoric Alaskans             |  1 |  1 |  0 |  0 |  3"", ""Blithering Badgers             |  1 |  0 |  0 |  1 |  0""]}, {""description"": ""a different team can win"", ""property"": ""tally"", ""input"": {""rows"": [""Blithering Badgers;Allegoric Alaskans;win""]}, ""expected"": [""Team                           | MP |  W |  D |  L |  P"", ""Blithering Badgers             |  1 |  1 |  0 |  0 |  3"", ""Allegoric Alaskans             |  1 |  0 |  0 |  1 |  0""]}, {""description"": ""a draw is one point each"", ""property"": ""tally"", ""input"": {""rows"": [""Allegoric Alaskans;Blithering Badgers;draw""]}, ""expected"": [""Team                           | MP |  W |  D |  L |  P"", ""Allegoric Alaskans             |  1 |  0 |  1 |  0 |  1"", ""Blithering Badgers             |  1 |  0 |  1 |  0 |  1""]}, {""description"": ""There can be more than one match"", ""property"": ""tally"", ""input"": {""rows"": [""Allegoric Alaskans;Blithering Badgers;win"", ""Allegoric Alaskans;Blithering Badgers;win""]}, ""expected"": [""Team                           | MP |  W |  D |  L |  P"", ""Allegoric Alaskans             |  2 |  2 |  0 |  0 |  6"", ""Blithering Badgers             |  2 |  0 |  0 |  2 |  0""]}, {""description"": ""There can be more than one winner"", ""property"": ""tally"", ""input"": {""rows"": [""Allegoric Alaskans;Blithering Badgers;loss"", ""Allegoric Alaskans;Blithering Badgers;win""]}, ""expected"": [""Team                           | MP |  W |  D |  L |  P"", ""Allegoric Alaskans             |  2 |  1 |  0 |  1 |  3"", ""Blithering Badgers             |  2 |  1 |  0 |  1 |  3""]}, {""description"": ""There can be more than two teams"", ""property"": ""tally"", ""input"": {""rows"": [""Allegoric Alaskans;Blithering Badgers;win"", ""Blithering Badgers;Courageous Californians;win"", ""Courageous Californians;Allegoric Alaskans;loss""]}, ""expected"": [""Team                           | MP |  W |  D |  L |  P"", ""Allegoric Alaskans             |  2 |  2 |  0 |  0 |  6"", ""Blithering Badgers             |  2 |  1 |  0 |  1 |  3"", ""Courageous Californians        |  2 |  0 |  0 |  2 |  0""]}, {""description"": ""typical input"", ""property"": ""tally"", ""input"": {""rows"": [""Allegoric Alaskans;Blithering Badgers;win"", ""Devastating Donkeys;Courageous Californians;draw"", ""Devastating Donkeys;Allegoric Alaskans;win"", ""Courageous Californians;Blithering Badgers;loss"", ""Blithering Badgers;Devastating Donkeys;loss"", ""Allegoric Alaskans;Courageous Californians;win""]}, ""expected"": [""Team                           | MP |  W |  D |  L |  P"", ""Devastating Donkeys            |  3 |  2 |  1 |  0 |  7"", ""Allegoric Alaskans             |  3 |  2 |  0 |  1 |  6"", ""Blithering Badgers             |  3 |  1 |  0 |  2 |  3"", ""Courageous Californians        |  3 |  0 |  1 |  2 |  1""]}, {""description"": ""incomplete competition (not all pairs have played)"", ""property"": ""tally"", ""input"": {""rows"": [""Allegoric Alaskans;Blithering Badgers;loss"", ""Devastating Donkeys;Allegoric Alaskans;loss"", ""Courageous Californians;Blithering Badgers;draw"", ""Allegoric Alaskans;Courageous Californians;win""]}, ""expected"": [""Team                           | MP |  W |  D |  L |  P"", ""Allegoric Alaskans             |  3 |  2 |  0 |  1 |  6"", ""Blithering Badgers             |  2 |  1 |  1 |  0 |  4"", ""Courageous Californians        |  2 |  0 |  1 |  1 |  1"", ""Devastating Donkeys            |  1 |  0 |  0 |  1 |  0""]}, {""description"": ""ties broken alphabetically"", ""property"": ""tally"", ""input"": {""rows"": [""Courageous Californians;Devastating Donkeys;win"", ""Allegoric Alaskans;Blithering Badgers;win"", ""Devastating Donkeys;Allegoric Alaskans;loss"", ""Courageous Californians;Blithering Badgers;win"", ""Blithering Badgers;Devastating Donkeys;draw"", ""Allegoric Alaskans;Courageous Californians;draw""]}, ""expected"": [""Team                           | MP |  W |  D |  L |  P"", ""Allegoric Alaskans             |  3 |  2 |  1 |  0 |  7"", ""Courageous Californians        |  3 |  2 |  1 |  0 |  7"", ""Blithering Badgers             |  3 |  0 |  1 |  2 |  1"", ""Devastating Donkeys            |  3 |  0 |  1 |  2 |  1""]}]}","Tally the results of a small football competition.

Based on an input file containing which team played against which and what the
outcome was, create a file with a table like this:

```text
Team                           | MP |  W |  D |  L |  P
Devastating Donkeys            |  3 |  2 |  1 |  0 |  7
Allegoric Alaskans             |  3 |  2 |  0 |  1 |  6
Blithering Badgers             |  3 |  1 |  0 |  2 |  3
Courageous Californians        |  3 |  0 |  1 |  2 |  1
```

What do those abbreviations mean?

- MP: Matches Played
- W: Matches Won
- D: Matches Drawn (Tied)
- L: Matches Lost
- P: Points

A win earns a team 3 points. A draw earns 1. A loss earns 0.

The outcome should be ordered by points, descending. In case of a tie, teams are ordered alphabetically.

###

Input

Your tallying program will receive input that looks like:

```text
Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win
```

The result of the match refers to the first team listed. So this line

```text
Allegoric Alaskans;Blithering Badgers;win
```

Means that the Allegoric Alaskans beat the Blithering Badgers.

This line:

```text
Courageous Californians;Blithering Badgers;loss
```

Means that the Blithering Badgers beat the Courageous Californians.

And this line:

```text
Devastating Donkeys;Courageous Californians;draw
```

Means that the Devastating Donkeys and Courageous Californians tied.
"
transpose,"{""exercise"": ""transpose"", ""version"": ""1.1.0"", ""comments"": [""JSON doesn't allow for multi-line strings, so all multi-line input is "", ""presented here as arrays of strings. It's up to the test generator to join the "", ""lines together with line breaks.""], ""cases"": [{""description"": ""empty string"", ""property"": ""transpose"", ""input"": {""lines"": []}, ""expected"": []}, {""description"": ""two characters in a row"", ""property"": ""transpose"", ""input"": {""lines"": [""A1""]}, ""expected"": [""A"", ""1""]}, {""description"": ""two characters in a column"", ""property"": ""transpose"", ""input"": {""lines"": [""A"", ""1""]}, ""expected"": [""A1""]}, {""description"": ""simple"", ""property"": ""transpose"", ""input"": {""lines"": [""ABC"", ""123""]}, ""expected"": [""A1"", ""B2"", ""C3""]}, {""description"": ""single line"", ""property"": ""transpose"", ""input"": {""lines"": [""Single line.""]}, ""expected"": [""S"", ""i"", ""n"", ""g"", ""l"", ""e"", "" "", ""l"", ""i"", ""n"", ""e"", "".""]}, {""description"": ""first line longer than second line"", ""property"": ""transpose"", ""input"": {""lines"": [""The fourth line."", ""The fifth line.""]}, ""expected"": [""TT"", ""hh"", ""ee"", ""  "", ""ff"", ""oi"", ""uf"", ""rt"", ""th"", ""h "", "" l"", ""li"", ""in"", ""ne"", ""e."", "".""]}, {""description"": ""second line longer than first line"", ""property"": ""transpose"", ""input"": {""lines"": [""The first line."", ""The second line.""]}, ""expected"": [""TT"", ""hh"", ""ee"", ""  "", ""fs"", ""ie"", ""rc"", ""so"", ""tn"", "" d"", ""l "", ""il"", ""ni"", ""en"", "".e"", "" .""]}, {""description"": ""mixed line length"", ""property"": ""transpose"", ""input"": {""lines"": [""The longest line."", ""A long line."", ""A longer line."", ""A line.""]}, ""expected"": [""TAAA"", ""h   "", ""elll"", "" ooi"", ""lnnn"", ""ogge"", ""n e."", ""glr"", ""ei "", ""snl"", ""tei"", "" .n"", ""l e"", ""i ."", ""n"", ""e"", "".""]}, {""description"": ""square"", ""property"": ""transpose"", ""input"": {""lines"": [""HEART"", ""EMBER"", ""ABUSE"", ""RESIN"", ""TREND""]}, ""expected"": [""HEART"", ""EMBER"", ""ABUSE"", ""RESIN"", ""TREND""]}, {""description"": ""rectangle"", ""property"": ""transpose"", ""input"": {""lines"": [""FRACTURE"", ""OUTLINED"", ""BLOOMING"", ""SEPTETTE""]}, ""expected"": [""FOBS"", ""RULE"", ""ATOP"", ""CLOT"", ""TIME"", ""UNIT"", ""RENT"", ""EDGE""]}, {""description"": ""triangle"", ""property"": ""transpose"", ""input"": {""lines"": [""T"", ""EE"", ""AAA"", ""SSSS"", ""EEEEE"", ""RRRRRR""]}, ""expected"": [""TEASER"", "" EASER"", ""  ASER"", ""   SER"", ""    ER"", ""     R""]}]}","Given an input text output it transposed.

Roughly explained, the transpose of a matrix:

```text
ABC
DEF
```

is given by:

```text
AD
BE
CF
```

Rows become columns and columns become rows. See <https://en.wikipedia.org/wiki/Transpose>.

If the input has rows of different lengths, this is to be solved as follows:

- Pad to the left with spaces.
- Don't pad to the right.

Therefore, transposing this matrix:

```text
ABC
DE
```

results in:

```text
AD
BE
C
```

And transposing:

```text
AB
DEF
```

results in:

```text
AD
BE
 F
```

In general, all characters from the input should also be present in the transposed output.
That means that if a column in the input text contains only spaces on its bottom-most row(s),
the corresponding output row should contain the spaces in its right-most column(s).
"
tree-building,{},"Refactor a tree building algorithm.

Some web-forums have a tree layout, so posts are presented as a tree. However
the posts are typically stored in a database as an unsorted set of records. Thus
when presenting the posts to the user the tree structure has to be
reconstructed.

Your job will be to refactor a working but slow and ugly piece of code that
implements the tree building logic for highly abstracted records. The records
only contain an ID number and a parent ID number. The ID number is always
between 0 (inclusive) and the length of the record list (exclusive). All records
have a parent ID lower than their own ID, except for the root record, which has
a parent ID that's equal to its own ID.

An example tree:

```text
root (ID: 0, parent ID: 0)
|-- child1 (ID: 1, parent ID: 0)
|    |-- grandchild1 (ID: 2, parent ID: 1)
|    +-- grandchild2 (ID: 4, parent ID: 1)
+-- child2 (ID: 3, parent ID: 0)
|    +-- grandchild3 (ID: 6, parent ID: 3)
+-- child3 (ID: 5, parent ID: 0)
```
"
triangle,"{""exercise"": ""triangle"", ""version"": ""1.1.0"", ""comments"": ["" Pursuant to discussion in #202, we have decided NOT to test triangles "", "" where all side lengths are positive but a + b = c. e.g:               "", "" (2, 4, 2, Isosceles), (1, 3, 4, Scalene).                             "", "" It's true that the triangle inequality admits such triangles.These    "", "" triangles have zero area, however.                                    "", "" They're degenerate triangles with all three vertices collinear.       "", "" (In contrast, we will test (0, 0, 0, Illegal), as it is a point)      "", "" The tests assert properities of the triangle are true or false.       "", "" See: https://github.com/exercism/problem-specifications/issues/379 for disscussion  "", "" of this approach                                                      "", "" How you handle invalid triangles is up to you. These tests suggest a  "", "" triangle is returned, but all of its properties are false. But you    "", "" could also have the creation of an invalid triangle return an error   "", "" or exception. Choose what is idiomatic for your language.             ""], ""cases"": [{""description"": ""returns true if the triangle is equilateral"", ""cases"": [{""description"": ""true if all sides are equal"", ""property"": ""equilateral"", ""input"": {""sides"": [2, 2, 2]}, ""expected"": true}, {""description"": ""false if any side is unequal"", ""property"": ""equilateral"", ""input"": {""sides"": [2, 3, 2]}, ""expected"": false}, {""description"": ""false if no sides are equal"", ""property"": ""equilateral"", ""input"": {""sides"": [5, 4, 6]}, ""expected"": false}, {""description"": ""All zero sides are illegal, so the triangle is not equilateral"", ""property"": ""equilateral"", ""input"": {""sides"": [0, 0, 0]}, ""expected"": false}, {""comments"": ["" Your track may choose to skip this test    "", "" and deal only with integers if appropriate ""], ""description"": ""sides may be floats"", ""property"": ""equilateral"", ""input"": {""sides"": [0.5, 0.5, 0.5]}, ""expected"": true}]}, {""description"": ""returns true if the triangle is isosceles"", ""cases"": [{""description"": ""true if last two sides are equal"", ""property"": ""isosceles"", ""input"": {""sides"": [3, 4, 4]}, ""expected"": true}, {""description"": ""true if first two sides are equal"", ""property"": ""isosceles"", ""input"": {""sides"": [4, 4, 3]}, ""expected"": true}, {""description"": ""true if first and last sides are equal"", ""property"": ""isosceles"", ""input"": {""sides"": [4, 3, 4]}, ""expected"": true}, {""description"": ""equilateral triangles are also isosceles"", ""property"": ""isosceles"", ""input"": {""sides"": [4, 4, 4]}, ""expected"": true}, {""description"": ""false if no sides are equal"", ""property"": ""isosceles"", ""input"": {""sides"": [2, 3, 4]}, ""expected"": false}, {""description"": ""Sides that violate triangle inequality are not isosceles, even if two are equal"", ""property"": ""isosceles"", ""input"": {""sides"": [1, 1, 3]}, ""expected"": false}, {""comments"": ["" Your track may choose to skip this test    "", "" and deal only with integers if appropriate ""], ""property"": ""isosceles"", ""description"": ""sides may be floats"", ""input"": {""sides"": [0.5, 0.4, 0.5]}, ""expected"": true}]}, {""description"": ""returns true if the triangle is scalene"", ""cases"": [{""description"": ""true if no sides are equal"", ""property"": ""scalene"", ""input"": {""sides"": [5, 4, 6]}, ""expected"": true}, {""description"": ""false if all sides are equal"", ""property"": ""scalene"", ""input"": {""sides"": [4, 4, 4]}, ""expected"": false}, {""description"": ""false if two sides are equal"", ""property"": ""scalene"", ""input"": {""sides"": [4, 4, 3]}, ""expected"": false}, {""description"": ""Sides that violate triangle inequality are not scalene, even if they are all different"", ""property"": ""scalene"", ""input"": {""sides"": [7, 3, 2]}, ""expected"": false}, {""comments"": ["" Your track may choose to skip this test    "", "" and deal only with integers if appropriate ""], ""description"": ""sides may be floats"", ""property"": ""scalene"", ""input"": {""sides"": [0.5, 0.4, 0.6]}, ""expected"": true}]}]}","Determine if a triangle is equilateral, isosceles, or scalene.

An _equilateral_ triangle has all three sides the same length.

An _isosceles_ triangle has at least two sides the same length. (It is sometimes
specified as having exactly two sides the same length, but for the purposes of
this exercise we'll say at least two.)

A _scalene_ triangle has all sides of different lengths.

## Note

For a shape to be a triangle at all, all sides have to be of length > 0, and
the sum of the lengths of any two sides must be greater than or equal to the
length of the third side. See [Triangle Inequality](https://en.wikipedia.org/wiki/Triangle_inequality).

## Dig Deeper

The case where the sum of the lengths of two sides _equals_ that of the
third is known as a _degenerate_ triangle - it has zero area and looks like
a single line. Feel free to add your own code/tests to check for degenerate triangles.
"
trinary,"{""exercise"": ""trinary"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""returns the decimal representation of the input trinary value"", ""cases"": [{""description"": ""trinary 1 is decimal 1"", ""property"": ""toDecimal"", ""input"": {""trinary"": 1}, ""expected"": 1}, {""description"": ""trinary 2 is decimal 2"", ""property"": ""toDecimal"", ""input"": {""trinary"": 2}, ""expected"": 2}, {""description"": ""trinary 10 is decimal 3"", ""property"": ""toDecimal"", ""input"": {""trinary"": 10}, ""expected"": 3}, {""description"": ""trinary 11 is decimal 4"", ""property"": ""toDecimal"", ""input"": {""trinary"": 11}, ""expected"": 4}, {""description"": ""trinary 100 is decimal 9"", ""property"": ""toDecimal"", ""input"": {""trinary"": 100}, ""expected"": 9}, {""description"": ""trinary 112 is decimal 14"", ""property"": ""toDecimal"", ""input"": {""trinary"": 112}, ""expected"": 14}, {""description"": ""trinary 222 is decimal 26"", ""property"": ""toDecimal"", ""input"": {""trinary"": 222}, ""expected"": 26}, {""description"": ""trinary 1122000120 is decimal 32091"", ""property"": ""toDecimal"", ""input"": {""trinary"": 1122000120}, ""expected"": 32091}, {""description"": ""invalid trinary digits returns 0"", ""property"": ""toDecimal"", ""input"": {""trinary"": ""1234""}, ""expected"": 0}, {""description"": ""invalid word as input returns 0"", ""property"": ""toDecimal"", ""input"": {""trinary"": ""carrot""}, ""expected"": 0}, {""description"": ""invalid numbers with letters as input returns 0"", ""property"": ""toDecimal"", ""input"": {""trinary"": ""0a1b2c""}, ""expected"": 0}]}]}","Convert a trinary number, represented as a string (e.g. '102012'), to its
decimal equivalent using first principles.

The program should consider strings specifying an invalid trinary as the
value 0.

Trinary numbers contain three symbols: 0, 1, and 2.

The last place in a trinary number is the 1's place. The second to last
is the 3's place, the third to last is the 9's place, etc.

```shell
# ""102012""
    1       0       2       0       1       2    # the number
1*3^5 + 0*3^4 + 2*3^3 + 0*3^2 + 1*3^1 + 2*3^0    # the value
  243 +     0 +    54 +     0 +     3 +     2 =  302
```

If your language provides a method in the standard library to perform the
conversion, pretend it doesn't exist and implement it yourself.
"
twelve-days,"{""exercise"": ""twelve-days"", ""version"": ""1.1.0"", ""comments"": [""JSON doesn't allow for multi-line strings, so all verses are presented "", ""here as arrays of strings. It's up to the test generator to join the "", ""lines together with line breaks.""], ""cases"": [{""description"": ""verse"", ""cases"": [{""description"": ""first day a partridge in a pear tree"", ""property"": ""recite"", ""input"": {""startVerse"": 1, ""endVerse"": 1}, ""expected"": [""On the first day of Christmas my true love gave to me, a Partridge in a Pear Tree.""]}, {""description"": ""second day two turtle doves"", ""property"": ""recite"", ""input"": {""startVerse"": 2, ""endVerse"": 2}, ""expected"": [""On the second day of Christmas my true love gave to me, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""third day three french hens"", ""property"": ""recite"", ""input"": {""startVerse"": 3, ""endVerse"": 3}, ""expected"": [""On the third day of Christmas my true love gave to me, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""fourth day four calling birds"", ""property"": ""recite"", ""input"": {""startVerse"": 4, ""endVerse"": 4}, ""expected"": [""On the fourth day of Christmas my true love gave to me, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""fifth day five gold rings"", ""property"": ""recite"", ""input"": {""startVerse"": 5, ""endVerse"": 5}, ""expected"": [""On the fifth day of Christmas my true love gave to me, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""sixth day six geese-a-laying"", ""property"": ""recite"", ""input"": {""startVerse"": 6, ""endVerse"": 6}, ""expected"": [""On the sixth day of Christmas my true love gave to me, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""seventh day seven swans-a-swimming"", ""property"": ""recite"", ""input"": {""startVerse"": 7, ""endVerse"": 7}, ""expected"": [""On the seventh day of Christmas my true love gave to me, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""eighth day eight maids-a-milking"", ""property"": ""recite"", ""input"": {""startVerse"": 8, ""endVerse"": 8}, ""expected"": [""On the eighth day of Christmas my true love gave to me, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""ninth day nine ladies dancing"", ""property"": ""recite"", ""input"": {""startVerse"": 9, ""endVerse"": 9}, ""expected"": [""On the ninth day of Christmas my true love gave to me, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""tenth day ten lords-a-leaping"", ""property"": ""recite"", ""input"": {""startVerse"": 10, ""endVerse"": 10}, ""expected"": [""On the tenth day of Christmas my true love gave to me, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""eleventh day eleven pipers piping"", ""property"": ""recite"", ""input"": {""startVerse"": 11, ""endVerse"": 11}, ""expected"": [""On the eleventh day of Christmas my true love gave to me, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""twelfth day twelve drummers drumming"", ""property"": ""recite"", ""input"": {""startVerse"": 12, ""endVerse"": 12}, ""expected"": [""On the twelfth day of Christmas my true love gave to me, twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}]}, {""description"": ""lyrics"", ""cases"": [{""description"": ""recites first three verses of the song"", ""property"": ""recite"", ""input"": {""startVerse"": 1, ""endVerse"": 3}, ""expected"": [""On the first day of Christmas my true love gave to me, a Partridge in a Pear Tree."", ""On the second day of Christmas my true love gave to me, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the third day of Christmas my true love gave to me, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""recites three verses from the middle of the song"", ""property"": ""recite"", ""input"": {""startVerse"": 4, ""endVerse"": 6}, ""expected"": [""On the fourth day of Christmas my true love gave to me, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the fifth day of Christmas my true love gave to me, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the sixth day of Christmas my true love gave to me, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}, {""description"": ""recites the whole song"", ""property"": ""recite"", ""input"": {""startVerse"": 1, ""endVerse"": 12}, ""expected"": [""On the first day of Christmas my true love gave to me, a Partridge in a Pear Tree."", ""On the second day of Christmas my true love gave to me, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the third day of Christmas my true love gave to me, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the fourth day of Christmas my true love gave to me, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the fifth day of Christmas my true love gave to me, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the sixth day of Christmas my true love gave to me, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the seventh day of Christmas my true love gave to me, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the eighth day of Christmas my true love gave to me, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the ninth day of Christmas my true love gave to me, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the tenth day of Christmas my true love gave to me, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the eleventh day of Christmas my true love gave to me, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree."", ""On the twelfth day of Christmas my true love gave to me, twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.""]}]}]}","Output the lyrics to 'The Twelve Days of Christmas'.

```text
On the first day of Christmas my true love gave to me, a Partridge in a Pear Tree.

On the second day of Christmas my true love gave to me, two Turtle Doves, and a Partridge in a Pear Tree.

On the third day of Christmas my true love gave to me, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the fourth day of Christmas my true love gave to me, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the fifth day of Christmas my true love gave to me, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the sixth day of Christmas my true love gave to me, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the seventh day of Christmas my true love gave to me, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the eighth day of Christmas my true love gave to me, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the ninth day of Christmas my true love gave to me, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the tenth day of Christmas my true love gave to me, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the eleventh day of Christmas my true love gave to me, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the twelfth day of Christmas my true love gave to me, twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.
```
"
two-bucket,"{""exercise"": ""two-bucket"", ""version"": ""1.4.0"", ""cases"": [{""description"": ""Measure using bucket one of size 3 and bucket two of size 5 - start with bucket one"", ""property"": ""measure"", ""input"": {""bucketOne"": 3, ""bucketTwo"": 5, ""goal"": 1, ""startBucket"": ""one""}, ""expected"": {""moves"": 4, ""goalBucket"": ""one"", ""otherBucket"": 5}}, {""description"": ""Measure using bucket one of size 3 and bucket two of size 5 - start with bucket two"", ""property"": ""measure"", ""input"": {""bucketOne"": 3, ""bucketTwo"": 5, ""goal"": 1, ""startBucket"": ""two""}, ""expected"": {""moves"": 8, ""goalBucket"": ""two"", ""otherBucket"": 3}}, {""description"": ""Measure using bucket one of size 7 and bucket two of size 11 - start with bucket one"", ""property"": ""measure"", ""input"": {""bucketOne"": 7, ""bucketTwo"": 11, ""goal"": 2, ""startBucket"": ""one""}, ""expected"": {""moves"": 14, ""goalBucket"": ""one"", ""otherBucket"": 11}}, {""description"": ""Measure using bucket one of size 7 and bucket two of size 11 - start with bucket two"", ""property"": ""measure"", ""input"": {""bucketOne"": 7, ""bucketTwo"": 11, ""goal"": 2, ""startBucket"": ""two""}, ""expected"": {""moves"": 18, ""goalBucket"": ""two"", ""otherBucket"": 7}}, {""description"": ""Measure one step using bucket one of size 1 and bucket two of size 3 - start with bucket two"", ""property"": ""measure"", ""input"": {""bucketOne"": 1, ""bucketTwo"": 3, ""goal"": 3, ""startBucket"": ""two""}, ""expected"": {""moves"": 1, ""goalBucket"": ""two"", ""otherBucket"": 0}}, {""description"": ""Measure using bucket one of size 2 and bucket two of size 3 - start with bucket one and end with bucket two"", ""property"": ""measure"", ""input"": {""bucketOne"": 2, ""bucketTwo"": 3, ""goal"": 3, ""startBucket"": ""one""}, ""expected"": {""moves"": 2, ""goalBucket"": ""two"", ""otherBucket"": 2}}]}","Given two buckets of different size, demonstrate how to measure an exact number of liters by strategically transferring liters of fluid between the buckets.

Since this mathematical problem is fairly subject to interpretation / individual approach, the tests have been written specifically to expect one overarching solution.

To help, the tests provide you with which bucket to fill first. That means, when starting with the larger bucket full, you are NOT allowed at any point to have the smaller bucket full and the larger bucket empty (aka, the opposite starting point); that would defeat the purpose of comparing both approaches!

Your program will take as input:
- the size of bucket one
- the size of bucket two
- the desired number of liters to reach
- which bucket to fill first, either bucket one or bucket two

Your program should determine:
- the total number of ""moves"" it should take to reach the desired number of liters, including the first fill
- which bucket should end up with the desired number of liters (let's say this is bucket A) - either bucket one or bucket two
- how many liters are left in the other bucket (bucket B)

Note: any time a change is made to either or both buckets counts as one (1) move.

Example:
Bucket one can hold up to 7 liters, and bucket two can hold up to 11 liters. Let's say bucket one, at a given step, is holding 7 liters, and bucket two is holding 8 liters (7,8). If you empty bucket one and make no change to bucket two, leaving you with 0 liters and 8 liters respectively (0,8), that counts as one ""move"". Instead, if you had poured from bucket one into bucket two until bucket two was full, leaving you with 4 liters in bucket one and 11 liters in bucket two (4,11), that would count as only one ""move"" as well.

To conclude, the only valid moves are:
- pouring from one bucket to another
- emptying one bucket and doing nothing to the other
- filling one bucket and doing nothing to the other

Written with <3 at [Fullstack Academy](http://www.fullstackacademy.com/) by Lindsay Levine.
"
two-fer,"{""exercise"": ""two-fer"", ""version"": ""1.2.0"", ""cases"": [{""description"": ""no name given"", ""property"": ""twoFer"", ""input"": {""name"": null}, ""expected"": ""One for you, one for me.""}, {""description"": ""a name given"", ""property"": ""twoFer"", ""input"": {""name"": ""Alice""}, ""expected"": ""One for Alice, one for me.""}, {""description"": ""another name given"", ""property"": ""twoFer"", ""input"": {""name"": ""Bob""}, ""expected"": ""One for Bob, one for me.""}]}","`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

```text
""One for X, one for me.""
```

When X is a name or ""you"".

If the given name is ""Alice"", the result should be ""One for Alice, one for me.""
If no name is given, the result should be ""One for you, one for me.""

"
variable-length-quantity,"{""exercise"": ""variable-length-quantity"", ""version"": ""1.1.0"", ""comments"": [""JSON doesn't allow hexadecimal literals."", ""All numbers are given as decimal literals instead."", ""It is highly recommended that your track's test generator display all numbers as hexadecimal literals.""], ""cases"": [{""description"": ""Encode a series of integers, producing a series of bytes."", ""cases"": [{""description"": ""zero"", ""property"": ""encode"", ""input"": {""integers"": [0]}, ""expected"": [0]}, {""description"": ""arbitrary single byte"", ""property"": ""encode"", ""input"": {""integers"": [64]}, ""expected"": [64]}, {""description"": ""largest single byte"", ""property"": ""encode"", ""input"": {""integers"": [127]}, ""expected"": [127]}, {""description"": ""smallest double byte"", ""property"": ""encode"", ""input"": {""integers"": [128]}, ""expected"": [129, 0]}, {""description"": ""arbitrary double byte"", ""property"": ""encode"", ""input"": {""integers"": [8192]}, ""expected"": [192, 0]}, {""description"": ""largest double byte"", ""property"": ""encode"", ""input"": {""integers"": [16383]}, ""expected"": [255, 127]}, {""description"": ""smallest triple byte"", ""property"": ""encode"", ""input"": {""integers"": [16384]}, ""expected"": [129, 128, 0]}, {""description"": ""arbitrary triple byte"", ""property"": ""encode"", ""input"": {""integers"": [1048576]}, ""expected"": [192, 128, 0]}, {""description"": ""largest triple byte"", ""property"": ""encode"", ""input"": {""integers"": [2097151]}, ""expected"": [255, 255, 127]}, {""description"": ""smallest quadruple byte"", ""property"": ""encode"", ""input"": {""integers"": [2097152]}, ""expected"": [129, 128, 128, 0]}, {""description"": ""arbitrary quadruple byte"", ""property"": ""encode"", ""input"": {""integers"": [134217728]}, ""expected"": [192, 128, 128, 0]}, {""description"": ""largest quadruple byte"", ""property"": ""encode"", ""input"": {""integers"": [268435455]}, ""expected"": [255, 255, 255, 127]}, {""description"": ""smallest quintuple byte"", ""property"": ""encode"", ""input"": {""integers"": [268435456]}, ""expected"": [129, 128, 128, 128, 0]}, {""description"": ""arbitrary quintuple byte"", ""property"": ""encode"", ""input"": {""integers"": [4278190080]}, ""expected"": [143, 248, 128, 128, 0]}, {""description"": ""maximum 32-bit integer input"", ""property"": ""encode"", ""input"": {""integers"": [4294967295]}, ""expected"": [143, 255, 255, 255, 127]}, {""description"": ""two single-byte values"", ""property"": ""encode"", ""input"": {""integers"": [64, 127]}, ""expected"": [64, 127]}, {""description"": ""two multi-byte values"", ""property"": ""encode"", ""input"": {""integers"": [16384, 1193046]}, ""expected"": [129, 128, 0, 200, 232, 86]}, {""description"": ""many multi-byte values"", ""property"": ""encode"", ""input"": {""integers"": [8192, 1193046, 268435455, 0, 16383, 16384]}, ""expected"": [192, 0, 200, 232, 86, 255, 255, 255, 127, 0, 255, 127, 129, 128, 0]}]}, {""description"": ""Decode a series of bytes, producing a series of integers."", ""cases"": [{""description"": ""one byte"", ""property"": ""decode"", ""input"": {""integers"": [127]}, ""expected"": [127]}, {""description"": ""two bytes"", ""property"": ""decode"", ""input"": {""integers"": [192, 0]}, ""expected"": [8192]}, {""description"": ""three bytes"", ""property"": ""decode"", ""input"": {""integers"": [255, 255, 127]}, ""expected"": [2097151]}, {""description"": ""four bytes"", ""property"": ""decode"", ""input"": {""integers"": [129, 128, 128, 0]}, ""expected"": [2097152]}, {""description"": ""maximum 32-bit integer"", ""property"": ""decode"", ""input"": {""integers"": [143, 255, 255, 255, 127]}, ""expected"": [4294967295]}, {""description"": ""incomplete sequence causes error"", ""property"": ""decode"", ""input"": {""integers"": [255]}, ""expected"": null}, {""description"": ""incomplete sequence causes error, even if value is zero"", ""property"": ""decode"", ""input"": {""integers"": [128]}, ""expected"": null}, {""description"": ""multiple values"", ""property"": ""decode"", ""input"": {""integers"": [192, 0, 200, 232, 86, 255, 255, 255, 127, 0, 255, 127, 129, 128, 0]}, ""expected"": [8192, 1193046, 268435455, 0, 16383, 16384]}]}]}","Implement variable length quantity encoding and decoding.

The goal of this exercise is to implement [VLQ](https://en.wikipedia.org/wiki/Variable-length_quantity) encoding/decoding.

In short, the goal of this encoding is to encode integer values in a way that would save bytes.
Only the first 7 bits of each byte is significant (right-justified; sort of like an ASCII byte).
So, if you have a 32-bit value, you have to unpack it into a series of 7-bit bytes.
Of course, you will have a variable number of bytes depending upon your integer.
To indicate which is the last byte of the series, you leave bit #7 clear.
In all of the preceding bytes, you set bit #7.

So, if an integer is between `0-127`, it can be represented as one byte.
Although VLQ can deal with numbers of arbitrary sizes, for this exercise we will restrict ourselves to only numbers that fit in a 32-bit unsigned integer.
Here are examples of integers as 32-bit values, and the variable length quantities that they translate to:

```text
 NUMBER        VARIABLE QUANTITY
00000000              00
00000040              40
0000007F              7F
00000080             81 00
00002000             C0 00
00003FFF             FF 7F
00004000           81 80 00
00100000           C0 80 00
001FFFFF           FF FF 7F
00200000          81 80 80 00
08000000          C0 80 80 00
0FFFFFFF          FF FF FF 7F
```
"
word-count,"{""exercise"": ""word-count"", ""version"": ""1.2.0"", ""comments"": [""For each word in the input, count the number of times it appears in the"", ""entire sentence.""], ""cases"": [{""description"": ""count one word"", ""property"": ""countWords"", ""input"": {""sentence"": ""word""}, ""expected"": {""word"": 1}}, {""description"": ""count one of each word"", ""property"": ""countWords"", ""input"": {""sentence"": ""one of each""}, ""expected"": {""one"": 1, ""of"": 1, ""each"": 1}}, {""description"": ""multiple occurrences of a word"", ""property"": ""countWords"", ""input"": {""sentence"": ""one fish two fish red fish blue fish""}, ""expected"": {""one"": 1, ""fish"": 4, ""two"": 1, ""red"": 1, ""blue"": 1}}, {""description"": ""handles cramped lists"", ""property"": ""countWords"", ""input"": {""sentence"": ""one,two,three""}, ""expected"": {""one"": 1, ""two"": 1, ""three"": 1}}, {""description"": ""handles expanded lists"", ""property"": ""countWords"", ""input"": {""sentence"": ""one,\ntwo,\nthree""}, ""expected"": {""one"": 1, ""two"": 1, ""three"": 1}}, {""description"": ""ignore punctuation"", ""property"": ""countWords"", ""input"": {""sentence"": ""car: carpet as java: javascript!!&@$%^&""}, ""expected"": {""car"": 1, ""carpet"": 1, ""as"": 1, ""java"": 1, ""javascript"": 1}}, {""description"": ""include numbers"", ""property"": ""countWords"", ""input"": {""sentence"": ""testing, 1, 2 testing""}, ""expected"": {""testing"": 2, ""1"": 1, ""2"": 1}}, {""description"": ""normalize case"", ""property"": ""countWords"", ""input"": {""sentence"": ""go Go GO Stop stop""}, ""expected"": {""go"": 3, ""stop"": 2}}, {""description"": ""with apostrophes"", ""property"": ""countWords"", ""input"": {""sentence"": ""First: don't laugh. Then: don't cry.""}, ""expected"": {""first"": 1, ""don't"": 2, ""laugh"": 1, ""then"": 1, ""cry"": 1}}, {""description"": ""with quotations"", ""property"": ""countWords"", ""input"": {""sentence"": ""Joe can't tell between 'large' and large.""}, ""expected"": {""joe"": 1, ""can't"": 1, ""tell"": 1, ""between"": 1, ""large"": 2, ""and"": 1}}, {""description"": ""multiple spaces not detected as a word"", ""property"": ""countWords"", ""input"": {""sentence"": "" multiple   whitespaces""}, ""expected"": {""multiple"": 1, ""whitespaces"": 1}}]}","Given a phrase, count the occurrences of each word in that phrase.

For example for the input `""olly olly in come free""`

```text
olly: 2
in: 1
come: 1
free: 1
```
"
word-search,"{""exercise"": ""word-search"", ""version"": ""1.2.1"", ""comments"": [""Grid rows and columns are 1-indexed.""], ""cases"": [{""description"": ""Should accept an initial game grid and a target search word"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre""], ""wordsToSearchFor"": [""clojure""]}, ""expected"": {""clojure"": null}}, {""description"": ""Should locate one word written left to right"", ""property"": ""search"", ""input"": {""grid"": [""clojurermt""], ""wordsToSearchFor"": [""clojure""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 1}, ""end"": {""column"": 7, ""row"": 1}}}}, {""description"": ""Should locate the same word written left to right in a different position"", ""property"": ""search"", ""input"": {""grid"": [""mtclojurer""], ""wordsToSearchFor"": [""clojure""]}, ""expected"": {""clojure"": {""start"": {""column"": 3, ""row"": 1}, ""end"": {""column"": 9, ""row"": 1}}}}, {""description"": ""Should locate a different left to right word"", ""property"": ""search"", ""input"": {""grid"": [""coffeelplx""], ""wordsToSearchFor"": [""coffee""]}, ""expected"": {""coffee"": {""start"": {""column"": 1, ""row"": 1}, ""end"": {""column"": 6, ""row"": 1}}}}, {""description"": ""Should locate that different left to right word in a different position"", ""property"": ""search"", ""input"": {""grid"": [""xcoffeezlp""], ""wordsToSearchFor"": [""coffee""]}, ""expected"": {""coffee"": {""start"": {""column"": 2, ""row"": 1}, ""end"": {""column"": 7, ""row"": 1}}}}, {""description"": ""Should locate a left to right word in two line grid"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""tclojurerm""], ""wordsToSearchFor"": [""clojure""]}, ""expected"": {""clojure"": {""start"": {""column"": 2, ""row"": 2}, ""end"": {""column"": 8, ""row"": 2}}}}, {""description"": ""Should locate a left to right word in three line grid"", ""property"": ""search"", ""input"": {""grid"": [""camdcimgtc"", ""jefblpepre"", ""clojurermt""], ""wordsToSearchFor"": [""clojure""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 3}, ""end"": {""column"": 7, ""row"": 3}}}}, {""description"": ""Should locate a left to right word in ten line grid"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""screeaumgr"", ""alxhpburyi"", ""jalaycalmp"", ""clojurermt""], ""wordsToSearchFor"": [""clojure""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 10}, ""end"": {""column"": 7, ""row"": 10}}}}, {""description"": ""Should locate that left to right word in a different position in a ten line grid"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""screeaumgr"", ""alxhpburyi"", ""clojurermt"", ""jalaycalmp""], ""wordsToSearchFor"": [""clojure""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 9}, ""end"": {""column"": 7, ""row"": 9}}}}, {""description"": ""Should locate a different left to right word in a ten line grid"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""fortranftw"", ""alxhpburyi"", ""clojurermt"", ""jalaycalmp""], ""wordsToSearchFor"": [""fortran""]}, ""expected"": {""fortran"": {""start"": {""column"": 1, ""row"": 7}, ""end"": {""column"": 7, ""row"": 7}}}}, {""description"": ""Should locate multiple words"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""fortranftw"", ""alxhpburyi"", ""jalaycalmp"", ""clojurermt""], ""wordsToSearchFor"": [""fortran"", ""clojure""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 10}, ""end"": {""column"": 7, ""row"": 10}}, ""fortran"": {""start"": {""column"": 1, ""row"": 7}, ""end"": {""column"": 7, ""row"": 7}}}}, {""description"": ""Should locate a single word written right to left"", ""property"": ""search"", ""input"": {""grid"": [""rixilelhrs""], ""wordsToSearchFor"": [""elixir""]}, ""expected"": {""elixir"": {""start"": {""column"": 6, ""row"": 1}, ""end"": {""column"": 1, ""row"": 1}}}}, {""description"": ""Should locate multiple words written in different horizontal directions"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""screeaumgr"", ""alxhpburyi"", ""jalaycalmp"", ""clojurermt""], ""wordsToSearchFor"": [""elixir"", ""clojure""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 10}, ""end"": {""column"": 7, ""row"": 10}}, ""elixir"": {""start"": {""column"": 6, ""row"": 5}, ""end"": {""column"": 1, ""row"": 5}}}}, {""description"": ""Should locate words written top to bottom"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""screeaumgr"", ""alxhpburyi"", ""jalaycalmp"", ""clojurermt""], ""wordsToSearchFor"": [""clojure"", ""elixir"", ""ecmascript""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 10}, ""end"": {""column"": 7, ""row"": 10}}, ""elixir"": {""start"": {""column"": 6, ""row"": 5}, ""end"": {""column"": 1, ""row"": 5}}, ""ecmascript"": {""start"": {""column"": 10, ""row"": 1}, ""end"": {""column"": 10, ""row"": 10}}}}, {""description"": ""Should locate words written bottom to top"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""screeaumgr"", ""alxhpburyi"", ""jalaycalmp"", ""clojurermt""], ""wordsToSearchFor"": [""clojure"", ""elixir"", ""ecmascript"", ""rust""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 10}, ""end"": {""column"": 7, ""row"": 10}}, ""elixir"": {""start"": {""column"": 6, ""row"": 5}, ""end"": {""column"": 1, ""row"": 5}}, ""ecmascript"": {""start"": {""column"": 10, ""row"": 1}, ""end"": {""column"": 10, ""row"": 10}}, ""rust"": {""start"": {""column"": 9, ""row"": 5}, ""end"": {""column"": 9, ""row"": 2}}}}, {""description"": ""Should locate words written top left to bottom right"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""screeaumgr"", ""alxhpburyi"", ""jalaycalmp"", ""clojurermt""], ""wordsToSearchFor"": [""clojure"", ""elixir"", ""ecmascript"", ""rust"", ""java""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 10}, ""end"": {""column"": 7, ""row"": 10}}, ""elixir"": {""start"": {""column"": 6, ""row"": 5}, ""end"": {""column"": 1, ""row"": 5}}, ""ecmascript"": {""start"": {""column"": 10, ""row"": 1}, ""end"": {""column"": 10, ""row"": 10}}, ""rust"": {""start"": {""column"": 9, ""row"": 5}, ""end"": {""column"": 9, ""row"": 2}}, ""java"": {""start"": {""column"": 1, ""row"": 1}, ""end"": {""column"": 4, ""row"": 4}}}}, {""description"": ""Should locate words written bottom right to top left"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""screeaumgr"", ""alxhpburyi"", ""jalaycalmp"", ""clojurermt""], ""wordsToSearchFor"": [""clojure"", ""elixir"", ""ecmascript"", ""rust"", ""java"", ""lua""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 10}, ""end"": {""column"": 7, ""row"": 10}}, ""elixir"": {""start"": {""column"": 6, ""row"": 5}, ""end"": {""column"": 1, ""row"": 5}}, ""ecmascript"": {""start"": {""column"": 10, ""row"": 1}, ""end"": {""column"": 10, ""row"": 10}}, ""rust"": {""start"": {""column"": 9, ""row"": 5}, ""end"": {""column"": 9, ""row"": 2}}, ""java"": {""start"": {""column"": 1, ""row"": 1}, ""end"": {""column"": 4, ""row"": 4}}, ""lua"": {""start"": {""column"": 8, ""row"": 9}, ""end"": {""column"": 6, ""row"": 7}}}}, {""description"": ""Should locate words written bottom left to top right"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""screeaumgr"", ""alxhpburyi"", ""jalaycalmp"", ""clojurermt""], ""wordsToSearchFor"": [""clojure"", ""elixir"", ""ecmascript"", ""rust"", ""java"", ""lua"", ""lisp""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 10}, ""end"": {""column"": 7, ""row"": 10}}, ""elixir"": {""start"": {""column"": 6, ""row"": 5}, ""end"": {""column"": 1, ""row"": 5}}, ""ecmascript"": {""start"": {""column"": 10, ""row"": 1}, ""end"": {""column"": 10, ""row"": 10}}, ""rust"": {""start"": {""column"": 9, ""row"": 5}, ""end"": {""column"": 9, ""row"": 2}}, ""java"": {""start"": {""column"": 1, ""row"": 1}, ""end"": {""column"": 4, ""row"": 4}}, ""lua"": {""start"": {""column"": 8, ""row"": 9}, ""end"": {""column"": 6, ""row"": 7}}, ""lisp"": {""start"": {""column"": 3, ""row"": 6}, ""end"": {""column"": 6, ""row"": 3}}}}, {""description"": ""Should locate words written top right to bottom left"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""screeaumgr"", ""alxhpburyi"", ""jalaycalmp"", ""clojurermt""], ""wordsToSearchFor"": [""clojure"", ""elixir"", ""ecmascript"", ""rust"", ""java"", ""lua"", ""lisp"", ""ruby""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 10}, ""end"": {""column"": 7, ""row"": 10}}, ""elixir"": {""start"": {""column"": 6, ""row"": 5}, ""end"": {""column"": 1, ""row"": 5}}, ""ecmascript"": {""start"": {""column"": 10, ""row"": 1}, ""end"": {""column"": 10, ""row"": 10}}, ""rust"": {""start"": {""column"": 9, ""row"": 5}, ""end"": {""column"": 9, ""row"": 2}}, ""java"": {""start"": {""column"": 1, ""row"": 1}, ""end"": {""column"": 4, ""row"": 4}}, ""lua"": {""start"": {""column"": 8, ""row"": 9}, ""end"": {""column"": 6, ""row"": 7}}, ""lisp"": {""start"": {""column"": 3, ""row"": 6}, ""end"": {""column"": 6, ""row"": 3}}, ""ruby"": {""start"": {""column"": 8, ""row"": 6}, ""end"": {""column"": 5, ""row"": 9}}}}, {""description"": ""Should fail to locate a word that is not in the puzzle"", ""property"": ""search"", ""input"": {""grid"": [""jefblpepre"", ""camdcimgtc"", ""oivokprjsm"", ""pbwasqroua"", ""rixilelhrs"", ""wolcqlirpc"", ""screeaumgr"", ""alxhpburyi"", ""jalaycalmp"", ""clojurermt""], ""wordsToSearchFor"": [""clojure"", ""elixir"", ""ecmascript"", ""rust"", ""java"", ""lua"", ""lisp"", ""ruby"", ""haskell""]}, ""expected"": {""clojure"": {""start"": {""column"": 1, ""row"": 10}, ""end"": {""column"": 7, ""row"": 10}}, ""elixir"": {""start"": {""column"": 6, ""row"": 5}, ""end"": {""column"": 1, ""row"": 5}}, ""ecmascript"": {""start"": {""column"": 10, ""row"": 1}, ""end"": {""column"": 10, ""row"": 10}}, ""rust"": {""start"": {""column"": 9, ""row"": 5}, ""end"": {""column"": 9, ""row"": 2}}, ""java"": {""start"": {""column"": 1, ""row"": 1}, ""end"": {""column"": 4, ""row"": 4}}, ""lua"": {""start"": {""column"": 8, ""row"": 9}, ""end"": {""column"": 6, ""row"": 7}}, ""lisp"": {""start"": {""column"": 3, ""row"": 6}, ""end"": {""column"": 6, ""row"": 3}}, ""ruby"": {""start"": {""column"": 8, ""row"": 6}, ""end"": {""column"": 5, ""row"": 9}}, ""haskell"": null}}]}","In word search puzzles you get a square of letters and have to find specific
words in them.

For example:

```text
jefblpepre
camdcimgtc
oivokprjsm
pbwasqroua
rixilelhrs
wolcqlirpc
screeaumgr
alxhpburyi
jalaycalmp
clojurermt
```

There are several programming languages hidden in the above square.

Words can be hidden in all kinds of directions: left-to-right, right-to-left,
vertical and diagonal.

Given a puzzle and a list of words return the location of the first and last
letter of each word.
"
wordy,"{""exercise"": ""wordy"", ""version"": ""1.1.0"", ""comments"": [""The tests that expect 'false' should be implemented to raise"", ""an error, or indicate a failure. Implement this in a way that"", ""makes sense for your language.""], ""cases"": [{""description"": ""addition"", ""property"": ""answer"", ""input"": {""question"": ""What is 1 plus 1?""}, ""expected"": 2}, {""description"": ""more addition"", ""property"": ""answer"", ""input"": {""question"": ""What is 53 plus 2?""}, ""expected"": 55}, {""description"": ""addition with negative numbers"", ""property"": ""answer"", ""input"": {""question"": ""What is -1 plus -10?""}, ""expected"": -11}, {""description"": ""large addition"", ""property"": ""answer"", ""input"": {""question"": ""What is 123 plus 45678?""}, ""expected"": 45801}, {""description"": ""subtraction"", ""property"": ""answer"", ""input"": {""question"": ""What is 4 minus -12?""}, ""expected"": 16}, {""description"": ""multiplication"", ""property"": ""answer"", ""input"": {""question"": ""What is -3 multiplied by 25?""}, ""expected"": -75}, {""description"": ""division"", ""property"": ""answer"", ""input"": {""question"": ""What is 33 divided by -3?""}, ""expected"": -11}, {""description"": ""multiple additions"", ""property"": ""answer"", ""input"": {""question"": ""What is 1 plus 1 plus 1?""}, ""expected"": 3}, {""description"": ""addition and subtraction"", ""property"": ""answer"", ""input"": {""question"": ""What is 1 plus 5 minus -2?""}, ""expected"": 8}, {""description"": ""multiple subtraction"", ""property"": ""answer"", ""input"": {""question"": ""What is 20 minus 4 minus 13?""}, ""expected"": 3}, {""description"": ""subtraction then addition"", ""property"": ""answer"", ""input"": {""question"": ""What is 17 minus 6 plus 3?""}, ""expected"": 14}, {""description"": ""multiple multiplication"", ""property"": ""answer"", ""input"": {""question"": ""What is 2 multiplied by -2 multiplied by 3?""}, ""expected"": -12}, {""description"": ""addition and multiplication"", ""property"": ""answer"", ""input"": {""question"": ""What is -3 plus 7 multiplied by -2?""}, ""expected"": -8}, {""description"": ""multiple division"", ""property"": ""answer"", ""input"": {""question"": ""What is -12 divided by 2 divided by -3?""}, ""expected"": 2}, {""description"": ""unknown operation"", ""property"": ""answer"", ""input"": {""question"": ""What is 52 cubed?""}, ""expected"": false}, {""description"": ""Non math question"", ""property"": ""answer"", ""input"": {""question"": ""Who is the President of the United States?""}, ""expected"": false}]}","Parse and evaluate simple math word problems returning the answer as an integer.

## Iteration 1 — Addition

Add two numbers together.

> What is 5 plus 13?

Evaluates to 18.

Handle large numbers and negative numbers.

## Iteration 2 — Subtraction, Multiplication and Division

Now, perform the other three operations.

> What is 7 minus 5?

2

> What is 6 multiplied by 4?

24

> What is 25 divided by 5?

5

## Iteration 3 — Multiple Operations

Handle a set of operations, in sequence.

Since these are verbal word problems, evaluate the expression from
left-to-right, _ignoring the typical order of operations._

> What is 5 plus 13 plus 6?

24

> What is 3 plus 2 multiplied by 3?

15  (i.e. not 9)

## Bonus — Exponentials

If you'd like, handle exponentials.

> What is 2 raised to the 5th power?

32
"
yacht,"{""exercise"": ""yacht"", ""version"": ""1.1.0"", ""comments"": [""The dice are represented always as a list of exactly five integers"", ""with values between 1 and 6 inclusive. The category is an string."", ""the categories are 'ones' to 'sixes',"", ""Then 'full house',"", ""     'four of a kind'"", ""     'little straight' 1-5"", ""     'big straight' 2-6"", ""     'choice', sometimes called Chance"", ""     'yacht', or five of a kind""], ""cases"": [{""description"": ""Yacht"", ""property"": ""score"", ""input"": {""dice"": [5, 5, 5, 5, 5], ""category"": ""yacht""}, ""expected"": 50}, {""description"": ""Not Yacht"", ""property"": ""score"", ""input"": {""dice"": [1, 3, 3, 2, 5], ""category"": ""yacht""}, ""expected"": 0}, {""description"": ""Ones"", ""property"": ""score"", ""input"": {""dice"": [1, 1, 1, 3, 5], ""category"": ""ones""}, ""expected"": 3}, {""description"": ""Ones, out of order"", ""property"": ""score"", ""input"": {""dice"": [3, 1, 1, 5, 1], ""category"": ""ones""}, ""expected"": 3}, {""description"": ""No ones"", ""property"": ""score"", ""input"": {""dice"": [4, 3, 6, 5, 5], ""category"": ""ones""}, ""expected"": 0}, {""description"": ""Twos"", ""property"": ""score"", ""input"": {""dice"": [2, 3, 4, 5, 6], ""category"": ""twos""}, ""expected"": 2}, {""description"": ""Fours"", ""property"": ""score"", ""input"": {""dice"": [1, 4, 1, 4, 1], ""category"": ""fours""}, ""expected"": 8}, {""description"": ""Yacht counted as threes"", ""property"": ""score"", ""input"": {""dice"": [3, 3, 3, 3, 3], ""category"": ""threes""}, ""expected"": 15}, {""description"": ""Yacht of 3s counted as fives"", ""property"": ""score"", ""input"": {""dice"": [3, 3, 3, 3, 3], ""category"": ""fives""}, ""expected"": 0}, {""description"": ""Sixes"", ""property"": ""score"", ""input"": {""dice"": [2, 3, 4, 5, 6], ""category"": ""sixes""}, ""expected"": 6}, {""description"": ""Full house two small, three big"", ""property"": ""score"", ""input"": {""dice"": [2, 2, 4, 4, 4], ""category"": ""full house""}, ""expected"": 16}, {""description"": ""Full house three small, two big"", ""property"": ""score"", ""input"": {""dice"": [5, 3, 3, 5, 3], ""category"": ""full house""}, ""expected"": 19}, {""description"": ""Two pair is not a full house"", ""property"": ""score"", ""input"": {""dice"": [2, 2, 4, 4, 5], ""category"": ""full house""}, ""expected"": 0}, {""description"": ""Four of a kind is not a full house"", ""property"": ""score"", ""input"": {""dice"": [1, 4, 4, 4, 4], ""category"": ""full house""}, ""expected"": 0}, {""description"": ""Yacht is not a full house"", ""property"": ""score"", ""input"": {""dice"": [2, 2, 2, 2, 2], ""category"": ""full house""}, ""expected"": 0}, {""description"": ""Four of a Kind"", ""property"": ""score"", ""input"": {""dice"": [6, 6, 4, 6, 6], ""category"": ""four of a kind""}, ""expected"": 24}, {""description"": ""Yacht can be scored as Four of a Kind"", ""property"": ""score"", ""input"": {""dice"": [3, 3, 3, 3, 3], ""category"": ""four of a kind""}, ""expected"": 12}, {""description"": ""Full house is not Four of a Kind"", ""property"": ""score"", ""input"": {""dice"": [3, 3, 3, 5, 5], ""category"": ""four of a kind""}, ""expected"": 0}, {""description"": ""Little Straight"", ""property"": ""score"", ""input"": {""dice"": [3, 5, 4, 1, 2], ""category"": ""little straight""}, ""expected"": 30}, {""description"": ""Little Straight as Big Straight"", ""property"": ""score"", ""input"": {""dice"": [1, 2, 3, 4, 5], ""category"": ""big straight""}, ""expected"": 0}, {""description"": ""Four in order but not a little straight"", ""property"": ""score"", ""input"": {""dice"": [1, 1, 2, 3, 4], ""category"": ""little straight""}, ""expected"": 0}, {""description"": ""No pairs but not a little straight"", ""property"": ""score"", ""input"": {""dice"": [1, 2, 3, 4, 6], ""category"": ""little straight""}, ""expected"": 0}, {""description"": ""Minimum is 1, maximum is 5, but not a little straight"", ""property"": ""score"", ""input"": {""dice"": [1, 1, 3, 4, 5], ""category"": ""little straight""}, ""expected"": 0}, {""description"": ""Big Straight"", ""property"": ""score"", ""input"": {""dice"": [4, 6, 2, 5, 3], ""category"": ""big straight""}, ""expected"": 30}, {""description"": ""Big Straight as little straight"", ""property"": ""score"", ""input"": {""dice"": [6, 5, 4, 3, 2], ""category"": ""little straight""}, ""expected"": 0}, {""description"": ""Choice"", ""property"": ""score"", ""input"": {""dice"": [3, 3, 5, 6, 6], ""category"": ""choice""}, ""expected"": 23}, {""description"": ""Yacht as choice"", ""property"": ""score"", ""input"": {""dice"": [2, 2, 2, 2, 2], ""category"": ""choice""}, ""expected"": 10}]}","# Score a single throw of dice in *Yacht*

The dice game [Yacht](https://en.wikipedia.org/wiki/Yacht_(dice_game)) is from
the same family as Poker Dice, Generala and particularly Yahtzee, of which it
is a precursor. In the game, five dice are rolled and the result can be entered
in any of twelve categories. The score of a throw of the dice depends on
category chosen.

## Scores in Yacht

| Category | Score | Description | Example |
| -------- | ----- | ----------- | ------- |
| Ones | 1 × number of ones | Any combination	| 1 1 1 4 5 scores 3 |
| Twos | 2 × number of twos | Any combination | 2 2 3 4 5 scores 4 |
| Threes | 3 × number of threes | Any combination | 3 3 3 3 3 scores 15 |
| Fours | 4 × number of fours | Any combination | 1 2 3 3 5 scores 0 |
| Fives | 5 × number of fives| Any combination | 5 1 5 2 5 scores 15 |
| Sixes | 6 × number of sixes | Any combination | 2 3 4 5 6 scores 6 |
| Full House | Total of the dice | Three of one number and two of another | 3 3 3 5 5 scores 19 |
| Four of a Kind | Total of the four dice | At least four dice showing the same face | 4 4 4 4 6 scores 16 |
| Little Straight |  30 points | 1-2-3-4-5 | 1 2 3 4 5 scores 30 |
| Big Straight | 30 points | 2-3-4-5-6 | 2 3 4 5 6 scores 30 |
| Choice | Sum of the dice | Any combination | 2 3 3 4 6 scores 18 |
| Yacht | 50 points | All five dice showing the same face | 4 4 4 4 4 scores 50 |

If the dice do not satisfy the requirements of a category, the score is zero.
If, for example, *Four Of A Kind* is entered in the *Yacht* category, zero
points are scored. A *Yacht* scores zero if entered in the *Full House* category.

## Task
Given a list of values for five dice and a category, your solution should return
the score of the dice for that category. If the dice do not satisfy the requirements
of the category your solution should return 0. You can assume that five values
will always be presented, and the value of each will be between one and six
inclusively. You should not assume that the dice are ordered.
"
zebra-puzzle,"{""exercise"": ""zebra-puzzle"", ""version"": ""1.1.0"", ""cases"": [{""description"": ""resident who drinks water"", ""property"": ""drinksWater"", ""input"": {}, ""expected"": ""Norwegian""}, {""description"": ""resident who owns zebra"", ""property"": ""ownsZebra"", ""input"": {}, ""expected"": ""Japanese""}]}","Solve the zebra puzzle.

1. There are five houses.
2. The Englishman lives in the red house.
3. The Spaniard owns the dog.
4. Coffee is drunk in the green house.
5. The Ukrainian drinks tea.
6. The green house is immediately to the right of the ivory house.
7. The Old Gold smoker owns snails.
8. Kools are smoked in the yellow house.
9. Milk is drunk in the middle house.
10. The Norwegian lives in the first house.
11. The man who smokes Chesterfields lives in the house next to the man with the fox.
12. Kools are smoked in the house next to the house where the horse is kept.
13. The Lucky Strike smoker drinks orange juice.
14. The Japanese smokes Parliaments.
15. The Norwegian lives next to the blue house.

Each of the five houses is painted a different color, and their
inhabitants are of different national extractions, own different pets,
drink different beverages and smoke different brands of cigarettes.

Which of the residents drinks water?
Who owns the zebra?
"
zipper,"{""exercise"": ""zipper"", ""version"": ""1.1.0"", ""comments"": ["" The test cases for this exercise include an initial tree and a     "", "" series of operations to perform on the initial tree.               "", ""                                                                    "", "" Trees are encoded as nested objects. Each node in the tree has     "", "" three members: 'value', 'left', and 'right'. Each value is a       "", "" number (for simplicity). Left and right are trees. An empty node   "", "" is encoded as null.                                                "", ""                                                                    "", "" Each operation in the operations list is an object. The function   "", "" name is listed under 'operation'. If the function requires         "", "" arguments, the argument is listed under 'item'. Some functions     "", "" require values (i.e.  numbers), while others require trees.        "", "" Comments are always optional and can be used almost anywhere.      ""], ""cases"": [{""description"": ""data is retained"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""to_tree""}]}, ""expected"": {""type"": ""tree"", ""value"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}}}, {""description"": ""left, right and value"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""left""}, {""operation"": ""right""}, {""operation"": ""value""}]}, ""expected"": {""type"": ""int"", ""value"": 3}}, {""description"": ""dead end"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""left""}, {""operation"": ""left""}]}, ""expected"": {""type"": ""zipper"", ""value"": null}}, {""description"": ""tree from deep focus"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""left""}, {""operation"": ""right""}, {""operation"": ""to_tree""}]}, ""expected"": {""type"": ""tree"", ""value"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}}}, {""description"": ""traversing up from top"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""up""}]}, ""expected"": {""type"": ""zipper"", ""value"": null}}, {""description"": ""left, right, and up"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""left""}, {""operation"": ""up""}, {""operation"": ""right""}, {""operation"": ""up""}, {""operation"": ""left""}, {""operation"": ""right""}, {""operation"": ""value""}]}, ""expected"": {""type"": ""int"", ""value"": 3}}, {""description"": ""set_value"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""left""}, {""operation"": ""set_value"", ""item"": 5}, {""operation"": ""to_tree""}]}, ""expected"": {""type"": ""tree"", ""value"": {""value"": 1, ""left"": {""value"": 5, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}}}, {""description"": ""set_value after traversing up"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""left""}, {""operation"": ""right""}, {""operation"": ""up""}, {""operation"": ""set_value"", ""item"": 5}, {""operation"": ""to_tree""}]}, ""expected"": {""type"": ""tree"", ""value"": {""value"": 1, ""left"": {""value"": 5, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}}}, {""description"": ""set_left with leaf"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""left""}, {""operation"": ""set_left"", ""item"": {""value"": 5, ""left"": null, ""right"": null}}, {""operation"": ""to_tree""}]}, ""expected"": {""type"": ""tree"", ""value"": {""value"": 1, ""left"": {""value"": 2, ""left"": {""value"": 5, ""left"": null, ""right"": null}, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}}}, {""description"": ""set_right with null"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""left""}, {""operation"": ""set_right"", ""item"": null}, {""operation"": ""to_tree""}]}, ""expected"": {""type"": ""tree"", ""value"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": null}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}}}, {""description"": ""set_right with subtree"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""set_right"", ""item"": {""value"": 6, ""left"": {""value"": 7, ""left"": null, ""right"": null}, ""right"": {""value"": 8, ""left"": null, ""right"": null}}}, {""operation"": ""to_tree""}]}, ""expected"": {""type"": ""tree"", ""value"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 6, ""left"": {""value"": 7, ""left"": null, ""right"": null}, ""right"": {""value"": 8, ""left"": null, ""right"": null}}}}}, {""description"": ""set_value on deep focus"", ""property"": ""expectedValue"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""left""}, {""operation"": ""right""}, {""operation"": ""set_value"", ""item"": 5}, {""operation"": ""to_tree""}]}, ""expected"": {""type"": ""tree"", ""value"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 5, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}}}, {""description"": ""different paths to same zipper"", ""property"": ""sameResultFromOperations"", ""input"": {""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""left""}, {""operation"": ""up""}, {""operation"": ""right""}]}, ""expected"": {""type"": ""zipper"", ""initialTree"": {""value"": 1, ""left"": {""value"": 2, ""left"": null, ""right"": {""value"": 3, ""left"": null, ""right"": null}}, ""right"": {""value"": 4, ""left"": null, ""right"": null}}, ""operations"": [{""operation"": ""right""}]}}]}","Creating a zipper for a binary tree.

[Zippers](https://en.wikipedia.org/wiki/Zipper_%28data_structure%29) are
a purely functional way of navigating within a data structure and
manipulating it.  They essentially contain a data structure and a
pointer into that data structure (called the focus).

For example given a rose tree (where each node contains a value and a
list of child nodes) a zipper might support these operations:

- `from_tree` (get a zipper out of a rose tree, the focus is on the root node)
- `to_tree` (get the rose tree out of the zipper)
- `value` (get the value of the focus node)
- `prev` (move the focus to the previous child of the same parent,
  returns a new zipper)
- `next` (move the focus to the next child of the same parent, returns a
  new zipper)
- `up` (move the focus to the parent, returns a new zipper)
- `set_value` (set the value of the focus node, returns a new zipper)
- `insert_before` (insert a new subtree before the focus node, it
  becomes the `prev` of the focus node, returns a new zipper)
- `insert_after` (insert a new subtree after the focus node, it becomes
  the `next` of the focus node, returns a new zipper)
- `delete` (removes the focus node and all subtrees, focus moves to the
  `next` node if possible otherwise to the `prev` node if possible,
  otherwise to the parent node, returns a new zipper)
"
