comments,description,exercise,expected,input,property
,single bit one to decimal,all-your-base,[1],"{'inputBase': 2, 'digits': [1], 'outputBase': 10}",rebase
,binary to single decimal,all-your-base,[5],"{'inputBase': 2, 'digits': [1, 0, 1], 'outputBase': 10}",rebase
,single decimal to binary,all-your-base,"[1, 0, 1]","{'inputBase': 10, 'digits': [5], 'outputBase': 2}",rebase
,binary to multiple decimal,all-your-base,"[4, 2]","{'inputBase': 2, 'digits': [1, 0, 1, 0, 1, 0], 'outputBase': 10}",rebase
,decimal to binary,all-your-base,"[1, 0, 1, 0, 1, 0]","{'inputBase': 10, 'digits': [4, 2], 'outputBase': 2}",rebase
,trinary to hexadecimal,all-your-base,"[2, 10]","{'inputBase': 3, 'digits': [1, 1, 2, 0], 'outputBase': 16}",rebase
,hexadecimal to trinary,all-your-base,"[1, 1, 2, 0]","{'inputBase': 16, 'digits': [2, 10], 'outputBase': 3}",rebase
,15-bit integer,all-your-base,"[6, 10, 45]","{'inputBase': 97, 'digits': [3, 46, 60], 'outputBase': 73}",rebase
,empty list,all-your-base,[0],"{'inputBase': 2, 'digits': [], 'outputBase': 10}",rebase
,single zero,all-your-base,[0],"{'inputBase': 10, 'digits': [0], 'outputBase': 2}",rebase
,multiple zeros,all-your-base,[0],"{'inputBase': 10, 'digits': [0, 0, 0], 'outputBase': 2}",rebase
,leading zeros,all-your-base,"[4, 2]","{'inputBase': 7, 'digits': [0, 6, 0], 'outputBase': 10}",rebase
,input base is one,all-your-base,{'error': 'input base must be >= 2'},"{'inputBase': 1, 'digits': [0], 'outputBase': 10}",rebase
,input base is zero,all-your-base,{'error': 'input base must be >= 2'},"{'inputBase': 0, 'digits': [], 'outputBase': 10}",rebase
,input base is negative,all-your-base,{'error': 'input base must be >= 2'},"{'inputBase': -2, 'digits': [1], 'outputBase': 10}",rebase
,negative digit,all-your-base,{'error': 'all digits must satisfy 0 <= d < input base'},"{'inputBase': 2, 'digits': [1, -1, 1, 0, 1, 0], 'outputBase': 10}",rebase
,invalid positive digit,all-your-base,{'error': 'all digits must satisfy 0 <= d < input base'},"{'inputBase': 2, 'digits': [1, 2, 1, 0, 1, 0], 'outputBase': 10}",rebase
,output base is one,all-your-base,{'error': 'output base must be >= 2'},"{'inputBase': 2, 'digits': [1, 0, 1, 0, 1, 0], 'outputBase': 1}",rebase
,output base is zero,all-your-base,{'error': 'output base must be >= 2'},"{'inputBase': 10, 'digits': [7], 'outputBase': 0}",rebase
,output base is negative,all-your-base,{'error': 'output base must be >= 2'},"{'inputBase': 2, 'digits': [1], 'outputBase': -7}",rebase
,both bases are negative,all-your-base,{'error': 'input base must be >= 2'},"{'inputBase': -2, 'digits': [1], 'outputBase': -7}",rebase
,no matches,anagram,[],"{'subject': 'diaper', 'candidates': ['hello', 'world', 'zombies', 'pants']}",anagrams
,detects two anagrams,anagram,"['stream', 'maters']","{'subject': 'master', 'candidates': ['stream', 'pigeon', 'maters']}",anagrams
,does not detect anagram subsets,anagram,[],"{'subject': 'good', 'candidates': ['dog', 'goody']}",anagrams
,detects anagram,anagram,['inlets'],"{'subject': 'listen', 'candidates': ['enlists', 'google', 'inlets', 'banana']}",anagrams
,detects three anagrams,anagram,"['gallery', 'regally', 'largely']","{'subject': 'allergy', 'candidates': ['gallery', 'ballerina', 'regally', 'clergy', 'largely', 'leading']}",anagrams
,does not detect non-anagrams with identical checksum,anagram,[],"{'subject': 'mass', 'candidates': ['last']}",anagrams
,detects anagrams case-insensitively,anagram,['Carthorse'],"{'subject': 'Orchestra', 'candidates': ['cashregister', 'Carthorse', 'radishes']}",anagrams
,detects anagrams using case-insensitive subject,anagram,['carthorse'],"{'subject': 'Orchestra', 'candidates': ['cashregister', 'carthorse', 'radishes']}",anagrams
,detects anagrams using case-insensitive possible matches,anagram,['Carthorse'],"{'subject': 'orchestra', 'candidates': ['cashregister', 'Carthorse', 'radishes']}",anagrams
,does not detect a anagram if the original word is repeated,anagram,[],"{'subject': 'go', 'candidates': ['go Go GO']}",anagrams
,anagrams must use all letters exactly once,anagram,[],"{'subject': 'tapper', 'candidates': ['patter']}",anagrams
,capital word is not own anagram,anagram,[],"{'subject': 'BANANA', 'candidates': ['Banana']}",anagrams
,Single digit numbers are Armstrong numbers,armstrong-numbers,True,{'number': 5},isArmstrongNumber
,There are no 2 digit Armstrong numbers,armstrong-numbers,False,{'number': 10},isArmstrongNumber
,Three digit number that is an Armstrong number,armstrong-numbers,True,{'number': 153},isArmstrongNumber
,Three digit number that is not an Armstrong number,armstrong-numbers,False,{'number': 100},isArmstrongNumber
,Four digit number that is an Armstrong number,armstrong-numbers,True,{'number': 9474},isArmstrongNumber
,Four digit number that is not an Armstrong number,armstrong-numbers,False,{'number': 9475},isArmstrongNumber
,Seven digit number that is an Armstrong number,armstrong-numbers,True,{'number': 9926315},isArmstrongNumber
,Seven digit number that is not an Armstrong number,armstrong-numbers,False,{'number': 9926314},isArmstrongNumber
,finds a value in an array with one element,binary-search,0,"{'array': [6], 'value': 6}",find
,finds a value in the middle of an array,binary-search,3,"{'array': [1, 3, 4, 6, 8, 9, 11], 'value': 6}",find
,finds a value at the beginning of an array,binary-search,0,"{'array': [1, 3, 4, 6, 8, 9, 11], 'value': 1}",find
,finds a value at the end of an array,binary-search,6,"{'array': [1, 3, 4, 6, 8, 9, 11], 'value': 11}",find
,finds a value in an array of odd length,binary-search,9,"{'array': [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 634], 'value': 144}",find
,finds a value in an array of even length,binary-search,5,"{'array': [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 'value': 21}",find
,identifies that a value is not included in the array,binary-search,-1,"{'array': [1, 3, 4, 6, 8, 9, 11], 'value': 7}",find
,a value smaller than the array's smallest value is not included,binary-search,-1,"{'array': [1, 3, 4, 6, 8, 9, 11], 'value': 0}",find
,a value larger than the array's largest value is not included,binary-search,-1,"{'array': [1, 3, 4, 6, 8, 9, 11], 'value': 13}",find
,nothing is included in an empty array,binary-search,-1,"{'array': [], 'value': 1}",find
,binary 0 is decimal 0,binary,0.0,{'binary': '0'},decimal
,binary 1 is decimal 1,binary,1.0,{'binary': '1'},decimal
,binary 10 is decimal 2,binary,2.0,{'binary': '10'},decimal
,binary 11 is decimal 3,binary,3.0,{'binary': '11'},decimal
,binary 100 is decimal 4,binary,4.0,{'binary': '100'},decimal
,binary 1001 is decimal 9,binary,9.0,{'binary': '1001'},decimal
,binary 11010 is decimal 26,binary,26.0,{'binary': '11010'},decimal
,binary 10001101000 is decimal 1128,binary,1128.0,{'binary': '10001101000'},decimal
,binary ignores leading zeros,binary,31.0,{'binary': '000011111'},decimal
,2 is not a valid binary digit,binary,,{'binary': '2'},decimal
,a number containing a non-binary digit is invalid,binary,,{'binary': '01201'},decimal
,a number with trailing non-binary characters is invalid,binary,,{'binary': '10nope'},decimal
,a number with leading non-binary characters is invalid,binary,,{'binary': 'nope10'},decimal
,a number with internal non-binary characters is invalid,binary,,{'binary': '10nope10'},decimal
,a number and a word whitespace separated is invalid,binary,,{'binary': '001 nope'},decimal
,stating something,bob,Whatever.,"{'heyBob': 'Tom-ay-to, tom-aaaah-to.'}",response
,shouting,bob,"Whoa, chill out!",{'heyBob': 'WATCH OUT!'},response
,shouting gibberish,bob,"Whoa, chill out!",{'heyBob': 'FCECDFCAAB'},response
,asking a question,bob,Sure.,{'heyBob': 'Does this cryogenic chamber make me look fat?'},response
,asking a numeric question,bob,Sure.,"{'heyBob': 'You are, what, like 15?'}",response
,asking gibberish,bob,Sure.,{'heyBob': 'fffbbcbeab?'},response
,talking forcefully,bob,Whatever.,"{'heyBob': ""Let's go make out behind the gym!""}",response
,using acronyms in regular speech,bob,Whatever.,"{'heyBob': ""It's OK if you don't want to go to the DMV.""}",response
,forceful question,bob,"Calm down, I know what I'm doing!",{'heyBob': 'WHAT THE HELL WERE YOU THINKING?'},response
,shouting numbers,bob,"Whoa, chill out!","{'heyBob': '1, 2, 3 GO!'}",response
,only numbers,bob,Whatever.,"{'heyBob': '1, 2, 3'}",response
,question with only numbers,bob,Sure.,{'heyBob': '4?'},response
,shouting with special characters,bob,"Whoa, chill out!",{'heyBob': 'ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!'},response
,shouting with no exclamation mark,bob,"Whoa, chill out!",{'heyBob': 'I HATE YOU'},response
,statement containing question mark,bob,Whatever.,{'heyBob': 'Ending with ? means a question.'},response
,non-letters with question,bob,Sure.,{'heyBob': ':) ?'},response
,prattling on,bob,Sure.,{'heyBob': 'Wait! Hang on. Are you going to be OK?'},response
,silence,bob,Fine. Be that way!,{'heyBob': ''},response
,prolonged silence,bob,Fine. Be that way!,{'heyBob': '          '},response
,alternate silence,bob,Fine. Be that way!,{'heyBob': '\t\t\t\t\t\t\t\t\t\t'},response
,multiple line question,bob,Whatever.,{'heyBob': '\nDoes this cryogenic chamber make me look fat?\nno'},response
,starting with whitespace,bob,Whatever.,{'heyBob': '         hmmmmmmm...'},response
,ending with whitespace,bob,Sure.,{'heyBob': 'Okay if like my  spacebar  quite a bit?   '},response
,other whitespace,bob,Fine. Be that way!,{'heyBob': '\n\r \t'},response
,non-question ending with whitespace,bob,Whatever.,{'heyBob': 'This is a statement ending with whitespace      '},response
,should be able to score a game with all zeros,bowling,0,"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}",score
,should be able to score a game with no strikes or spares,bowling,90,"{'previousRolls': [3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6]}",score
,a spare followed by zeros is worth ten points,bowling,10,"{'previousRolls': [6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}",score
,points scored in the roll after a spare are counted twice,bowling,16,"{'previousRolls': [6, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}",score
,consecutive spares each get a one roll bonus,bowling,31,"{'previousRolls': [5, 5, 3, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}",score
,a spare in the last frame gets a one roll bonus that is counted once,bowling,17,"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 7]}",score
,a strike earns ten points in a frame with a single roll,bowling,10,"{'previousRolls': [10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}",score
,points scored in the two rolls after a strike are counted twice as a bonus,bowling,26,"{'previousRolls': [10, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}",score
,consecutive strikes each get the two roll bonus,bowling,81,"{'previousRolls': [10, 10, 10, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}",score
,a strike in the last frame gets a two roll bonus that is counted once,bowling,18,"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 7, 1]}",score
,rolling a spare with the two roll bonus does not get a bonus roll,bowling,20,"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 7, 3]}",score
,strikes with the two roll bonus do not get bonus rolls,bowling,30,"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10]}",score
,a strike with the one roll bonus after a spare in the last frame does not get a bonus,bowling,20,"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 10]}",score
,all strikes is a perfect game,bowling,300,"{'previousRolls': [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]}",score
,rolls cannot score negative points,bowling,{'error': 'Negative roll is invalid'},"{'previousRolls': [], 'roll': -1}",roll
,a roll cannot score more than 10 points,bowling,{'error': 'Pin count exceeds pins on the lane'},"{'previousRolls': [], 'roll': 11}",roll
,two rolls in a frame cannot score more than 10 points,bowling,{'error': 'Pin count exceeds pins on the lane'},"{'previousRolls': [5], 'roll': 6}",roll
,bonus roll after a strike in the last frame cannot score more than 10 points,bowling,{'error': 'Pin count exceeds pins on the lane'},"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10], 'roll': 11}",roll
,two bonus rolls after a strike in the last frame cannot score more than 10 points,bowling,{'error': 'Pin count exceeds pins on the lane'},"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 5], 'roll': 6}",roll
,two bonus rolls after a strike in the last frame can score more than 10 points if one is a strike,bowling,26,"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 6]}",score
,the second bonus rolls after a strike in the last frame cannot be a strike if the first one is not a strike,bowling,{'error': 'Pin count exceeds pins on the lane'},"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 6], 'roll': 10}",roll
,second bonus roll after a strike in the last frame cannot score more than 10 points,bowling,{'error': 'Pin count exceeds pins on the lane'},"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10], 'roll': 11}",roll
,an unstarted game cannot be scored,bowling,{'error': 'Score cannot be taken until the end of the game'},{'previousRolls': []},score
,an incomplete game cannot be scored,bowling,{'error': 'Score cannot be taken until the end of the game'},"{'previousRolls': [0, 0]}",score
,cannot roll if game already has ten frames,bowling,{'error': 'Cannot roll after game is over'},"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'roll': 0}",roll
,bonus rolls for a strike in the last frame must be rolled before score can be calculated,bowling,{'error': 'Score cannot be taken until the end of the game'},"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10]}",score
,both bonus rolls for a strike in the last frame must be rolled before score can be calculated,bowling,{'error': 'Score cannot be taken until the end of the game'},"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10]}",score
,bonus roll for a spare in the last frame must be rolled before score can be calculated,bowling,{'error': 'Score cannot be taken until the end of the game'},"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3]}",score
,cannot roll after bonus roll for spare,bowling,{'error': 'Cannot roll after game is over'},"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 2], 'roll': 2}",roll
,cannot roll after bonus rolls for strike,bowling,{'error': 'Cannot roll after game is over'},"{'previousRolls': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 3, 2], 'roll': 2}",roll
,paired square brackets,bracket-push,True,{'value': '[]'},isPaired
,empty string,bracket-push,True,{'value': ''},isPaired
,unpaired brackets,bracket-push,False,{'value': '[['},isPaired
,wrong ordered brackets,bracket-push,False,{'value': '}{'},isPaired
,wrong closing bracket,bracket-push,False,{'value': '{]'},isPaired
,paired with whitespace,bracket-push,True,{'value': '{ }'},isPaired
,partially paired brackets,bracket-push,False,{'value': '{[])'},isPaired
,simple nested brackets,bracket-push,True,{'value': '{[]}'},isPaired
,several paired brackets,bracket-push,True,{'value': '{}[]'},isPaired
,paired and nested brackets,bracket-push,True,{'value': '([{}({}[])])'},isPaired
,unopened closing brackets,bracket-push,False,{'value': '{[)][]}'},isPaired
,unpaired and nested brackets,bracket-push,False,{'value': '([{])'},isPaired
,paired and wrong nested brackets,bracket-push,False,{'value': '[({]})'},isPaired
,math expression,bracket-push,True,{'value': '(((185 + 223.85) * 15) - 543)/2'},isPaired
,complex latex expression,bracket-push,True,{'value': '\\left(\\begin{array}{cc} \\frac{1}{3} & x\\\\ \\mathrm{e}^{x} &... x^2 \\end{array}\\right)'},isPaired
,single coin change,change,[25],"{'coins': [1, 5, 10, 25, 100], 'target': 25}",findFewestCoins
,multiple coin change,change,"[5, 10]","{'coins': [1, 5, 10, 25, 100], 'target': 15}",findFewestCoins
,change with Lilliputian Coins,change,"[4, 4, 15]","{'coins': [1, 4, 15, 20, 50], 'target': 23}",findFewestCoins
,change with Lower Elbonia Coins,change,"[21, 21, 21]","{'coins': [1, 5, 10, 21, 25], 'target': 63}",findFewestCoins
,large target values,change,"[2, 2, 5, 20, 20, 50, 100, 100, 100, 100, 100, 100, 100, 100, 100]","{'coins': [1, 2, 5, 10, 20, 50, 100], 'target': 999}",findFewestCoins
,possible change without unit coins available,change,"[2, 2, 2, 5, 10]","{'coins': [2, 5, 10, 20, 50], 'target': 21}",findFewestCoins
,another possible change without unit coins available,change,"[4, 4, 4, 5, 5, 5]","{'coins': [4, 5], 'target': 27}",findFewestCoins
,no coins make 0 change,change,[],"{'coins': [1, 5, 10, 21, 25], 'target': 0}",findFewestCoins
,error testing for change smaller than the smallest of coins,change,-1,"{'coins': [5, 10], 'target': 3}",findFewestCoins
,error if no combination can add up to target,change,-1,"{'coins': [5, 10], 'target': 94}",findFewestCoins
,cannot find negative change values,change,-1,"{'coins': [1, 2, 5], 'target': -5}",findFewestCoins
,reading empty buffer should fail,circular-buffer,{},"{'capacity': 1, 'operations': [{'operation': 'read', 'should_succeed': False}]}",run
,can read an item just written,circular-buffer,{},"{'capacity': 1, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'read', 'should_succeed': True, 'expected': 1}]}",run
,each item may only be read once,circular-buffer,{},"{'capacity': 1, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'read', 'should_succeed': True, 'expected': 1}, {'operation': 'read', 'should_succeed': False}]}",run
,items are read in the order they are written,circular-buffer,{},"{'capacity': 2, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'write', 'item': 2, 'should_succeed': True}, {'operation': 'read', 'should_succeed': True, 'expected': 1}, {'operation': 'read', 'should_succeed': True, 'expected': 2}]}",run
,full buffer can't be written to,circular-buffer,{},"{'capacity': 1, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'write', 'item': 2, 'should_succeed': False}]}",run
,a read frees up capacity for another write,circular-buffer,{},"{'capacity': 1, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'read', 'should_succeed': True, 'expected': 1}, {'operation': 'write', 'item': 2, 'should_succeed': True}, {'operation': 'read', 'should_succeed': True, 'expected': 2}]}",run
,read position is maintained even across multiple writes,circular-buffer,{},"{'capacity': 3, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'write', 'item': 2, 'should_succeed': True}, {'operation': 'read', 'should_succeed': True, 'expected': 1}, {'operation': 'write', 'item': 3, 'should_succeed': True}, {'operation': 'read', 'should_succeed': True, 'expected': 2}, {'operation': 'read', 'should_succeed': True, 'expected': 3}]}",run
,items cleared out of buffer can't be read,circular-buffer,{},"{'capacity': 1, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'clear'}, {'operation': 'read', 'should_succeed': False}]}",run
,clear frees up capacity for another write,circular-buffer,{},"{'capacity': 1, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'clear'}, {'operation': 'write', 'item': 2, 'should_succeed': True}, {'operation': 'read', 'should_succeed': True, 'expected': 2}]}",run
,clear does nothing on empty buffer,circular-buffer,{},"{'capacity': 1, 'operations': [{'operation': 'clear'}, {'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'read', 'should_succeed': True, 'expected': 1}]}",run
,overwrite acts like write on non-full buffer,circular-buffer,{},"{'capacity': 2, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'overwrite', 'item': 2}, {'operation': 'read', 'should_succeed': True, 'expected': 1}, {'operation': 'read', 'should_succeed': True, 'expected': 2}]}",run
,overwrite replaces the oldest item on full buffer,circular-buffer,{},"{'capacity': 2, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'write', 'item': 2, 'should_succeed': True}, {'operation': 'overwrite', 'item': 3}, {'operation': 'read', 'should_succeed': True, 'expected': 2}, {'operation': 'read', 'should_succeed': True, 'expected': 3}]}",run
,overwrite replaces the oldest item remaining in buffer following a read,circular-buffer,{},"{'capacity': 3, 'operations': [{'operation': 'write', 'item': 1, 'should_succeed': True}, {'operation': 'write', 'item': 2, 'should_succeed': True}, {'operation': 'write', 'item': 3, 'should_succeed': True}, {'operation': 'read', 'should_succeed': True, 'expected': 1}, {'operation': 'write', 'item': 4, 'should_succeed': True}, {'operation': 'overwrite', 'item': 5}, {'operation': 'read', 'should_succeed': True, 'expected': 3}, {'operation': 'read', 'should_succeed': True, 'expected': 4}, {'operation': 'read', 'should_succeed': True, 'expected': 5}]}",run
,zero steps for one,collatz-conjecture,0,{'number': 1},steps
,divide if even,collatz-conjecture,4,{'number': 16},steps
,even and odd steps,collatz-conjecture,9,{'number': 12},steps
,Large number of even and odd steps,collatz-conjecture,152,{'number': 1000000},steps
,zero is an error,collatz-conjecture,{'error': 'Only positive numbers are allowed'},{'number': 0},steps
,negative value is an error,collatz-conjecture,{'error': 'Only positive numbers are allowed'},{'number': -15},steps
,an empty board has no winner,connect,,"{'board': ['. . . . .', ' . . . . .', '  . . . . .', '   . . . . .', '    . . . . .']}",winner
,X can win on a 1x1 board,connect,X,{'board': ['X']},winner
,O can win on a 1x1 board,connect,O,{'board': ['O']},winner
,only edges does not make a winner,connect,,"{'board': ['O O O X', ' X . . X', '  X . . X', '   X O O O']}",winner
,illegal diagonal does not make a winner,connect,,"{'board': ['X O . .', ' O X X X', '  O X O .', '   . O X .', '    X X O O']}",winner
,nobody wins crossing adjacent angles,connect,,"{'board': ['X . . .', ' . X O .', '  O . X O', '   . O . X', '    . . O .']}",winner
,X wins crossing from left to right,connect,X,"{'board': ['. O . .', ' O X X X', '  O X O .', '   X X O X', '    . O X .']}",winner
,O wins crossing from top to bottom,connect,O,"{'board': ['. O . .', ' O X X X', '  O O O .', '   X X O X', '    . O X .']}",winner
,X wins using a convoluted path,connect,X,"{'board': ['. X X . .', ' X . X . X', '  . X . X .', '   . X X . .', '    O O O O O']}",winner
,X wins using a spiral path,connect,X,"{'board': ['O X X X X X X X X', ' O X O O O O O O O', '  O X O X X X X X O', '   O X O X O O O X O', '    O X O X X X O X O', '     O X O O O X O X O', '      O X X X X X O X O', '       O O O O O O O X O', '        X X X X X X X X O']}",winner
,empty plaintext results in an empty ciphertext,crypto-square,,{'plaintext': ''},ciphertext
,Lowercase,crypto-square,a,{'plaintext': 'A'},ciphertext
,Remove spaces,crypto-square,b,{'plaintext': '  b '},ciphertext
,Remove punctuation,crypto-square,1,"{'plaintext': '@1,%!'}",ciphertext
,9 character plaintext results in 3 chunks of 3 characters,crypto-square,tsf hiu isn,{'plaintext': 'This is fun!'},ciphertext
,"8 character plaintext results in 3 chunks, the last one with a trailing space",crypto-square,clu hlt io ,{'plaintext': 'Chill out.'},ciphertext
,"54 character plaintext results in 7 chunks, the last two with trailing spaces",crypto-square,imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau ,"{'plaintext': 'If man was meant to stay on the ground, god would have given us roots.'}",ciphertext
,Degenerate case with a single 'A' row,diamond,['A'],{'letter': 'A'},rows
,Degenerate case with no row containing 3 distinct groups of spaces,diamond,"[' A ', 'B B', ' A ']",{'letter': 'B'},rows
,Smallest non-degenerate case with odd diamond side length,diamond,"['  A  ', ' B B ', 'C   C', ' B B ', '  A  ']",{'letter': 'C'},rows
,Smallest non-degenerate case with even diamond side length,diamond,"['   A   ', '  B B  ', ' C   C ', 'D     D', ' C   C ', '  B B  ', '   A   ']",{'letter': 'D'},rows
,Largest possible diamond,diamond,"['                         A                         ', '                        B B                        ', '                       C   C                       ', '                      D     D                      ', '                     E       E                     ', '                    F         F                    ', '                   G           G                   ', '                  H             H                  ', '                 I               I                 ', '                J                 J                ', '               K                   K               ', '              L                     L              ', '             M                       M             ', '            N                         N            ', '           O                           O           ', '          P                             P          ', '         Q                               Q         ', '        R                                 R        ', '       S                                   S       ', '      T                                     T      ', '     U                                       U     ', '    V                                         V    ', '   W                                           W   ', '  X                                             X  ', ' Y                                               Y ', 'Z                                                 Z', ' Y                                               Y ', '  X                                             X  ', '   W                                           W   ', '    V                                         V    ', '     U                                       U     ', '      T                                     T      ', '       S                                   S       ', '        R                                 R        ', '         Q                               Q         ', '          P                             P          ', '           O                           O           ', '            N                         N            ', '             M                       M             ', '              L                     L              ', '               K                   K               ', '                J                 J                ', '                 I               I                 ', '                  H             H                  ', '                   G           G                   ', '                    F         F                    ', '                     E       E                     ', '                      D     D                      ', '                       C   C                       ', '                        B B                        ', '                         A                         ']",{'letter': 'Z'},rows
,private key is in range 1 .. p,diffie-hellman,"{'greaterThan': 1, 'lessThan': 'p'}",{},privateKeyIsInRange
,private key is random,diffie-hellman,{'random': True},{},privateKeyIsRandom
,can calculate public key using private key,diffie-hellman,8,"{'p': 23, 'g': 5, 'privateKey': 6}",publicKey
,can calculate secret using other party's public key,diffie-hellman,2,"{'p': 23, 'theirPublicKey': 19, 'myPrivateKey': 6}",secret
,key exchange,diffie-hellman,secretA == secretB,"{'p': 23, 'g': 5, 'alicePrivateKey': 'privateKey(p)', 'bobPrivateKey': 'privateKey(p)', 'alicePublicKey': 'publicKey(p, g, alicePrivateKey)', 'bobPublicKey': 'publicKey(p, g, bobPrivateKey)', 'secretA': 'secret(p, bobPublicKey, alicePrivateKey)', 'secretB': 'secret(p, alicePublicKey, bobPrivateKey)'}",keyExchange
,empty input = empty output,dominoes,True,{'dominoes': []},canChain
,singleton input = singleton output,dominoes,True,"{'dominoes': [[1, 1]]}",canChain
,singleton that can't be chained,dominoes,False,"{'dominoes': [[1, 2]]}",canChain
,three elements,dominoes,True,"{'dominoes': [[1, 2], [3, 1], [2, 3]]}",canChain
,can reverse dominoes,dominoes,True,"{'dominoes': [[1, 2], [1, 3], [2, 3]]}",canChain
,can't be chained,dominoes,False,"{'dominoes': [[1, 2], [4, 1], [2, 3]]}",canChain
"['This meets the requirement of being possibly-Euclidean.', 'All vertices have even degree.', ""Nevertheless, there is no chain here, as there's no way to get from 1 to 2."", 'This test (and the two following) prevent solutions from using the even-degree test as the sole criterion,', 'as that is not a sufficient condition.']",disconnected - simple,dominoes,False,"{'dominoes': [[1, 1], [2, 2]]}",canChain
,disconnected - double loop,dominoes,False,"{'dominoes': [[1, 2], [2, 1], [3, 4], [4, 3]]}",canChain
,disconnected - single isolated,dominoes,False,"{'dominoes': [[1, 2], [2, 3], [3, 1], [4, 4]]}",canChain
"['Some solutions may make a chain out of (1, 2), (2, 3), (3, 1)', 'then decide that since there are no more dominoes containing a 1,', 'there is no chain possible.', 'There is indeed a chain here, so this test checks for this line of reasoning.', 'You need to place the (2, 4) after the (1, 2) rather than the (2, 3).']",need backtrack,dominoes,True,"{'dominoes': [[1, 2], [2, 3], [3, 1], [2, 4], [2, 4]]}",canChain
,separate loops,dominoes,True,"{'dominoes': [[1, 2], [2, 3], [3, 1], [1, 1], [2, 2], [3, 3]]}",canChain
,nine elements,dominoes,True,"{'dominoes': [[1, 2], [5, 3], [3, 1], [1, 2], [2, 4], [1, 6], [2, 3], [3, 4], [5, 6]]}",canChain
,no nesting,flatten-array,"[0, 1, 2]","{'array': [0, 1, 2]}",flatten
,flattens array with just integers present,flatten-array,"[1, 2, 3, 4, 5, 6, 7, 8]","{'array': [1, [2, 3, 4, 5, 6, 7], 8]}",flatten
,5 level nesting,flatten-array,"[0, 2, 2, 3, 8, 100, 4, 50, -2]","{'array': [0, 2, [[2, 3], 8, 100, 4, [[[50]]]], -2]}",flatten
,6 level nesting,flatten-array,"[1, 2, 3, 4, 5, 6, 7, 8]","{'array': [1, [2, [[3]], [4, [[5]]], 6, 7], 8]}",flatten
,6 level nest list with null values,flatten-array,"[0, 2, 2, 3, 8, 100, -2]","{'array': [0, 2, [[2, 3], 8, [[100]], None, [[None]]], -2]}",flatten
,all values in nested list are null,flatten-array,[],"{'array': [None, [[[None]]], None, None, [[None, None], None], None]}",flatten
,Black corner territory on 5x5 board,go-counting,"{'owner': 'BLACK', 'territory': [[0, 0], [0, 1], [1, 0]]}","{'board': ['  B  ', ' B B ', 'B W B', ' W W ', '  W  '], 'x': 0, 'y': 1}",territory
,White center territory on 5x5 board,go-counting,"{'owner': 'WHITE', 'territory': [[2, 3]]}","{'board': ['  B  ', ' B B ', 'B W B', ' W W ', '  W  '], 'x': 2, 'y': 3}",territory
,Open corner territory on 5x5 board,go-counting,"{'owner': 'NONE', 'territory': [[0, 3], [0, 4], [1, 4]]}","{'board': ['  B  ', ' B B ', 'B W B', ' W W ', '  W  '], 'x': 1, 'y': 4}",territory
,A stone and not a territory on 5x5 board,go-counting,"{'owner': 'NONE', 'territory': []}","{'board': ['  B  ', ' B B ', 'B W B', ' W W ', '  W  '], 'x': 1, 'y': 1}",territory
,Invalid because X is too low for 5x5 board,go-counting,{'error': 'Invalid coordinate'},"{'board': ['  B  ', ' B B ', 'B W B', ' W W ', '  W  '], 'x': -1, 'y': 1}",territory
,Invalid because X is too high for 5x5 board,go-counting,{'error': 'Invalid coordinate'},"{'board': ['  B  ', ' B B ', 'B W B', ' W W ', '  W  '], 'x': 5, 'y': 1}",territory
,Invalid because Y is too low for 5x5 board,go-counting,{'error': 'Invalid coordinate'},"{'board': ['  B  ', ' B B ', 'B W B', ' W W ', '  W  '], 'x': 1, 'y': -1}",territory
,Invalid because Y is too high for 5x5 board,go-counting,{'error': 'Invalid coordinate'},"{'board': ['  B  ', ' B B ', 'B W B', ' W W ', '  W  '], 'x': 1, 'y': 5}",territory
,One territory is the whole board,go-counting,"{'territoryBlack': [], 'territoryWhite': [], 'territoryNone': [[0, 0]]}",{'board': [' ']},territories
,Two territory rectangular board,go-counting,"{'territoryBlack': [[0, 0], [0, 1]], 'territoryWhite': [[3, 0], [3, 1]], 'territoryNone': []}","{'board': [' BW ', ' BW ']}",territories
,Two region rectangular board,go-counting,"{'territoryBlack': [[0, 0], [2, 0]], 'territoryWhite': [], 'territoryNone': []}",{'board': [' B ']},territories
,Adding a student adds them to the sorted roster,grade-school,['Aimee'],"{'students': [['Aimee', 2]]}",roster
,Adding more student adds them to the sorted roster,grade-school,"['Blair', 'James', 'Paul']","{'students': [['Blair', 2], ['James', 2], ['Paul', 2]]}",roster
,Adding students to different grades adds them to the same sorted roster,grade-school,"['Chelsea', 'Logan']","{'students': [['Chelsea', 3], ['Logan', 7]]}",roster
,Roster returns an empty list if there are no students enrolled,grade-school,[],{'students': []},roster
,Student names with grades are displayed in the same sorted roster,grade-school,"['Anna', 'Barb', 'Charlie', 'Alex', 'Peter', 'Zoe', 'Jim']","{'students': [['Peter', 2], ['Anna', 1], ['Barb', 1], ['Zoe', 2], ['Alex', 2], ['Jim', 3], ['Charlie', 1]]}",roster
,Grade returns the students in that grade in alphabetical order,grade-school,"['Bradley', 'Franklin']","{'students': [['Franklin', 5], ['Bradley', 5], ['Jeff', 1]], 'desiredGrade': 5}",grade
,Grade returns an empty list if there are no students in that grade,grade-school,[],"{'students': [], 'desiredGrade': 1}",grade
,empty strands,hamming,0,"{'strand1': '', 'strand2': ''}",distance
,identical strands,hamming,0,"{'strand1': 'A', 'strand2': 'A'}",distance
,long identical strands,hamming,0,"{'strand1': 'GGACTGA', 'strand2': 'GGACTGA'}",distance
,complete distance in single nucleotide strands,hamming,1,"{'strand1': 'A', 'strand2': 'G'}",distance
,complete distance in small strands,hamming,2,"{'strand1': 'AG', 'strand2': 'CT'}",distance
,small distance in small strands,hamming,1,"{'strand1': 'AT', 'strand2': 'CT'}",distance
,small distance,hamming,1,"{'strand1': 'GGACG', 'strand2': 'GGTCG'}",distance
,small distance in long strands,hamming,2,"{'strand1': 'ACCAGGG', 'strand2': 'ACTATGG'}",distance
,non-unique character in first strand,hamming,1,"{'strand1': 'AAG', 'strand2': 'AAA'}",distance
,non-unique character in second strand,hamming,1,"{'strand1': 'AAA', 'strand2': 'AAG'}",distance
,same nucleotides in different positions,hamming,2,"{'strand1': 'TAG', 'strand2': 'GAT'}",distance
,large distance,hamming,4,"{'strand1': 'GATACA', 'strand2': 'GCATAA'}",distance
,large distance in off-by-one strand,hamming,9,"{'strand1': 'GGACGGATTCTG', 'strand2': 'AGGACGGATTCT'}",distance
,disallow first strand longer,hamming,{'error': 'left and right strands must be of equal length'},"{'strand1': 'AATG', 'strand2': 'AAA'}",distance
,disallow second strand longer,hamming,{'error': 'left and right strands must be of equal length'},"{'strand1': 'ATA', 'strand2': 'AGTG'}",distance
,Say Hi!,hello-world,"Hello, World!",{},hello
,valid isbn number,isbn-verifier,True,{'isbn': '3-598-21508-8'},isValid
,invalid isbn check digit,isbn-verifier,False,{'isbn': '3-598-21508-9'},isValid
,valid isbn number with a check digit of 10,isbn-verifier,True,{'isbn': '3-598-21507-X'},isValid
,check digit is a character other than X,isbn-verifier,False,{'isbn': '3-598-21507-A'},isValid
,invalid character in isbn,isbn-verifier,False,{'isbn': '3-598-P1581-X'},isValid
,X is only valid as a check digit,isbn-verifier,False,{'isbn': '3-598-2X507-9'},isValid
,valid isbn without separating dashes,isbn-verifier,True,{'isbn': '3598215088'},isValid
,isbn without separating dashes and X as check digit,isbn-verifier,True,{'isbn': '359821507X'},isValid
,isbn without check digit and dashes,isbn-verifier,False,{'isbn': '359821507'},isValid
,too long isbn and no dashes,isbn-verifier,False,{'isbn': '3598215078X'},isValid
,too short isbn,isbn-verifier,False,{'isbn': '00'},isValid
,isbn without check digit,isbn-verifier,False,{'isbn': '3-598-21507'},isValid
,check digit of X should not be used for 0,isbn-verifier,False,{'isbn': '3-598-21515-X'},isValid
,empty isbn,isbn-verifier,False,{'isbn': ''},isValid
,input is 9 characters,isbn-verifier,False,{'isbn': '134456729'},isValid
,invalid characters are not ignored,isbn-verifier,False,{'isbn': '3132P34035'},isValid
,input is too long but contains a valid isbn,isbn-verifier,False,{'isbn': '98245726788'},isValid
,finds the largest product if span equals length,largest-series-product,18,"{'digits': '29', 'span': 2}",largestProduct
,can find the largest product of 2 with numbers in order,largest-series-product,72,"{'digits': '0123456789', 'span': 2}",largestProduct
,can find the largest product of 2,largest-series-product,48,"{'digits': '576802143', 'span': 2}",largestProduct
,can find the largest product of 3 with numbers in order,largest-series-product,504,"{'digits': '0123456789', 'span': 3}",largestProduct
,can find the largest product of 3,largest-series-product,270,"{'digits': '1027839564', 'span': 3}",largestProduct
,can find the largest product of 5 with numbers in order,largest-series-product,15120,"{'digits': '0123456789', 'span': 5}",largestProduct
,can get the largest product of a big number,largest-series-product,23520,"{'digits': '73167176531330624919225119674426574742355349194934', 'span': 6}",largestProduct
,reports zero if the only digits are zero,largest-series-product,0,"{'digits': '0000', 'span': 2}",largestProduct
,reports zero if all spans include zero,largest-series-product,0,"{'digits': '99099', 'span': 3}",largestProduct
,rejects span longer than string length,largest-series-product,-1,"{'digits': '123', 'span': 4}",largestProduct
"['There may be some confusion about whether this should be 1 or error.', 'The reasoning for it being 1 is this:', 'There is one 0-character string contained in the empty string.', ""That's the empty string itself."", 'The empty product is 1 (the identity for multiplication).', ""Therefore LSP('', 0) is 1."", ""It's NOT the case that LSP('', 0) takes max of an empty list."", 'So there is no error.', ""Compare against LSP('123', 4):"", ""There are zero 4-character strings in '123'."", ""So LSP('123', 4) really DOES take the max of an empty list."", ""So LSP('123', 4) errors and LSP('', 0) does NOT.""]",reports 1 for empty string and empty product (0 span),largest-series-product,1,"{'digits': '', 'span': 0}",largestProduct
"[""As above, there is one 0-character string in '123'."", ""So again no error. It's the empty product, 1.""]",reports 1 for nonempty string and empty product (0 span),largest-series-product,1,"{'digits': '123', 'span': 0}",largestProduct
,rejects empty string and nonzero span,largest-series-product,-1,"{'digits': '', 'span': 1}",largestProduct
,rejects invalid character in digits,largest-series-product,-1,"{'digits': '1234a5', 'span': 2}",largestProduct
,rejects negative span,largest-series-product,-1,"{'digits': '12345', 'span': -1}",largestProduct
,year not divisible by 4: common year,leap,False,{'year': 2015},leapYear
,"year divisible by 4, not divisible by 100: leap year",leap,True,{'year': 1996},leapYear
,"year divisible by 100, not divisible by 400: common year",leap,False,{'year': 2100},leapYear
,year divisible by 400: leap year,leap,True,{'year': 2000},leapYear
,single digit strings can not be valid,luhn,False,{'value': '1'},valid
,a single zero is invalid,luhn,False,{'value': '0'},valid
,a simple valid SIN that remains valid if reversed,luhn,True,{'value': '059'},valid
,a simple valid SIN that becomes invalid if reversed,luhn,True,{'value': '59'},valid
,a valid Canadian SIN,luhn,True,{'value': '055 444 285'},valid
,invalid Canadian SIN,luhn,False,{'value': '055 444 286'},valid
,invalid credit card,luhn,False,{'value': '8273 1232 7352 0569'},valid
,valid strings with a non-digit included become invalid,luhn,False,{'value': '055a 444 285'},valid
,valid strings with punctuation included become invalid,luhn,False,{'value': '055-444-285'},valid
,valid strings with symbols included become invalid,luhn,False,{'value': '055£ 444$ 285'},valid
,single zero with space is invalid,luhn,False,{'value': ' 0'},valid
,more than a single zero is valid,luhn,True,{'value': '0000 0'},valid
,input digit 9 is correctly converted to output digit 9,luhn,True,{'value': '091'},valid
,strings with non-digits is invalid,luhn,False,{'value': ':9'},valid
,parses normal text as a paragraph,markdown,<p>This will be a paragraph</p>,{'markdown': 'This will be a paragraph'},parse
,parsing italics,markdown,<p><em>This will be italic</em></p>,{'markdown': '_This will be italic_'},parse
,parsing bold text,markdown,<p><strong>This will be bold</strong></p>,{'markdown': '__This will be bold__'},parse
,"mixed normal, italics and bold text",markdown,<p>This will <em>be</em> <strong>mixed</strong></p>,{'markdown': 'This will _be_ __mixed__'},parse
,with h1 header level,markdown,<h1>This will be an h1</h1>,{'markdown': '# This will be an h1'},parse
,with h2 header level,markdown,<h2>This will be an h2</h2>,{'markdown': '## This will be an h2'},parse
,with h6 header level,markdown,<h6>This will be an h6</h6>,{'markdown': '###### This will be an h6'},parse
,unordered lists,markdown,<ul><li>Item 1</li><li>Item 2</li></ul>,{'markdown': '* Item 1\n* Item 2'},parse
,With a little bit of everything,markdown,<h1>Header!</h1><ul><li><strong>Bold Item</strong></li><li><em>Italic Item</em></li></ul>,{'markdown': '# Header!\n* __Bold Item__\n* _Italic Item_'},parse
,extract row from one number matrix,matrix,[1],"{'string': '1', 'index': 0}",row
,can extract row,matrix,"[3, 4]","{'string': '1 2\n3 4', 'index': 1}",row
,extract row where numbers have different widths,matrix,"[10, 20]","{'string': '1 2\n10 20', 'index': 1}",row
,can extract row from non-square matrix,matrix,"[7, 8, 9]","{'string': '1 2 3\n4 5 6\n7 8 9\n8 7 6', 'index': 2}",row
,extract column from one number matrix,matrix,[1],"{'string': '1', 'index': 0}",column
,can extract column,matrix,"[3, 6, 9]","{'string': '1 2 3\n4 5 6\n7 8 9', 'index': 2}",column
,can extract column from non-square matrix,matrix,"[3, 6, 9, 6]","{'string': '1 2 3\n4 5 6\n7 8 9\n8 7 6', 'index': 2}",column
,extract column where numbers have different widths,matrix,"[1903, 3, 4]","{'string': '89 1903 3\n18 3 1\n9 4 800', 'index': 1}",column
,monteenth of May 2013,meetup,2013-05-13,"{'year': 2013, 'month': 5, 'week': 'teenth', 'dayofweek': 'Monday'}",meetup
,monteenth of August 2013,meetup,2013-08-19,"{'year': 2013, 'month': 8, 'week': 'teenth', 'dayofweek': 'Monday'}",meetup
,monteenth of September 2013,meetup,2013-09-16,"{'year': 2013, 'month': 9, 'week': 'teenth', 'dayofweek': 'Monday'}",meetup
,tuesteenth of March 2013,meetup,2013-03-19,"{'year': 2013, 'month': 3, 'week': 'teenth', 'dayofweek': 'Tuesday'}",meetup
,tuesteenth of April 2013,meetup,2013-04-16,"{'year': 2013, 'month': 4, 'week': 'teenth', 'dayofweek': 'Tuesday'}",meetup
,tuesteenth of August 2013,meetup,2013-08-13,"{'year': 2013, 'month': 8, 'week': 'teenth', 'dayofweek': 'Tuesday'}",meetup
,wednesteenth of January 2013,meetup,2013-01-16,"{'year': 2013, 'month': 1, 'week': 'teenth', 'dayofweek': 'Wednesday'}",meetup
,wednesteenth of February 2013,meetup,2013-02-13,"{'year': 2013, 'month': 2, 'week': 'teenth', 'dayofweek': 'Wednesday'}",meetup
,wednesteenth of June 2013,meetup,2013-06-19,"{'year': 2013, 'month': 6, 'week': 'teenth', 'dayofweek': 'Wednesday'}",meetup
,thursteenth of May 2013,meetup,2013-05-16,"{'year': 2013, 'month': 5, 'week': 'teenth', 'dayofweek': 'Thursday'}",meetup
,thursteenth of June 2013,meetup,2013-06-13,"{'year': 2013, 'month': 6, 'week': 'teenth', 'dayofweek': 'Thursday'}",meetup
,thursteenth of September 2013,meetup,2013-09-19,"{'year': 2013, 'month': 9, 'week': 'teenth', 'dayofweek': 'Thursday'}",meetup
,friteenth of April 2013,meetup,2013-04-19,"{'year': 2013, 'month': 4, 'week': 'teenth', 'dayofweek': 'Friday'}",meetup
,friteenth of August 2013,meetup,2013-08-16,"{'year': 2013, 'month': 8, 'week': 'teenth', 'dayofweek': 'Friday'}",meetup
,friteenth of September 2013,meetup,2013-09-13,"{'year': 2013, 'month': 9, 'week': 'teenth', 'dayofweek': 'Friday'}",meetup
,saturteenth of February 2013,meetup,2013-02-16,"{'year': 2013, 'month': 2, 'week': 'teenth', 'dayofweek': 'Saturday'}",meetup
,saturteenth of April 2013,meetup,2013-04-13,"{'year': 2013, 'month': 4, 'week': 'teenth', 'dayofweek': 'Saturday'}",meetup
,saturteenth of October 2013,meetup,2013-10-19,"{'year': 2013, 'month': 10, 'week': 'teenth', 'dayofweek': 'Saturday'}",meetup
,sunteenth of May 2013,meetup,2013-05-19,"{'year': 2013, 'month': 5, 'week': 'teenth', 'dayofweek': 'Sunday'}",meetup
,sunteenth of June 2013,meetup,2013-06-16,"{'year': 2013, 'month': 6, 'week': 'teenth', 'dayofweek': 'Sunday'}",meetup
,sunteenth of October 2013,meetup,2013-10-13,"{'year': 2013, 'month': 10, 'week': 'teenth', 'dayofweek': 'Sunday'}",meetup
,first Monday of March 2013,meetup,2013-03-04,"{'year': 2013, 'month': 3, 'week': 'first', 'dayofweek': 'Monday'}",meetup
,first Monday of April 2013,meetup,2013-04-01,"{'year': 2013, 'month': 4, 'week': 'first', 'dayofweek': 'Monday'}",meetup
,first Tuesday of May 2013,meetup,2013-05-07,"{'year': 2013, 'month': 5, 'week': 'first', 'dayofweek': 'Tuesday'}",meetup
,first Tuesday of June 2013,meetup,2013-06-04,"{'year': 2013, 'month': 6, 'week': 'first', 'dayofweek': 'Tuesday'}",meetup
,first Wednesday of July 2013,meetup,2013-07-03,"{'year': 2013, 'month': 7, 'week': 'first', 'dayofweek': 'Wednesday'}",meetup
,first Wednesday of August 2013,meetup,2013-08-07,"{'year': 2013, 'month': 8, 'week': 'first', 'dayofweek': 'Wednesday'}",meetup
,first Thursday of September 2013,meetup,2013-09-05,"{'year': 2013, 'month': 9, 'week': 'first', 'dayofweek': 'Thursday'}",meetup
,first Thursday of October 2013,meetup,2013-10-03,"{'year': 2013, 'month': 10, 'week': 'first', 'dayofweek': 'Thursday'}",meetup
,first Friday of November 2013,meetup,2013-11-01,"{'year': 2013, 'month': 11, 'week': 'first', 'dayofweek': 'Friday'}",meetup
,first Friday of December 2013,meetup,2013-12-06,"{'year': 2013, 'month': 12, 'week': 'first', 'dayofweek': 'Friday'}",meetup
,first Saturday of January 2013,meetup,2013-01-05,"{'year': 2013, 'month': 1, 'week': 'first', 'dayofweek': 'Saturday'}",meetup
,first Saturday of February 2013,meetup,2013-02-02,"{'year': 2013, 'month': 2, 'week': 'first', 'dayofweek': 'Saturday'}",meetup
,first Sunday of March 2013,meetup,2013-03-03,"{'year': 2013, 'month': 3, 'week': 'first', 'dayofweek': 'Sunday'}",meetup
,first Sunday of April 2013,meetup,2013-04-07,"{'year': 2013, 'month': 4, 'week': 'first', 'dayofweek': 'Sunday'}",meetup
,second Monday of March 2013,meetup,2013-03-11,"{'year': 2013, 'month': 3, 'week': 'second', 'dayofweek': 'Monday'}",meetup
,second Monday of April 2013,meetup,2013-04-08,"{'year': 2013, 'month': 4, 'week': 'second', 'dayofweek': 'Monday'}",meetup
,second Tuesday of May 2013,meetup,2013-05-14,"{'year': 2013, 'month': 5, 'week': 'second', 'dayofweek': 'Tuesday'}",meetup
,second Tuesday of June 2013,meetup,2013-06-11,"{'year': 2013, 'month': 6, 'week': 'second', 'dayofweek': 'Tuesday'}",meetup
,second Wednesday of July 2013,meetup,2013-07-10,"{'year': 2013, 'month': 7, 'week': 'second', 'dayofweek': 'Wednesday'}",meetup
,second Wednesday of August 2013,meetup,2013-08-14,"{'year': 2013, 'month': 8, 'week': 'second', 'dayofweek': 'Wednesday'}",meetup
,second Thursday of September 2013,meetup,2013-09-12,"{'year': 2013, 'month': 9, 'week': 'second', 'dayofweek': 'Thursday'}",meetup
,second Thursday of October 2013,meetup,2013-10-10,"{'year': 2013, 'month': 10, 'week': 'second', 'dayofweek': 'Thursday'}",meetup
,second Friday of November 2013,meetup,2013-11-08,"{'year': 2013, 'month': 11, 'week': 'second', 'dayofweek': 'Friday'}",meetup
,second Friday of December 2013,meetup,2013-12-13,"{'year': 2013, 'month': 12, 'week': 'second', 'dayofweek': 'Friday'}",meetup
,second Saturday of January 2013,meetup,2013-01-12,"{'year': 2013, 'month': 1, 'week': 'second', 'dayofweek': 'Saturday'}",meetup
,second Saturday of February 2013,meetup,2013-02-09,"{'year': 2013, 'month': 2, 'week': 'second', 'dayofweek': 'Saturday'}",meetup
,second Sunday of March 2013,meetup,2013-03-10,"{'year': 2013, 'month': 3, 'week': 'second', 'dayofweek': 'Sunday'}",meetup
,second Sunday of April 2013,meetup,2013-04-14,"{'year': 2013, 'month': 4, 'week': 'second', 'dayofweek': 'Sunday'}",meetup
,third Monday of March 2013,meetup,2013-03-18,"{'year': 2013, 'month': 3, 'week': 'third', 'dayofweek': 'Monday'}",meetup
,third Monday of April 2013,meetup,2013-04-15,"{'year': 2013, 'month': 4, 'week': 'third', 'dayofweek': 'Monday'}",meetup
,third Tuesday of May 2013,meetup,2013-05-21,"{'year': 2013, 'month': 5, 'week': 'third', 'dayofweek': 'Tuesday'}",meetup
,third Tuesday of June 2013,meetup,2013-06-18,"{'year': 2013, 'month': 6, 'week': 'third', 'dayofweek': 'Tuesday'}",meetup
,third Wednesday of July 2013,meetup,2013-07-17,"{'year': 2013, 'month': 7, 'week': 'third', 'dayofweek': 'Wednesday'}",meetup
,third Wednesday of August 2013,meetup,2013-08-21,"{'year': 2013, 'month': 8, 'week': 'third', 'dayofweek': 'Wednesday'}",meetup
,third Thursday of September 2013,meetup,2013-09-19,"{'year': 2013, 'month': 9, 'week': 'third', 'dayofweek': 'Thursday'}",meetup
,third Thursday of October 2013,meetup,2013-10-17,"{'year': 2013, 'month': 10, 'week': 'third', 'dayofweek': 'Thursday'}",meetup
,third Friday of November 2013,meetup,2013-11-15,"{'year': 2013, 'month': 11, 'week': 'third', 'dayofweek': 'Friday'}",meetup
,third Friday of December 2013,meetup,2013-12-20,"{'year': 2013, 'month': 12, 'week': 'third', 'dayofweek': 'Friday'}",meetup
,third Saturday of January 2013,meetup,2013-01-19,"{'year': 2013, 'month': 1, 'week': 'third', 'dayofweek': 'Saturday'}",meetup
,third Saturday of February 2013,meetup,2013-02-16,"{'year': 2013, 'month': 2, 'week': 'third', 'dayofweek': 'Saturday'}",meetup
,third Sunday of March 2013,meetup,2013-03-17,"{'year': 2013, 'month': 3, 'week': 'third', 'dayofweek': 'Sunday'}",meetup
,third Sunday of April 2013,meetup,2013-04-21,"{'year': 2013, 'month': 4, 'week': 'third', 'dayofweek': 'Sunday'}",meetup
,fourth Monday of March 2013,meetup,2013-03-25,"{'year': 2013, 'month': 3, 'week': 'fourth', 'dayofweek': 'Monday'}",meetup
,fourth Monday of April 2013,meetup,2013-04-22,"{'year': 2013, 'month': 4, 'week': 'fourth', 'dayofweek': 'Monday'}",meetup
,fourth Tuesday of May 2013,meetup,2013-05-28,"{'year': 2013, 'month': 5, 'week': 'fourth', 'dayofweek': 'Tuesday'}",meetup
,fourth Tuesday of June 2013,meetup,2013-06-25,"{'year': 2013, 'month': 6, 'week': 'fourth', 'dayofweek': 'Tuesday'}",meetup
,fourth Wednesday of July 2013,meetup,2013-07-24,"{'year': 2013, 'month': 7, 'week': 'fourth', 'dayofweek': 'Wednesday'}",meetup
,fourth Wednesday of August 2013,meetup,2013-08-28,"{'year': 2013, 'month': 8, 'week': 'fourth', 'dayofweek': 'Wednesday'}",meetup
,fourth Thursday of September 2013,meetup,2013-09-26,"{'year': 2013, 'month': 9, 'week': 'fourth', 'dayofweek': 'Thursday'}",meetup
,fourth Thursday of October 2013,meetup,2013-10-24,"{'year': 2013, 'month': 10, 'week': 'fourth', 'dayofweek': 'Thursday'}",meetup
,fourth Friday of November 2013,meetup,2013-11-22,"{'year': 2013, 'month': 11, 'week': 'fourth', 'dayofweek': 'Friday'}",meetup
,fourth Friday of December 2013,meetup,2013-12-27,"{'year': 2013, 'month': 12, 'week': 'fourth', 'dayofweek': 'Friday'}",meetup
,fourth Saturday of January 2013,meetup,2013-01-26,"{'year': 2013, 'month': 1, 'week': 'fourth', 'dayofweek': 'Saturday'}",meetup
,fourth Saturday of February 2013,meetup,2013-02-23,"{'year': 2013, 'month': 2, 'week': 'fourth', 'dayofweek': 'Saturday'}",meetup
,fourth Sunday of March 2013,meetup,2013-03-24,"{'year': 2013, 'month': 3, 'week': 'fourth', 'dayofweek': 'Sunday'}",meetup
,fourth Sunday of April 2013,meetup,2013-04-28,"{'year': 2013, 'month': 4, 'week': 'fourth', 'dayofweek': 'Sunday'}",meetup
,last Monday of March 2013,meetup,2013-03-25,"{'year': 2013, 'month': 3, 'week': 'last', 'dayofweek': 'Monday'}",meetup
,last Monday of April 2013,meetup,2013-04-29,"{'year': 2013, 'month': 4, 'week': 'last', 'dayofweek': 'Monday'}",meetup
,last Tuesday of May 2013,meetup,2013-05-28,"{'year': 2013, 'month': 5, 'week': 'last', 'dayofweek': 'Tuesday'}",meetup
,last Tuesday of June 2013,meetup,2013-06-25,"{'year': 2013, 'month': 6, 'week': 'last', 'dayofweek': 'Tuesday'}",meetup
,last Wednesday of July 2013,meetup,2013-07-31,"{'year': 2013, 'month': 7, 'week': 'last', 'dayofweek': 'Wednesday'}",meetup
,last Wednesday of August 2013,meetup,2013-08-28,"{'year': 2013, 'month': 8, 'week': 'last', 'dayofweek': 'Wednesday'}",meetup
,last Thursday of September 2013,meetup,2013-09-26,"{'year': 2013, 'month': 9, 'week': 'last', 'dayofweek': 'Thursday'}",meetup
,last Thursday of October 2013,meetup,2013-10-31,"{'year': 2013, 'month': 10, 'week': 'last', 'dayofweek': 'Thursday'}",meetup
,last Friday of November 2013,meetup,2013-11-29,"{'year': 2013, 'month': 11, 'week': 'last', 'dayofweek': 'Friday'}",meetup
,last Friday of December 2013,meetup,2013-12-27,"{'year': 2013, 'month': 12, 'week': 'last', 'dayofweek': 'Friday'}",meetup
,last Saturday of January 2013,meetup,2013-01-26,"{'year': 2013, 'month': 1, 'week': 'last', 'dayofweek': 'Saturday'}",meetup
,last Saturday of February 2013,meetup,2013-02-23,"{'year': 2013, 'month': 2, 'week': 'last', 'dayofweek': 'Saturday'}",meetup
,last Sunday of March 2013,meetup,2013-03-31,"{'year': 2013, 'month': 3, 'week': 'last', 'dayofweek': 'Sunday'}",meetup
,last Sunday of April 2013,meetup,2013-04-28,"{'year': 2013, 'month': 4, 'week': 'last', 'dayofweek': 'Sunday'}",meetup
,last Wednesday of February 2012,meetup,2012-02-29,"{'year': 2012, 'month': 2, 'week': 'last', 'dayofweek': 'Wednesday'}",meetup
,last Wednesday of December 2014,meetup,2014-12-31,"{'year': 2014, 'month': 12, 'week': 'last', 'dayofweek': 'Wednesday'}",meetup
,last Sunday of February 2015,meetup,2015-02-22,"{'year': 2015, 'month': 2, 'week': 'last', 'dayofweek': 'Sunday'}",meetup
,first Friday of December 2012,meetup,2012-12-07,"{'year': 2012, 'month': 12, 'week': 'first', 'dayofweek': 'Friday'}",meetup
,no rows,minesweeper,[],{'minefield': []},annotate
,no columns,minesweeper,[''],{'minefield': ['']},annotate
,no mines,minesweeper,"['   ', '   ', '   ']","{'minefield': ['   ', '   ', '   ']}",annotate
,minefield with only mines,minesweeper,"['***', '***', '***']","{'minefield': ['***', '***', '***']}",annotate
,mine surrounded by spaces,minesweeper,"['111', '1*1', '111']","{'minefield': ['   ', ' * ', '   ']}",annotate
,space surrounded by mines,minesweeper,"['***', '*8*', '***']","{'minefield': ['***', '* *', '***']}",annotate
,horizontal line,minesweeper,['1*2*1'],{'minefield': [' * * ']},annotate
,"horizontal line, mines at edges",minesweeper,['*1 1*'],{'minefield': ['*   *']},annotate
,vertical line,minesweeper,"['1', '*', '2', '*', '1']","{'minefield': [' ', '*', ' ', '*', ' ']}",annotate
,"vertical line, mines at edges",minesweeper,"['*', '1', ' ', '1', '*']","{'minefield': ['*', ' ', ' ', ' ', '*']}",annotate
,cross,minesweeper,"[' 2*2 ', '25*52', '*****', '25*52', ' 2*2 ']","{'minefield': ['  *  ', '  *  ', '*****', '  *  ', '  *  ']}",annotate
,large minefield,minesweeper,"['1*22*1', '12*322', ' 123*2', '112*4*', '1*22*2', '111111']","{'minefield': [' *  * ', '  *   ', '    * ', '   * *', ' *  * ', '      ']}",annotate
,first prime,nth-prime,2,{'number': 1},prime
,second prime,nth-prime,3,{'number': 2},prime
,sixth prime,nth-prime,13,{'number': 6},prime
,big prime,nth-prime,104743,{'number': 10001},prime
,there is no zeroth prime,nth-prime,{'error': 'there is no zeroth prime'},{'number': 0},prime
,finds the smallest palindrome from single digit factors,palindrome-products,"{'value': 1, 'factors': [[1, 1]]}","{'min': 1, 'max': 9}",smallest
,finds the largest palindrome from single digit factors,palindrome-products,"{'value': 9, 'factors': [[1, 9], [3, 3]]}","{'min': 1, 'max': 9}",largest
,find the smallest palindrome from double digit factors,palindrome-products,"{'value': 121, 'factors': [[11, 11]]}","{'min': 10, 'max': 99}",smallest
,find the largest palindrome from double digit factors,palindrome-products,"{'value': 9009, 'factors': [[91, 99]]}","{'min': 10, 'max': 99}",largest
,find smallest palindrome from triple digit factors,palindrome-products,"{'value': 10201, 'factors': [[101, 101]]}","{'min': 100, 'max': 999}",smallest
,find the largest palindrome from triple digit factors,palindrome-products,"{'value': 906609, 'factors': [[913, 993]]}","{'min': 100, 'max': 999}",largest
,find smallest palindrome from four digit factors,palindrome-products,"{'value': 1002001, 'factors': [[1001, 1001]]}","{'min': 1000, 'max': 9999}",smallest
,find the largest palindrome from four digit factors,palindrome-products,"{'value': 99000099, 'factors': [[9901, 9999]]}","{'min': 1000, 'max': 9999}",largest
,empty result for smallest if no palindrome in the range,palindrome-products,{'error': 'no palindrome with factors in the range 1002 to 1003'},"{'min': 1002, 'max': 1003}",smallest
,empty result for largest if no palindrome in the range,palindrome-products,{'error': 'no palindrome with factors in the range 15 to 15'},"{'min': 15, 'max': 15}",largest
,error result for smallest if min is more than max,palindrome-products,{'error': 'invalid input: min is 10000 and max is 1'},"{'min': 10000, 'max': 1}",smallest
,error result for largest if min is more than max,palindrome-products,{'error': 'invalid input: min is 2 and max is 1'},"{'min': 2, 'max': 1}",largest
,single hand always wins,poker,['4S 5S 7H 8D JC'],{'hands': ['4S 5S 7H 8D JC']},bestHands
,highest card out of all hands wins,poker,['3S 4S 5D 6H JH'],"{'hands': ['4D 5S 6S 8D 3C', '2S 4C 7S 9H 10H', '3S 4S 5D 6H JH']}",bestHands
,a tie has multiple winners,poker,"['3S 4S 5D 6H JH', '3H 4H 5C 6C JD']","{'hands': ['4D 5S 6S 8D 3C', '2S 4C 7S 9H 10H', '3S 4S 5D 6H JH', '3H 4H 5C 6C JD']}",bestHands
,"multiple hands with the same high cards, tie compares next highest ranked, down to last card",poker,['3S 5H 6S 8D 7H'],"{'hands': ['3S 5H 6S 8D 7H', '2S 5D 6D 8C 7S']}",bestHands
,one pair beats high card,poker,['2S 4H 6S 4D JH'],"{'hands': ['4S 5H 6C 8D KH', '2S 4H 6S 4D JH']}",bestHands
,highest pair wins,poker,['2S 4H 6C 4D JD'],"{'hands': ['4S 2H 6S 2D JH', '2S 4H 6C 4D JD']}",bestHands
,two pairs beats one pair,poker,['4S 5H 4C 8C 5C'],"{'hands': ['2S 8H 6S 8D JH', '4S 5H 4C 8C 5C']}",bestHands
,"both hands have two pairs, highest ranked pair wins",poker,['2S 8H 2D 8D 3H'],"{'hands': ['2S 8H 2D 8D 3H', '4S 5H 4C 8S 5D']}",bestHands
,"both hands have two pairs, with the same highest ranked pair, tie goes to low pair",poker,['JD QH JS 8D QC'],"{'hands': ['2S QS 2C QD JH', 'JD QH JS 8D QC']}",bestHands
,"both hands have two identically ranked pairs, tie goes to remaining card (kicker)",poker,['JD QH JS 8D QC'],"{'hands': ['JD QH JS 8D QC', 'JS QS JC 2D QD']}",bestHands
,three of a kind beats two pair,poker,['4S 5H 4C 8S 4H'],"{'hands': ['2S 8H 2H 8D JH', '4S 5H 4C 8S 4H']}",bestHands
,"both hands have three of a kind, tie goes to highest ranked triplet",poker,['4S AH AS 8C AD'],"{'hands': ['2S 2H 2C 8D JH', '4S AH AS 8C AD']}",bestHands
,"with multiple decks, two players can have same three of a kind, ties go to highest remaining cards",poker,['4S AH AS 8C AD'],"{'hands': ['4S AH AS 7C AD', '4S AH AS 8C AD']}",bestHands
,a straight beats three of a kind,poker,['3S 4D 2S 6D 5C'],"{'hands': ['4S 5H 4C 8D 4H', '3S 4D 2S 6D 5C']}",bestHands
,aces can end a straight (10 J Q K A),poker,['10D JH QS KD AC'],"{'hands': ['4S 5H 4C 8D 4H', '10D JH QS KD AC']}",bestHands
,aces can start a straight (A 2 3 4 5),poker,['4D AH 3S 2D 5C'],"{'hands': ['4S 5H 4C 8D 4H', '4D AH 3S 2D 5C']}",bestHands
,"both hands with a straight, tie goes to highest ranked card",poker,['5S 7H 8S 9D 6H'],"{'hands': ['4S 6C 7S 8D 5H', '5S 7H 8S 9D 6H']}",bestHands
,"even though an ace is usually high, a 5-high straight is the lowest-scoring straight",poker,['2H 3C 4D 5D 6H'],"{'hands': ['2H 3C 4D 5D 6H', '4S AH 3S 2D 5H']}",bestHands
,flush beats a straight,poker,['2S 4S 5S 6S 7S'],"{'hands': ['4C 6H 7D 8D 5H', '2S 4S 5S 6S 7S']}",bestHands
,"both hands have a flush, tie goes to high card, down to the last one if necessary",poker,['4H 7H 8H 9H 6H'],"{'hands': ['4H 7H 8H 9H 6H', '2S 4S 5S 6S 7S']}",bestHands
,full house beats a flush,poker,['4S 5H 4C 5D 4H'],"{'hands': ['3H 6H 7H 8H 5H', '4S 5H 4C 5D 4H']}",bestHands
,"both hands have a full house, tie goes to highest-ranked triplet",poker,['5H 5S 5D 8S 8D'],"{'hands': ['4H 4S 4D 9S 9D', '5H 5S 5D 8S 8D']}",bestHands
,"with multiple decks, both hands have a full house with the same triplet, tie goes to the pair",poker,['5H 5S 5D 9S 9D'],"{'hands': ['5H 5S 5D 9S 9D', '5H 5S 5D 8S 8D']}",bestHands
,four of a kind beats a full house,poker,['3S 3H 2S 3D 3C'],"{'hands': ['4S 5H 4D 5D 4H', '3S 3H 2S 3D 3C']}",bestHands
,"both hands have four of a kind, tie goes to high quad",poker,['4S 5H 5S 5D 5C'],"{'hands': ['2S 2H 2C 8D 2D', '4S 5H 5S 5D 5C']}",bestHands
,"with multiple decks, both hands with identical four of a kind, tie determined by kicker",poker,['3S 3H 4S 3D 3C'],"{'hands': ['3S 3H 2S 3D 3C', '3S 3H 4S 3D 3C']}",bestHands
,straight flush beats four of a kind,poker,['7S 8S 9S 6S 10S'],"{'hands': ['4S 5H 5S 5D 5C', '7S 8S 9S 6S 10S']}",bestHands
,"both hands have straight flush, tie goes to highest-ranked card",poker,['5S 7S 8S 9S 6S'],"{'hands': ['4H 6H 7H 8H 5H', '5S 7S 8S 9S 6S']}",bestHands
,zero pieces,proverb,[],{'strings': []},recite
,one piece,proverb,['And all for the want of a nail.'],{'strings': ['nail']},recite
,two pieces,proverb,"['For want of a nail the shoe was lost.', 'And all for the want of a nail.']","{'strings': ['nail', 'shoe']}",recite
,three pieces,proverb,"['For want of a nail the shoe was lost.', 'For want of a shoe the horse was lost.', 'And all for the want of a nail.']","{'strings': ['nail', 'shoe', 'horse']}",recite
,full proverb,proverb,"['For want of a nail the shoe was lost.', 'For want of a shoe the horse was lost.', 'For want of a horse the rider was lost.', 'For want of a rider the message was lost.', 'For want of a message the battle was lost.', 'For want of a battle the kingdom was lost.', 'And all for the want of a nail.']","{'strings': ['nail', 'shoe', 'horse', 'rider', 'message', 'battle', 'kingdom']}",recite
,four pieces modernized,proverb,"['For want of a pin the gun was lost.', 'For want of a gun the soldier was lost.', 'For want of a soldier the battle was lost.', 'And all for the want of a pin.']","{'strings': ['pin', 'gun', 'soldier', 'battle']}",recite
,the sound for 1 is 1,raindrops,1,{'number': 1},convert
,the sound for 3 is Pling,raindrops,Pling,{'number': 3},convert
,the sound for 5 is Plang,raindrops,Plang,{'number': 5},convert
,the sound for 7 is Plong,raindrops,Plong,{'number': 7},convert
,the sound for 6 is Pling as it has a factor 3,raindrops,Pling,{'number': 6},convert
,2 to the power 3 does not make a raindrop sound as 3 is the exponent not the base,raindrops,8,{'number': 8},convert
,the sound for 9 is Pling as it has a factor 3,raindrops,Pling,{'number': 9},convert
,the sound for 10 is Plang as it has a factor 5,raindrops,Plang,{'number': 10},convert
,the sound for 14 is Plong as it has a factor of 7,raindrops,Plong,{'number': 14},convert
,the sound for 15 is PlingPlang as it has factors 3 and 5,raindrops,PlingPlang,{'number': 15},convert
,the sound for 21 is PlingPlong as it has factors 3 and 7,raindrops,PlingPlong,{'number': 21},convert
,the sound for 25 is Plang as it has a factor 5,raindrops,Plang,{'number': 25},convert
,the sound for 27 is Pling as it has a factor 3,raindrops,Pling,{'number': 27},convert
,the sound for 35 is PlangPlong as it has factors 5 and 7,raindrops,PlangPlong,{'number': 35},convert
,the sound for 49 is Plong as it has a factor 7,raindrops,Plong,{'number': 49},convert
,the sound for 52 is 52,raindrops,52,{'number': 52},convert
,"the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7",raindrops,PlingPlangPlong,{'number': 105},convert
,the sound for 3125 is Plang as it has a factor 5,raindrops,Plang,{'number': 3125},convert
,input cells have a value,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 10}], 'operations': [{'type': 'expect_cell_value', 'cell': 'input', 'value': 10}]}",react
,an input cell's value can be set,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 4}], 'operations': [{'type': 'set_value', 'cell': 'input', 'value': 20}, {'type': 'expect_cell_value', 'cell': 'input', 'value': 20}]}",react
,compute cells calculate initial value,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 1}, {'name': 'output', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] + 1'}], 'operations': [{'type': 'expect_cell_value', 'cell': 'output', 'value': 2}]}",react
,compute cells take inputs in the right order,react,{},"{'cells': [{'name': 'one', 'type': 'input', 'initial_value': 1}, {'name': 'two', 'type': 'input', 'initial_value': 2}, {'name': 'output', 'type': 'compute', 'inputs': ['one', 'two'], 'compute_function': 'inputs[0] + inputs[1] * 10'}], 'operations': [{'type': 'expect_cell_value', 'cell': 'output', 'value': 21}]}",react
,compute cells update value when dependencies are changed,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 1}, {'name': 'output', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] + 1'}], 'operations': [{'type': 'set_value', 'cell': 'input', 'value': 3}, {'type': 'expect_cell_value', 'cell': 'output', 'value': 4}]}",react
,compute cells can depend on other compute cells,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 1}, {'name': 'times_two', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] * 2'}, {'name': 'times_thirty', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] * 30'}, {'name': 'output', 'type': 'compute', 'inputs': ['times_two', 'times_thirty'], 'compute_function': 'inputs[0] + inputs[1]'}], 'operations': [{'type': 'expect_cell_value', 'cell': 'output', 'value': 32}, {'type': 'set_value', 'cell': 'input', 'value': 3}, {'type': 'expect_cell_value', 'cell': 'output', 'value': 96}]}",react
,compute cells fire callbacks,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 1}, {'name': 'output', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] + 1'}], 'operations': [{'type': 'add_callback', 'cell': 'output', 'name': 'callback1'}, {'type': 'set_value', 'cell': 'input', 'value': 3, 'expect_callbacks': {'callback1': 4}}]}",react
,callback cells only fire on change,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 1}, {'name': 'output', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'if inputs[0] < 3 then 111 else 222'}], 'operations': [{'type': 'add_callback', 'cell': 'output', 'name': 'callback1'}, {'type': 'set_value', 'cell': 'input', 'value': 2, 'expect_callbacks_not_to_be_called': ['callback1']}, {'type': 'set_value', 'cell': 'input', 'value': 4, 'expect_callbacks': {'callback1': 222}}]}",react
,callbacks do not report already reported values,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 1}, {'name': 'output', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] + 1'}], 'operations': [{'type': 'add_callback', 'cell': 'output', 'name': 'callback1'}, {'type': 'set_value', 'cell': 'input', 'value': 2, 'expect_callbacks': {'callback1': 3}}, {'type': 'set_value', 'cell': 'input', 'value': 3, 'expect_callbacks': {'callback1': 4}}]}",react
,callbacks can fire from multiple cells,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 1}, {'name': 'plus_one', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] + 1'}, {'name': 'minus_one', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] - 1'}], 'operations': [{'type': 'add_callback', 'cell': 'plus_one', 'name': 'callback1'}, {'type': 'add_callback', 'cell': 'minus_one', 'name': 'callback2'}, {'type': 'set_value', 'cell': 'input', 'value': 10, 'expect_callbacks': {'callback1': 11, 'callback2': 9}}]}",react
,callbacks can be added and removed,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 11}, {'name': 'output', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] + 1'}], 'operations': [{'type': 'add_callback', 'cell': 'output', 'name': 'callback1'}, {'type': 'add_callback', 'cell': 'output', 'name': 'callback2'}, {'type': 'set_value', 'cell': 'input', 'value': 31, 'expect_callbacks': {'callback1': 32, 'callback2': 32}}, {'type': 'remove_callback', 'cell': 'output', 'name': 'callback1'}, {'type': 'add_callback', 'cell': 'output', 'name': 'callback3'}, {'type': 'set_value', 'cell': 'input', 'value': 41, 'expect_callbacks': {'callback2': 42, 'callback3': 42}, 'expect_callbacks_not_to_be_called': ['callback1']}]}",react
"['Some incorrect implementations store their callbacks in an array', 'and removing a callback repeatedly either removes an unrelated callback', 'or causes an out of bounds access.']",removing a callback multiple times doesn't interfere with other callbacks,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 1}, {'name': 'output', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] + 1'}], 'operations': [{'type': 'add_callback', 'cell': 'output', 'name': 'callback1'}, {'type': 'add_callback', 'cell': 'output', 'name': 'callback2'}, {'type': 'remove_callback', 'cell': 'output', 'name': 'callback1'}, {'type': 'remove_callback', 'cell': 'output', 'name': 'callback1'}, {'type': 'remove_callback', 'cell': 'output', 'name': 'callback1'}, {'type': 'set_value', 'cell': 'input', 'value': 2, 'expect_callbacks': {'callback2': 3}, 'expect_callbacks_not_to_be_called': ['callback1']}]}",react
"['Some incorrect implementations call a callback function too early,', 'when not all of the inputs of a compute cell have propagated new values.']",callbacks should only be called once even if multiple dependencies change,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 1}, {'name': 'plus_one', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] + 1'}, {'name': 'minus_one1', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] - 1'}, {'name': 'minus_one2', 'type': 'compute', 'inputs': ['minus_one1'], 'compute_function': 'inputs[0] - 1'}, {'name': 'output', 'type': 'compute', 'inputs': ['plus_one', 'minus_one2'], 'compute_function': 'inputs[0] * inputs[1]'}], 'operations': [{'type': 'add_callback', 'cell': 'output', 'name': 'callback1'}, {'type': 'set_value', 'cell': 'input', 'value': 4, 'expect_callbacks': {'callback1': 10}}]}",react
"['Some incorrect implementations simply mark a compute cell as dirty when a dependency changes,', 'then call callbacks on all dirty cells.', 'This is incorrect since the specification indicates only to call callbacks on change.']",callbacks should not be called if dependencies change but output value doesn't change,react,{},"{'cells': [{'name': 'input', 'type': 'input', 'initial_value': 1}, {'name': 'plus_one', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] + 1'}, {'name': 'minus_one', 'type': 'compute', 'inputs': ['input'], 'compute_function': 'inputs[0] - 1'}, {'name': 'always_two', 'type': 'compute', 'inputs': ['plus_one', 'minus_one'], 'compute_function': 'inputs[0] - inputs[1]'}], 'operations': [{'type': 'add_callback', 'cell': 'always_two', 'name': 'callback1'}, {'type': 'set_value', 'cell': 'input', 'value': 2, 'expect_callbacks_not_to_be_called': ['callback1']}, {'type': 'set_value', 'cell': 'input', 'value': 3, 'expect_callbacks_not_to_be_called': ['callback1']}, {'type': 'set_value', 'cell': 'input', 'value': 4, 'expect_callbacks_not_to_be_called': ['callback1']}, {'type': 'set_value', 'cell': 'input', 'value': 5, 'expect_callbacks_not_to_be_called': ['callback1']}]}",react
,no rows,rectangles,0,{'strings': []},rectangles
,no columns,rectangles,0,{'strings': ['']},rectangles
,no rectangles,rectangles,0,{'strings': [' ']},rectangles
,one rectangle,rectangles,1,"{'strings': ['+-+', '| |', '+-+']}",rectangles
,two rectangles without shared parts,rectangles,2,"{'strings': ['  +-+', '  | |', '+-+-+', '| |  ', '+-+  ']}",rectangles
,five rectangles with shared parts,rectangles,5,"{'strings': ['  +-+', '  | |', '+-+-+', '| | |', '+-+-+']}",rectangles
,rectangle of height 1 is counted,rectangles,1,"{'strings': ['+--+', '+--+']}",rectangles
,rectangle of width 1 is counted,rectangles,1,"{'strings': ['++', '||', '++']}",rectangles
,1x1 square is counted,rectangles,1,"{'strings': ['++', '++']}",rectangles
,only complete rectangles are counted,rectangles,1,"{'strings': ['  +-+', '    |', '+-+-+', '| | -', '+-+-+']}",rectangles
,rectangles can be of different sizes,rectangles,3,"{'strings': ['+------+----+', '|      |    |', '+---+--+    |', '|   |       |', '+---+-------+']}",rectangles
,corner is required for a rectangle to be complete,rectangles,2,"{'strings': ['+------+----+', '|      |    |', '+------+    |', '|   |       |', '+---+-------+']}",rectangles
,large input with many rectangles,rectangles,60,"{'strings': ['+---+--+----+', '|   +--+----+', '+---+--+    |', '|   +--+----+', '+---+--+--+-+', '+---+--+--+-+', '+------+  | |', '          +-+']}",rectangles
,an empty string,reverse-string,,{'value': ''},reverse
,a word,reverse-string,tobor,{'value': 'robot'},reverse
,a capitalized word,reverse-string,nemaR,{'value': 'Ramen'},reverse
,a sentence with punctuation,reverse-string,!yrgnuh m'I,"{'value': ""I'm hungry!""}",reverse
,a palindrome,reverse-string,racecar,{'value': 'racecar'},reverse
,RNA complement of cytosine is guanine,rna-transcription,G,{'dna': 'C'},toRna
,RNA complement of guanine is cytosine,rna-transcription,C,{'dna': 'G'},toRna
,RNA complement of thymine is adenine,rna-transcription,A,{'dna': 'T'},toRna
,RNA complement of adenine is uracil,rna-transcription,U,{'dna': 'A'},toRna
,RNA complement,rna-transcription,UGCACCAGAAUU,{'dna': 'ACGTGGTCTTAA'},toRna
,1 is a single I,roman-numerals,I,{'number': 1},roman
,2 is two I's,roman-numerals,II,{'number': 2},roman
,3 is three I's,roman-numerals,III,{'number': 3},roman
,"4, being 5 - 1, is IV",roman-numerals,IV,{'number': 4},roman
,5 is a single V,roman-numerals,V,{'number': 5},roman
,"6, being 5 + 1, is VI",roman-numerals,VI,{'number': 6},roman
,"9, being 10 - 1, is IX",roman-numerals,IX,{'number': 9},roman
,20 is two X's,roman-numerals,XXVII,{'number': 27},roman
,48 is not 50 - 2 but rather 40 + 8,roman-numerals,XLVIII,{'number': 48},roman
,49 is not 40 + 5 + 4 but rather 50 - 10 + 10 - 1,roman-numerals,XLIX,{'number': 49},roman
,50 is a single L,roman-numerals,LIX,{'number': 59},roman
,"90, being 100 - 10, is XC",roman-numerals,XCIII,{'number': 93},roman
,100 is a single C,roman-numerals,CXLI,{'number': 141},roman
,"60, being 50 + 10, is LX",roman-numerals,CLXIII,{'number': 163},roman
,"400, being 500 - 100, is CD",roman-numerals,CDII,{'number': 402},roman
,500 is a single D,roman-numerals,DLXXV,{'number': 575},roman
,"900, being 1000 - 100, is CM",roman-numerals,CMXI,{'number': 911},roman
,1000 is a single M,roman-numerals,MXXIV,{'number': 1024},roman
,3000 is three M's,roman-numerals,MMM,{'number': 3000},roman
['This is the README example.'],Can identify single saddle point,saddle-points,"[{'row': 1, 'column': 0}]","{'matrix': [[9, 8, 7], [5, 3, 2], [6, 6, 7]]}",saddlePoints
,Can identify that empty matrix has no saddle points,saddle-points,[],{'matrix': [[]]},saddlePoints
,Can identify lack of saddle points when there are none,saddle-points,[],"{'matrix': [[1, 2, 3], [3, 1, 2], [2, 3, 1]]}",saddlePoints
,Can identify multiple saddle points,saddle-points,"[{'row': 0, 'column': 1}, {'row': 1, 'column': 1}, {'row': 2, 'column': 1}]","{'matrix': [[4, 5, 4], [3, 5, 5], [1, 5, 4]]}",saddlePoints
"['This is a permutation of the README matrix designed to test', 'off-by-one errors.']",Can identify saddle point in bottom right corner,saddle-points,"[{'row': 2, 'column': 2}]","{'matrix': [[8, 7, 9], [6, 7, 6], [3, 2, 5]]}",saddlePoints
,zero,say,zero,{'number': 0},say
,one,say,one,{'number': 1},say
,fourteen,say,fourteen,{'number': 14},say
,twenty,say,twenty,{'number': 20},say
,twenty-two,say,twenty-two,{'number': 22},say
,one hundred,say,one hundred,{'number': 100},say
,one hundred twenty-three,say,one hundred twenty-three,{'number': 123},say
,one thousand,say,one thousand,{'number': 1000},say
,one thousand two hundred thirty-four,say,one thousand two hundred thirty-four,{'number': 1234},say
,one million,say,one million,{'number': 1000000},say
,one million two thousand three hundred forty-five,say,one million two thousand three hundred forty-five,{'number': 1002345},say
,one billion,say,one billion,{'number': 1000000000},say
,a big number,say,nine hundred eighty-seven billion six hundred fifty-four million three hundred twenty-one thousand one hundred twenty-three,{'number': 987654321123},say
,numbers below zero are out of range,say,-1,{'number': -1},say
,"numbers above 999,999,999,999 are out of range",say,-1,{'number': 1000000000000},say
,lowercase letter,scrabble-score,1,{'word': 'a'},score
,uppercase letter,scrabble-score,1,{'word': 'A'},score
,valuable letter,scrabble-score,4,{'word': 'f'},score
,short word,scrabble-score,2,{'word': 'at'},score
,"short, valuable word",scrabble-score,12,{'word': 'zoo'},score
,medium word,scrabble-score,6,{'word': 'street'},score
,"medium, valuable word",scrabble-score,22,{'word': 'quirky'},score
,"long, mixed-case word",scrabble-score,41,{'word': 'OxyphenButazone'},score
,english-like word,scrabble-score,8,{'word': 'pinata'},score
,empty input,scrabble-score,0,{'word': ''},score
,entire alphabet available,scrabble-score,87,{'word': 'abcdefghijklmnopqrstuvwxyz'},score
,slices of one from one,series,['1'],"{'series': '1', 'sliceLength': 1}",slices
,slices of one from two,series,"['1', '2']","{'series': '12', 'sliceLength': 1}",slices
,slices of two,series,['35'],"{'series': '35', 'sliceLength': 2}",slices
,slices of two overlap,series,"['91', '14', '42']","{'series': '9142', 'sliceLength': 2}",slices
,slices can include duplicates,series,"['777', '777', '777', '777']","{'series': '777777', 'sliceLength': 3}",slices
,slices of a long series,series,"['91849', '18493', '84939', '49390', '93904', '39042', '90424', '04243']","{'series': '918493904243', 'sliceLength': 5}",slices
,slice length is too large,series,{'error': 'slice length cannot be greater than series length'},"{'series': '12345', 'sliceLength': 6}",slices
,slice length cannot be zero,series,{'error': 'slice length cannot be zero'},"{'series': '12345', 'sliceLength': 0}",slices
,slice length cannot be negative,series,{'error': 'slice length cannot be negative'},"{'series': '123', 'sliceLength': -1}",slices
,empty series is invalid,series,{'error': 'series cannot be empty'},"{'series': '', 'sliceLength': 1}",slices
,no primes under two,sieve,[],{'limit': 1},primes
,find first prime,sieve,[2],{'limit': 2},primes
,find primes up to 10,sieve,"[2, 3, 5, 7]",{'limit': 10},primes
,limit is prime,sieve,"[2, 3, 5, 7, 11, 13]",{'limit': 13},primes
,find primes up to 1000,sieve,"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]",{'limit': 1000},primes
,age on Earth,space-age,31.69,"{'planet': 'Earth', 'seconds': 1000000000}",age
,age on Mercury,space-age,280.88,"{'planet': 'Mercury', 'seconds': 2134835688}",age
,age on Venus,space-age,9.78,"{'planet': 'Venus', 'seconds': 189839836}",age
,age on Mars,space-age,39.25,"{'planet': 'Mars', 'seconds': 2329871239}",age
,age on Jupiter,space-age,2.41,"{'planet': 'Jupiter', 'seconds': 901876382}",age
,age on Saturn,space-age,3.23,"{'planet': 'Saturn', 'seconds': 3000000000}",age
,age on Uranus,space-age,1.21,"{'planet': 'Uranus', 'seconds': 3210123456}",age
,age on Neptune,space-age,1.58,"{'planet': 'Neptune', 'seconds': 8210123456}",age
,empty spiral,spiral-matrix,[],{'size': 0},spiralMatrix
,trivial spiral,spiral-matrix,[[1]],{'size': 1},spiralMatrix
,spiral of size 2,spiral-matrix,"[[1, 2], [4, 3]]",{'size': 2},spiralMatrix
,spiral of size 3,spiral-matrix,"[[1, 2, 3], [8, 9, 4], [7, 6, 5]]",{'size': 3},spiralMatrix
,spiral of size 4,spiral-matrix,"[[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]]",{'size': 4},spiralMatrix
,spiral of size 5,spiral-matrix,"[[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]]",{'size': 5},spiralMatrix
,empty lists,sublist,equal,"{'listOne': [], 'listTwo': []}",sublist
,empty list within non empty list,sublist,sublist,"{'listOne': [], 'listTwo': [1, 2, 3]}",sublist
,non empty list contains empty list,sublist,superlist,"{'listOne': [1, 2, 3], 'listTwo': []}",sublist
,list equals itself,sublist,equal,"{'listOne': [1, 2, 3], 'listTwo': [1, 2, 3]}",sublist
,different lists,sublist,unequal,"{'listOne': [1, 2, 3], 'listTwo': [2, 3, 4]}",sublist
,false start,sublist,sublist,"{'listOne': [1, 2, 5], 'listTwo': [0, 1, 2, 3, 1, 2, 5, 6]}",sublist
,consecutive,sublist,sublist,"{'listOne': [1, 1, 2], 'listTwo': [0, 1, 1, 1, 2, 1, 2]}",sublist
,sublist at start,sublist,sublist,"{'listOne': [0, 1, 2], 'listTwo': [0, 1, 2, 3, 4, 5]}",sublist
,sublist in middle,sublist,sublist,"{'listOne': [2, 3, 4], 'listTwo': [0, 1, 2, 3, 4, 5]}",sublist
,sublist at end,sublist,sublist,"{'listOne': [3, 4, 5], 'listTwo': [0, 1, 2, 3, 4, 5]}",sublist
,at start of superlist,sublist,superlist,"{'listOne': [0, 1, 2, 3, 4, 5], 'listTwo': [0, 1, 2]}",sublist
,in middle of superlist,sublist,superlist,"{'listOne': [0, 1, 2, 3, 4, 5], 'listTwo': [2, 3]}",sublist
,at end of superlist,sublist,superlist,"{'listOne': [0, 1, 2, 3, 4, 5], 'listTwo': [3, 4, 5]}",sublist
,first list missing element from second list,sublist,unequal,"{'listOne': [1, 3], 'listTwo': [1, 2, 3]}",sublist
,second list missing element from first list,sublist,unequal,"{'listOne': [1, 2, 3], 'listTwo': [1, 3]}",sublist
,order matters to a list,sublist,unequal,"{'listOne': [1, 2, 3], 'listTwo': [3, 2, 1]}",sublist
,same digits but different numbers,sublist,unequal,"{'listOne': [1, 0, 1], 'listTwo': [10, 1]}",sublist
,multiples of 3 or 5 up to 1,sum-of-multiples,0,"{'factors': [3, 5], 'limit': 1}",sum
,multiples of 3 or 5 up to 4,sum-of-multiples,3,"{'factors': [3, 5], 'limit': 4}",sum
,multiples of 3 up to 7,sum-of-multiples,9,"{'factors': [3], 'limit': 7}",sum
,multiples of 3 or 5 up to 10,sum-of-multiples,23,"{'factors': [3, 5], 'limit': 10}",sum
,multiples of 3 or 5 up to 100,sum-of-multiples,2318,"{'factors': [3, 5], 'limit': 100}",sum
,multiples of 3 or 5 up to 1000,sum-of-multiples,233168,"{'factors': [3, 5], 'limit': 1000}",sum
,"multiples of 7, 13 or 17 up to 20",sum-of-multiples,51,"{'factors': [7, 13, 17], 'limit': 20}",sum
,multiples of 4 or 6 up to 15,sum-of-multiples,30,"{'factors': [4, 6], 'limit': 15}",sum
,"multiples of 5, 6 or 8 up to 150",sum-of-multiples,4419,"{'factors': [5, 6, 8], 'limit': 150}",sum
,multiples of 5 or 25 up to 51,sum-of-multiples,275,"{'factors': [5, 25], 'limit': 51}",sum
,multiples of 43 or 47 up to 10000,sum-of-multiples,2203160,"{'factors': [43, 47], 'limit': 10000}",sum
,multiples of 1 up to 100,sum-of-multiples,4950,"{'factors': [1], 'limit': 100}",sum
,multiples of an empty list up to 10000,sum-of-multiples,0,"{'factors': [], 'limit': 10000}",sum
,just the header if no input,tournament,['Team                           | MP |  W |  D |  L |  P'],{'rows': []},tally
,"a win is three points, a loss is zero points",tournament,"['Team                           | MP |  W |  D |  L |  P', 'Allegoric Alaskans             |  1 |  1 |  0 |  0 |  3', 'Blithering Badgers             |  1 |  0 |  0 |  1 |  0']",{'rows': ['Allegoric Alaskans;Blithering Badgers;win']},tally
,a win can also be expressed as a loss,tournament,"['Team                           | MP |  W |  D |  L |  P', 'Allegoric Alaskans             |  1 |  1 |  0 |  0 |  3', 'Blithering Badgers             |  1 |  0 |  0 |  1 |  0']",{'rows': ['Blithering Badgers;Allegoric Alaskans;loss']},tally
,a different team can win,tournament,"['Team                           | MP |  W |  D |  L |  P', 'Blithering Badgers             |  1 |  1 |  0 |  0 |  3', 'Allegoric Alaskans             |  1 |  0 |  0 |  1 |  0']",{'rows': ['Blithering Badgers;Allegoric Alaskans;win']},tally
,a draw is one point each,tournament,"['Team                           | MP |  W |  D |  L |  P', 'Allegoric Alaskans             |  1 |  0 |  1 |  0 |  1', 'Blithering Badgers             |  1 |  0 |  1 |  0 |  1']",{'rows': ['Allegoric Alaskans;Blithering Badgers;draw']},tally
,There can be more than one match,tournament,"['Team                           | MP |  W |  D |  L |  P', 'Allegoric Alaskans             |  2 |  2 |  0 |  0 |  6', 'Blithering Badgers             |  2 |  0 |  0 |  2 |  0']","{'rows': ['Allegoric Alaskans;Blithering Badgers;win', 'Allegoric Alaskans;Blithering Badgers;win']}",tally
,There can be more than one winner,tournament,"['Team                           | MP |  W |  D |  L |  P', 'Allegoric Alaskans             |  2 |  1 |  0 |  1 |  3', 'Blithering Badgers             |  2 |  1 |  0 |  1 |  3']","{'rows': ['Allegoric Alaskans;Blithering Badgers;loss', 'Allegoric Alaskans;Blithering Badgers;win']}",tally
,There can be more than two teams,tournament,"['Team                           | MP |  W |  D |  L |  P', 'Allegoric Alaskans             |  2 |  2 |  0 |  0 |  6', 'Blithering Badgers             |  2 |  1 |  0 |  1 |  3', 'Courageous Californians        |  2 |  0 |  0 |  2 |  0']","{'rows': ['Allegoric Alaskans;Blithering Badgers;win', 'Blithering Badgers;Courageous Californians;win', 'Courageous Californians;Allegoric Alaskans;loss']}",tally
,typical input,tournament,"['Team                           | MP |  W |  D |  L |  P', 'Devastating Donkeys            |  3 |  2 |  1 |  0 |  7', 'Allegoric Alaskans             |  3 |  2 |  0 |  1 |  6', 'Blithering Badgers             |  3 |  1 |  0 |  2 |  3', 'Courageous Californians        |  3 |  0 |  1 |  2 |  1']","{'rows': ['Allegoric Alaskans;Blithering Badgers;win', 'Devastating Donkeys;Courageous Californians;draw', 'Devastating Donkeys;Allegoric Alaskans;win', 'Courageous Californians;Blithering Badgers;loss', 'Blithering Badgers;Devastating Donkeys;loss', 'Allegoric Alaskans;Courageous Californians;win']}",tally
,incomplete competition (not all pairs have played),tournament,"['Team                           | MP |  W |  D |  L |  P', 'Allegoric Alaskans             |  3 |  2 |  0 |  1 |  6', 'Blithering Badgers             |  2 |  1 |  1 |  0 |  4', 'Courageous Californians        |  2 |  0 |  1 |  1 |  1', 'Devastating Donkeys            |  1 |  0 |  0 |  1 |  0']","{'rows': ['Allegoric Alaskans;Blithering Badgers;loss', 'Devastating Donkeys;Allegoric Alaskans;loss', 'Courageous Californians;Blithering Badgers;draw', 'Allegoric Alaskans;Courageous Californians;win']}",tally
,ties broken alphabetically,tournament,"['Team                           | MP |  W |  D |  L |  P', 'Allegoric Alaskans             |  3 |  2 |  1 |  0 |  7', 'Courageous Californians        |  3 |  2 |  1 |  0 |  7', 'Blithering Badgers             |  3 |  0 |  1 |  2 |  1', 'Devastating Donkeys            |  3 |  0 |  1 |  2 |  1']","{'rows': ['Courageous Californians;Devastating Donkeys;win', 'Allegoric Alaskans;Blithering Badgers;win', 'Devastating Donkeys;Allegoric Alaskans;loss', 'Courageous Californians;Blithering Badgers;win', 'Blithering Badgers;Devastating Donkeys;draw', 'Allegoric Alaskans;Courageous Californians;draw']}",tally
,empty string,transpose,[],{'lines': []},transpose
,two characters in a row,transpose,"['A', '1']",{'lines': ['A1']},transpose
,two characters in a column,transpose,['A1'],"{'lines': ['A', '1']}",transpose
,simple,transpose,"['A1', 'B2', 'C3']","{'lines': ['ABC', '123']}",transpose
,single line,transpose,"['S', 'i', 'n', 'g', 'l', 'e', ' ', 'l', 'i', 'n', 'e', '.']",{'lines': ['Single line.']},transpose
,first line longer than second line,transpose,"['TT', 'hh', 'ee', '  ', 'ff', 'oi', 'uf', 'rt', 'th', 'h ', ' l', 'li', 'in', 'ne', 'e.', '.']","{'lines': ['The fourth line.', 'The fifth line.']}",transpose
,second line longer than first line,transpose,"['TT', 'hh', 'ee', '  ', 'fs', 'ie', 'rc', 'so', 'tn', ' d', 'l ', 'il', 'ni', 'en', '.e', ' .']","{'lines': ['The first line.', 'The second line.']}",transpose
,mixed line length,transpose,"['TAAA', 'h   ', 'elll', ' ooi', 'lnnn', 'ogge', 'n e.', 'glr', 'ei ', 'snl', 'tei', ' .n', 'l e', 'i .', 'n', 'e', '.']","{'lines': ['The longest line.', 'A long line.', 'A longer line.', 'A line.']}",transpose
,square,transpose,"['HEART', 'EMBER', 'ABUSE', 'RESIN', 'TREND']","{'lines': ['HEART', 'EMBER', 'ABUSE', 'RESIN', 'TREND']}",transpose
,rectangle,transpose,"['FOBS', 'RULE', 'ATOP', 'CLOT', 'TIME', 'UNIT', 'RENT', 'EDGE']","{'lines': ['FRACTURE', 'OUTLINED', 'BLOOMING', 'SEPTETTE']}",transpose
,triangle,transpose,"['TEASER', ' EASER', '  ASER', '   SER', '    ER', '     R']","{'lines': ['T', 'EE', 'AAA', 'SSSS', 'EEEEE', 'RRRRRR']}",transpose
,Measure using bucket one of size 3 and bucket two of size 5 - start with bucket one,two-bucket,"{'moves': 4, 'goalBucket': 'one', 'otherBucket': 5}","{'bucketOne': 3, 'bucketTwo': 5, 'goal': 1, 'startBucket': 'one'}",measure
,Measure using bucket one of size 3 and bucket two of size 5 - start with bucket two,two-bucket,"{'moves': 8, 'goalBucket': 'two', 'otherBucket': 3}","{'bucketOne': 3, 'bucketTwo': 5, 'goal': 1, 'startBucket': 'two'}",measure
,Measure using bucket one of size 7 and bucket two of size 11 - start with bucket one,two-bucket,"{'moves': 14, 'goalBucket': 'one', 'otherBucket': 11}","{'bucketOne': 7, 'bucketTwo': 11, 'goal': 2, 'startBucket': 'one'}",measure
,Measure using bucket one of size 7 and bucket two of size 11 - start with bucket two,two-bucket,"{'moves': 18, 'goalBucket': 'two', 'otherBucket': 7}","{'bucketOne': 7, 'bucketTwo': 11, 'goal': 2, 'startBucket': 'two'}",measure
,Measure one step using bucket one of size 1 and bucket two of size 3 - start with bucket two,two-bucket,"{'moves': 1, 'goalBucket': 'two', 'otherBucket': 0}","{'bucketOne': 1, 'bucketTwo': 3, 'goal': 3, 'startBucket': 'two'}",measure
,Measure using bucket one of size 2 and bucket two of size 3 - start with bucket one and end with bucket two,two-bucket,"{'moves': 2, 'goalBucket': 'two', 'otherBucket': 2}","{'bucketOne': 2, 'bucketTwo': 3, 'goal': 3, 'startBucket': 'one'}",measure
,no name given,two-fer,"One for you, one for me.",{'name': None},twoFer
,a name given,two-fer,"One for Alice, one for me.",{'name': 'Alice'},twoFer
,another name given,two-fer,"One for Bob, one for me.",{'name': 'Bob'},twoFer
,count one word,word-count,{'word': 1},{'sentence': 'word'},countWords
,count one of each word,word-count,"{'one': 1, 'of': 1, 'each': 1}",{'sentence': 'one of each'},countWords
,multiple occurrences of a word,word-count,"{'one': 1, 'fish': 4, 'two': 1, 'red': 1, 'blue': 1}",{'sentence': 'one fish two fish red fish blue fish'},countWords
,handles cramped lists,word-count,"{'one': 1, 'two': 1, 'three': 1}","{'sentence': 'one,two,three'}",countWords
,handles expanded lists,word-count,"{'one': 1, 'two': 1, 'three': 1}","{'sentence': 'one,\ntwo,\nthree'}",countWords
,ignore punctuation,word-count,"{'car': 1, 'carpet': 1, 'as': 1, 'java': 1, 'javascript': 1}",{'sentence': 'car: carpet as java: javascript!!&@$%^&'},countWords
,include numbers,word-count,"{'testing': 2, '1': 1, '2': 1}","{'sentence': 'testing, 1, 2 testing'}",countWords
,normalize case,word-count,"{'go': 3, 'stop': 2}",{'sentence': 'go Go GO Stop stop'},countWords
,with apostrophes,word-count,"{'first': 1, ""don't"": 2, 'laugh': 1, 'then': 1, 'cry': 1}","{'sentence': ""First: don't laugh. Then: don't cry.""}",countWords
,with quotations,word-count,"{'joe': 1, ""can't"": 1, 'tell': 1, 'between': 1, 'large': 2, 'and': 1}","{'sentence': ""Joe can't tell between 'large' and large.""}",countWords
,multiple spaces not detected as a word,word-count,"{'multiple': 1, 'whitespaces': 1}",{'sentence': ' multiple   whitespaces'},countWords
,Should accept an initial game grid and a target search word,word-search,{'clojure': None},"{'grid': ['jefblpepre'], 'wordsToSearchFor': ['clojure']}",search
,Should locate one word written left to right,word-search,"{'clojure': {'start': {'column': 1, 'row': 1}, 'end': {'column': 7, 'row': 1}}}","{'grid': ['clojurermt'], 'wordsToSearchFor': ['clojure']}",search
,Should locate the same word written left to right in a different position,word-search,"{'clojure': {'start': {'column': 3, 'row': 1}, 'end': {'column': 9, 'row': 1}}}","{'grid': ['mtclojurer'], 'wordsToSearchFor': ['clojure']}",search
,Should locate a different left to right word,word-search,"{'coffee': {'start': {'column': 1, 'row': 1}, 'end': {'column': 6, 'row': 1}}}","{'grid': ['coffeelplx'], 'wordsToSearchFor': ['coffee']}",search
,Should locate that different left to right word in a different position,word-search,"{'coffee': {'start': {'column': 2, 'row': 1}, 'end': {'column': 7, 'row': 1}}}","{'grid': ['xcoffeezlp'], 'wordsToSearchFor': ['coffee']}",search
,Should locate a left to right word in two line grid,word-search,"{'clojure': {'start': {'column': 2, 'row': 2}, 'end': {'column': 8, 'row': 2}}}","{'grid': ['jefblpepre', 'tclojurerm'], 'wordsToSearchFor': ['clojure']}",search
,Should locate a left to right word in three line grid,word-search,"{'clojure': {'start': {'column': 1, 'row': 3}, 'end': {'column': 7, 'row': 3}}}","{'grid': ['camdcimgtc', 'jefblpepre', 'clojurermt'], 'wordsToSearchFor': ['clojure']}",search
,Should locate a left to right word in ten line grid,word-search,"{'clojure': {'start': {'column': 1, 'row': 10}, 'end': {'column': 7, 'row': 10}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'screeaumgr', 'alxhpburyi', 'jalaycalmp', 'clojurermt'], 'wordsToSearchFor': ['clojure']}",search
,Should locate that left to right word in a different position in a ten line grid,word-search,"{'clojure': {'start': {'column': 1, 'row': 9}, 'end': {'column': 7, 'row': 9}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'screeaumgr', 'alxhpburyi', 'clojurermt', 'jalaycalmp'], 'wordsToSearchFor': ['clojure']}",search
,Should locate a different left to right word in a ten line grid,word-search,"{'fortran': {'start': {'column': 1, 'row': 7}, 'end': {'column': 7, 'row': 7}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'fortranftw', 'alxhpburyi', 'clojurermt', 'jalaycalmp'], 'wordsToSearchFor': ['fortran']}",search
,Should locate multiple words,word-search,"{'clojure': {'start': {'column': 1, 'row': 10}, 'end': {'column': 7, 'row': 10}}, 'fortran': {'start': {'column': 1, 'row': 7}, 'end': {'column': 7, 'row': 7}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'fortranftw', 'alxhpburyi', 'jalaycalmp', 'clojurermt'], 'wordsToSearchFor': ['fortran', 'clojure']}",search
,Should locate a single word written right to left,word-search,"{'elixir': {'start': {'column': 6, 'row': 1}, 'end': {'column': 1, 'row': 1}}}","{'grid': ['rixilelhrs'], 'wordsToSearchFor': ['elixir']}",search
,Should locate multiple words written in different horizontal directions,word-search,"{'clojure': {'start': {'column': 1, 'row': 10}, 'end': {'column': 7, 'row': 10}}, 'elixir': {'start': {'column': 6, 'row': 5}, 'end': {'column': 1, 'row': 5}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'screeaumgr', 'alxhpburyi', 'jalaycalmp', 'clojurermt'], 'wordsToSearchFor': ['elixir', 'clojure']}",search
,Should locate words written top to bottom,word-search,"{'clojure': {'start': {'column': 1, 'row': 10}, 'end': {'column': 7, 'row': 10}}, 'elixir': {'start': {'column': 6, 'row': 5}, 'end': {'column': 1, 'row': 5}}, 'ecmascript': {'start': {'column': 10, 'row': 1}, 'end': {'column': 10, 'row': 10}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'screeaumgr', 'alxhpburyi', 'jalaycalmp', 'clojurermt'], 'wordsToSearchFor': ['clojure', 'elixir', 'ecmascript']}",search
,Should locate words written bottom to top,word-search,"{'clojure': {'start': {'column': 1, 'row': 10}, 'end': {'column': 7, 'row': 10}}, 'elixir': {'start': {'column': 6, 'row': 5}, 'end': {'column': 1, 'row': 5}}, 'ecmascript': {'start': {'column': 10, 'row': 1}, 'end': {'column': 10, 'row': 10}}, 'rust': {'start': {'column': 9, 'row': 5}, 'end': {'column': 9, 'row': 2}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'screeaumgr', 'alxhpburyi', 'jalaycalmp', 'clojurermt'], 'wordsToSearchFor': ['clojure', 'elixir', 'ecmascript', 'rust']}",search
,Should locate words written top left to bottom right,word-search,"{'clojure': {'start': {'column': 1, 'row': 10}, 'end': {'column': 7, 'row': 10}}, 'elixir': {'start': {'column': 6, 'row': 5}, 'end': {'column': 1, 'row': 5}}, 'ecmascript': {'start': {'column': 10, 'row': 1}, 'end': {'column': 10, 'row': 10}}, 'rust': {'start': {'column': 9, 'row': 5}, 'end': {'column': 9, 'row': 2}}, 'java': {'start': {'column': 1, 'row': 1}, 'end': {'column': 4, 'row': 4}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'screeaumgr', 'alxhpburyi', 'jalaycalmp', 'clojurermt'], 'wordsToSearchFor': ['clojure', 'elixir', 'ecmascript', 'rust', 'java']}",search
,Should locate words written bottom right to top left,word-search,"{'clojure': {'start': {'column': 1, 'row': 10}, 'end': {'column': 7, 'row': 10}}, 'elixir': {'start': {'column': 6, 'row': 5}, 'end': {'column': 1, 'row': 5}}, 'ecmascript': {'start': {'column': 10, 'row': 1}, 'end': {'column': 10, 'row': 10}}, 'rust': {'start': {'column': 9, 'row': 5}, 'end': {'column': 9, 'row': 2}}, 'java': {'start': {'column': 1, 'row': 1}, 'end': {'column': 4, 'row': 4}}, 'lua': {'start': {'column': 8, 'row': 9}, 'end': {'column': 6, 'row': 7}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'screeaumgr', 'alxhpburyi', 'jalaycalmp', 'clojurermt'], 'wordsToSearchFor': ['clojure', 'elixir', 'ecmascript', 'rust', 'java', 'lua']}",search
,Should locate words written bottom left to top right,word-search,"{'clojure': {'start': {'column': 1, 'row': 10}, 'end': {'column': 7, 'row': 10}}, 'elixir': {'start': {'column': 6, 'row': 5}, 'end': {'column': 1, 'row': 5}}, 'ecmascript': {'start': {'column': 10, 'row': 1}, 'end': {'column': 10, 'row': 10}}, 'rust': {'start': {'column': 9, 'row': 5}, 'end': {'column': 9, 'row': 2}}, 'java': {'start': {'column': 1, 'row': 1}, 'end': {'column': 4, 'row': 4}}, 'lua': {'start': {'column': 8, 'row': 9}, 'end': {'column': 6, 'row': 7}}, 'lisp': {'start': {'column': 3, 'row': 6}, 'end': {'column': 6, 'row': 3}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'screeaumgr', 'alxhpburyi', 'jalaycalmp', 'clojurermt'], 'wordsToSearchFor': ['clojure', 'elixir', 'ecmascript', 'rust', 'java', 'lua', 'lisp']}",search
,Should locate words written top right to bottom left,word-search,"{'clojure': {'start': {'column': 1, 'row': 10}, 'end': {'column': 7, 'row': 10}}, 'elixir': {'start': {'column': 6, 'row': 5}, 'end': {'column': 1, 'row': 5}}, 'ecmascript': {'start': {'column': 10, 'row': 1}, 'end': {'column': 10, 'row': 10}}, 'rust': {'start': {'column': 9, 'row': 5}, 'end': {'column': 9, 'row': 2}}, 'java': {'start': {'column': 1, 'row': 1}, 'end': {'column': 4, 'row': 4}}, 'lua': {'start': {'column': 8, 'row': 9}, 'end': {'column': 6, 'row': 7}}, 'lisp': {'start': {'column': 3, 'row': 6}, 'end': {'column': 6, 'row': 3}}, 'ruby': {'start': {'column': 8, 'row': 6}, 'end': {'column': 5, 'row': 9}}}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'screeaumgr', 'alxhpburyi', 'jalaycalmp', 'clojurermt'], 'wordsToSearchFor': ['clojure', 'elixir', 'ecmascript', 'rust', 'java', 'lua', 'lisp', 'ruby']}",search
,Should fail to locate a word that is not in the puzzle,word-search,"{'clojure': {'start': {'column': 1, 'row': 10}, 'end': {'column': 7, 'row': 10}}, 'elixir': {'start': {'column': 6, 'row': 5}, 'end': {'column': 1, 'row': 5}}, 'ecmascript': {'start': {'column': 10, 'row': 1}, 'end': {'column': 10, 'row': 10}}, 'rust': {'start': {'column': 9, 'row': 5}, 'end': {'column': 9, 'row': 2}}, 'java': {'start': {'column': 1, 'row': 1}, 'end': {'column': 4, 'row': 4}}, 'lua': {'start': {'column': 8, 'row': 9}, 'end': {'column': 6, 'row': 7}}, 'lisp': {'start': {'column': 3, 'row': 6}, 'end': {'column': 6, 'row': 3}}, 'ruby': {'start': {'column': 8, 'row': 6}, 'end': {'column': 5, 'row': 9}}, 'haskell': None}","{'grid': ['jefblpepre', 'camdcimgtc', 'oivokprjsm', 'pbwasqroua', 'rixilelhrs', 'wolcqlirpc', 'screeaumgr', 'alxhpburyi', 'jalaycalmp', 'clojurermt'], 'wordsToSearchFor': ['clojure', 'elixir', 'ecmascript', 'rust', 'java', 'lua', 'lisp', 'ruby', 'haskell']}",search
,addition,wordy,2,{'question': 'What is 1 plus 1?'},answer
,more addition,wordy,55,{'question': 'What is 53 plus 2?'},answer
,addition with negative numbers,wordy,-11,{'question': 'What is -1 plus -10?'},answer
,large addition,wordy,45801,{'question': 'What is 123 plus 45678?'},answer
,subtraction,wordy,16,{'question': 'What is 4 minus -12?'},answer
,multiplication,wordy,-75,{'question': 'What is -3 multiplied by 25?'},answer
,division,wordy,-11,{'question': 'What is 33 divided by -3?'},answer
,multiple additions,wordy,3,{'question': 'What is 1 plus 1 plus 1?'},answer
,addition and subtraction,wordy,8,{'question': 'What is 1 plus 5 minus -2?'},answer
,multiple subtraction,wordy,3,{'question': 'What is 20 minus 4 minus 13?'},answer
,subtraction then addition,wordy,14,{'question': 'What is 17 minus 6 plus 3?'},answer
,multiple multiplication,wordy,-12,{'question': 'What is 2 multiplied by -2 multiplied by 3?'},answer
,addition and multiplication,wordy,-8,{'question': 'What is -3 plus 7 multiplied by -2?'},answer
,multiple division,wordy,2,{'question': 'What is -12 divided by 2 divided by -3?'},answer
,unknown operation,wordy,False,{'question': 'What is 52 cubed?'},answer
,Non math question,wordy,False,{'question': 'Who is the President of the United States?'},answer
,Yacht,yacht,50,"{'dice': [5, 5, 5, 5, 5], 'category': 'yacht'}",score
,Not Yacht,yacht,0,"{'dice': [1, 3, 3, 2, 5], 'category': 'yacht'}",score
,Ones,yacht,3,"{'dice': [1, 1, 1, 3, 5], 'category': 'ones'}",score
,"Ones, out of order",yacht,3,"{'dice': [3, 1, 1, 5, 1], 'category': 'ones'}",score
,No ones,yacht,0,"{'dice': [4, 3, 6, 5, 5], 'category': 'ones'}",score
,Twos,yacht,2,"{'dice': [2, 3, 4, 5, 6], 'category': 'twos'}",score
,Fours,yacht,8,"{'dice': [1, 4, 1, 4, 1], 'category': 'fours'}",score
,Yacht counted as threes,yacht,15,"{'dice': [3, 3, 3, 3, 3], 'category': 'threes'}",score
,Yacht of 3s counted as fives,yacht,0,"{'dice': [3, 3, 3, 3, 3], 'category': 'fives'}",score
,Sixes,yacht,6,"{'dice': [2, 3, 4, 5, 6], 'category': 'sixes'}",score
,"Full house two small, three big",yacht,16,"{'dice': [2, 2, 4, 4, 4], 'category': 'full house'}",score
,"Full house three small, two big",yacht,19,"{'dice': [5, 3, 3, 5, 3], 'category': 'full house'}",score
,Two pair is not a full house,yacht,0,"{'dice': [2, 2, 4, 4, 5], 'category': 'full house'}",score
,Four of a kind is not a full house,yacht,0,"{'dice': [1, 4, 4, 4, 4], 'category': 'full house'}",score
,Yacht is not a full house,yacht,0,"{'dice': [2, 2, 2, 2, 2], 'category': 'full house'}",score
,Four of a Kind,yacht,24,"{'dice': [6, 6, 4, 6, 6], 'category': 'four of a kind'}",score
,Yacht can be scored as Four of a Kind,yacht,12,"{'dice': [3, 3, 3, 3, 3], 'category': 'four of a kind'}",score
,Full house is not Four of a Kind,yacht,0,"{'dice': [3, 3, 3, 5, 5], 'category': 'four of a kind'}",score
,Little Straight,yacht,30,"{'dice': [3, 5, 4, 1, 2], 'category': 'little straight'}",score
,Little Straight as Big Straight,yacht,0,"{'dice': [1, 2, 3, 4, 5], 'category': 'big straight'}",score
,Four in order but not a little straight,yacht,0,"{'dice': [1, 1, 2, 3, 4], 'category': 'little straight'}",score
,No pairs but not a little straight,yacht,0,"{'dice': [1, 2, 3, 4, 6], 'category': 'little straight'}",score
,"Minimum is 1, maximum is 5, but not a little straight",yacht,0,"{'dice': [1, 1, 3, 4, 5], 'category': 'little straight'}",score
,Big Straight,yacht,30,"{'dice': [4, 6, 2, 5, 3], 'category': 'big straight'}",score
,Big Straight as little straight,yacht,0,"{'dice': [6, 5, 4, 3, 2], 'category': 'little straight'}",score
,Choice,yacht,23,"{'dice': [3, 3, 5, 6, 6], 'category': 'choice'}",score
,Yacht as choice,yacht,10,"{'dice': [2, 2, 2, 2, 2], 'category': 'choice'}",score
,resident who drinks water,zebra-puzzle,Norwegian,{},drinksWater
,resident who owns zebra,zebra-puzzle,Japanese,{},ownsZebra
,data is retained,zipper,"{'type': 'tree', 'value': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'to_tree'}]}",expectedValue
,"left, right and value",zipper,"{'type': 'int', 'value': 3}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'left'}, {'operation': 'right'}, {'operation': 'value'}]}",expectedValue
,dead end,zipper,"{'type': 'zipper', 'value': None}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'left'}, {'operation': 'left'}]}",expectedValue
,tree from deep focus,zipper,"{'type': 'tree', 'value': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'left'}, {'operation': 'right'}, {'operation': 'to_tree'}]}",expectedValue
,traversing up from top,zipper,"{'type': 'zipper', 'value': None}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'up'}]}",expectedValue
,"left, right, and up",zipper,"{'type': 'int', 'value': 3}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'left'}, {'operation': 'up'}, {'operation': 'right'}, {'operation': 'up'}, {'operation': 'left'}, {'operation': 'right'}, {'operation': 'value'}]}",expectedValue
,set_value,zipper,"{'type': 'tree', 'value': {'value': 1, 'left': {'value': 5, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'left'}, {'operation': 'set_value', 'item': 5}, {'operation': 'to_tree'}]}",expectedValue
,set_value after traversing up,zipper,"{'type': 'tree', 'value': {'value': 1, 'left': {'value': 5, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'left'}, {'operation': 'right'}, {'operation': 'up'}, {'operation': 'set_value', 'item': 5}, {'operation': 'to_tree'}]}",expectedValue
,set_left with leaf,zipper,"{'type': 'tree', 'value': {'value': 1, 'left': {'value': 2, 'left': {'value': 5, 'left': None, 'right': None}, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'left'}, {'operation': 'set_left', 'item': {'value': 5, 'left': None, 'right': None}}, {'operation': 'to_tree'}]}",expectedValue
,set_right with null,zipper,"{'type': 'tree', 'value': {'value': 1, 'left': {'value': 2, 'left': None, 'right': None}, 'right': {'value': 4, 'left': None, 'right': None}}}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'left'}, {'operation': 'set_right', 'item': None}, {'operation': 'to_tree'}]}",expectedValue
,set_right with subtree,zipper,"{'type': 'tree', 'value': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 6, 'left': {'value': 7, 'left': None, 'right': None}, 'right': {'value': 8, 'left': None, 'right': None}}}}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'set_right', 'item': {'value': 6, 'left': {'value': 7, 'left': None, 'right': None}, 'right': {'value': 8, 'left': None, 'right': None}}}, {'operation': 'to_tree'}]}",expectedValue
,set_value on deep focus,zipper,"{'type': 'tree', 'value': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 5, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'left'}, {'operation': 'right'}, {'operation': 'set_value', 'item': 5}, {'operation': 'to_tree'}]}",expectedValue
,different paths to same zipper,zipper,"{'type': 'zipper', 'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'right'}]}","{'initialTree': {'value': 1, 'left': {'value': 2, 'left': None, 'right': {'value': 3, 'left': None, 'right': None}}, 'right': {'value': 4, 'left': None, 'right': None}}, 'operations': [{'operation': 'left'}, {'operation': 'up'}, {'operation': 'right'}]}",sameResultFromOperations
